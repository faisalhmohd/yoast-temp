{"version":3,"sources":["../../../src/values/Mark.js"],"names":["Mark","properties","original","marked","_properties","prototype","getOriginal","getMarked","applyWithReplace","text","split","join","serialize","_parseClass","parse","serialized"],"mappings":";;;;;;;;AAAA;;AAEA;;;;;;;;AAQA,SAASA,IAAT,CAAeC,UAAf,EAA4B;AAC3B,0BAAUA,UAAV,EAAsB,EAAEC,UAAU,EAAZ,EAAgBC,QAAQ,EAAxB,EAAtB;;AAEA,OAAKC,WAAL,GAAmBH,UAAnB;AACA;;AAGD;;;;;AAKAD,KAAKK,SAAL,CAAeC,WAAf,GAA6B,YAAW;AACvC,SAAO,KAAKF,WAAL,CAAiBF,QAAxB;AACA,CAFD;;AAIA;;;;;AAKAF,KAAKK,SAAL,CAAeE,SAAf,GAA2B,YAAW;AACrC,SAAO,KAAKH,WAAL,CAAiBD,MAAxB;AACA,CAFD;;AAIA;;;;;;AAMAH,KAAKK,SAAL,CAAeG,gBAAf,GAAkC,UAAUC,IAAV,EAAiB;AAClD;AACA,SAAOA,KAAKC,KAAL,CAAY,KAAKN,WAAL,CAAiBF,QAA7B,EAAwCS,IAAxC,CAA8C,KAAKP,WAAL,CAAiBD,MAA/D,CAAP;AACA,CAHD;;AAKA;;;;;AAKAH,KAAKK,SAAL,CAAeO,SAAf,GAA2B,YAAW;AACrC;AACCC,iBAAa;AADd,KAEI,KAAKT,WAFT;AAIA,CALD;;AAOA;;;;;;;AAOAJ,KAAKc,KAAL,GAAa,UAAUC,UAAV,EAAuB;AACnC,SAAO,IAAIf,IAAJ,CAAUe,UAAV,CAAP;AACA,CAFD;;kBAIef,I","file":"Mark.js","sourcesContent":["import { defaults } from \"lodash-es\";\n\n/**\n * Represents a marked piece of text\n *\n * @param {Object} properties The properties of this Mark.\n * @param {string} properties.original The original text that should be marked.\n * @param {string} properties.marked The new text including marks.\n * @constructor\n */\nfunction Mark( properties ) {\n\tdefaults( properties, { original: \"\", marked: \"\" } );\n\n\tthis._properties = properties;\n}\n\n\n/**\n * Returns the original text\n *\n * @returns {string} The original text.\n */\nMark.prototype.getOriginal = function() {\n\treturn this._properties.original;\n};\n\n/**\n * Returns the marked text\n *\n * @returns {string} The replaced text.\n */\nMark.prototype.getMarked = function() {\n\treturn this._properties.marked;\n};\n\n/**\n * Applies this mark to the given text\n *\n * @param {string} text The original text without the mark applied.\n * @returns {string} The A new text with the mark applied to it.\n */\nMark.prototype.applyWithReplace = function( text ) {\n\t// Cute method to replace everything in a string without using regex.\n\treturn text.split( this._properties.original ).join( this._properties.marked );\n};\n\n/**\n * Serializes the Mark instance to an object.\n *\n * @returns {Object} The serialized Mark.\n */\nMark.prototype.serialize = function() {\n\treturn {\n\t\t_parseClass: \"Mark\",\n\t\t...this._properties,\n\t};\n};\n\n/**\n * Parses the object to a Mark.\n *\n * @param {Object} serialized The serialized object.\n *\n * @returns {Mark} The parsed Mark.\n */\nMark.parse = function( serialized ) {\n\treturn new Mark( serialized );\n};\n\nexport default Mark;\n"]}