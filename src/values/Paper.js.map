{"version":3,"sources":["../../../src/values/Paper.js"],"names":["defaultAttributes","keyword","synonyms","description","title","titleWidth","url","locale","permalink","Paper","text","attributes","_text","onlyLetters","replace","_attributes","prototype","hasKeyword","getKeyword","hasSynonyms","getSynonyms","hasText","getText","hasDescription","getDescription","hasTitle","getTitle","hasTitleWidth","getTitleWidth","hasUrl","getUrl","hasLocale","getLocale","hasPermalink","getPermalink","serialize","_parseClass","equals","paper","parse","serialized"],"mappings":"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","file":"Paper.js","sourcesContent":["import { defaults } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\nimport { isEqual } from \"lodash-es\";\n\n/**\n * Default attributes to be used by the Paper if they are left undefined.\n * @type {{keyword: string, synonyms: string, description: string, title: string, url: string}}\n */\nvar defaultAttributes = {\n\tkeyword: \"\",\n\tsynonyms: \"\",\n\tdescription: \"\",\n\ttitle: \"\",\n\ttitleWidth: 0,\n\turl: \"\",\n\tlocale: \"en_US\",\n\tpermalink: \"\",\n};\n\n/**\n * Construct the Paper object and set the keyword property.\n *\n * @param {string} text                     The text to use in the analysis.\n * @param {object} [attributes]             The object containing all attributes.\n * @param {Object} [attributes.keyword]     The main keyword.\n * @param {Object} [attributes.synonyms]    The main keyword's synonyms.\n * @param {Object} [attributes.title]       The SEO title.\n * @param {Object} [attributes.description] The SEO description.\n * @param {Object} [attributes.titleWidth]  The width of the title in pixels.\n * @param {Object} [attributes.url]         The slug.\n * @param {Object} [attributes.permalink]   The base url + slug.\n * @param {Object} [attributes.locale]      The locale.\n *\n * @constructor\n */\nvar Paper = function( text, attributes ) {\n\tthis._text = text || \"\";\n\n\tattributes = attributes || {};\n\tdefaults( attributes, defaultAttributes );\n\n\tif ( attributes.locale === \"\" ) {\n\t\tattributes.locale = defaultAttributes.locale;\n\t}\n\n\tconst onlyLetters = attributes.keyword.replace( /[‘’“”\"'.?!:;,¿¡«»&*@#±^%|~`[\\](){}⟨⟩<>/\\\\–\\-\\u2014\\u00d7\\u002b\\u0026\\s]/g, \"\" );\n\n\tif ( isEmpty( onlyLetters ) ) {\n\t\tattributes.keyword = defaultAttributes.keyword;\n\t}\n\n\tthis._attributes = attributes;\n};\n\n/**\n * Check whether a keyword is available.\n * @returns {boolean} Returns true if the Paper has a keyword.\n */\nPaper.prototype.hasKeyword = function() {\n\treturn this._attributes.keyword !== \"\";\n};\n\n/**\n * Return the associated keyword or an empty string if no keyword is available.\n * @returns {string} Returns Keyword\n */\nPaper.prototype.getKeyword = function() {\n\treturn this._attributes.keyword;\n};\n\n/**\n * Check whether synonyms is available.\n * @returns {boolean} Returns true if the Paper has synonyms.\n */\nPaper.prototype.hasSynonyms = function() {\n\treturn this._attributes.synonyms !== \"\";\n};\n\n/**\n * Return the associated synonyms or an empty string if no synonyms is available.\n * @returns {string} Returns synonyms.\n */\nPaper.prototype.getSynonyms = function() {\n\treturn this._attributes.synonyms;\n};\n\n/**\n * Check whether the text is available.\n * @returns {boolean} Returns true if the paper has a text.\n */\nPaper.prototype.hasText = function() {\n\treturn this._text !== \"\";\n};\n\n/**\n * Return the associated text or am empty string if no text is available.\n * @returns {string} Returns text\n */\nPaper.prototype.getText = function() {\n\treturn this._text;\n};\n\n/**\n * Check whether a description is available.\n * @returns {boolean} Returns true if the paper has a description.\n */\nPaper.prototype.hasDescription = function() {\n\treturn this._attributes.description !== \"\";\n};\n\n/**\n * Return the description or an empty string if no description is available.\n * @returns {string} Returns the description.\n */\nPaper.prototype.getDescription = function() {\n\treturn this._attributes.description;\n};\n\n/**\n * Check whether an title is available\n * @returns {boolean} Returns true if the Paper has a title.\n */\nPaper.prototype.hasTitle = function() {\n\treturn this._attributes.title !== \"\";\n};\n\n/**\n * Return the title, or an empty string of no title is available.\n * @returns {string} Returns the title\n */\nPaper.prototype.getTitle = function() {\n\treturn this._attributes.title;\n};\n\n/**\n * Check whether an title width in pixels is available\n * @returns {boolean} Returns true if the Paper has a title.\n */\nPaper.prototype.hasTitleWidth = function() {\n\treturn this._attributes.titleWidth !== 0;\n};\n\n/**\n * Return the title width in pixels, or an empty string of no title width in pixels is available.\n * @returns {string} Returns the title\n */\nPaper.prototype.getTitleWidth = function() {\n\treturn this._attributes.titleWidth;\n};\n\n/**\n * Check whether an url is available\n * @returns {boolean} Returns true if the Paper has an Url.\n */\nPaper.prototype.hasUrl = function() {\n\treturn this._attributes.url !== \"\";\n};\n\n/**\n * Return the url, or an empty string of no url is available.\n * @returns {string} Returns the url\n */\nPaper.prototype.getUrl = function() {\n\treturn this._attributes.url;\n};\n\n/**\n * Check whether a locale is available\n * @returns {boolean} Returns true if the paper has a locale\n */\nPaper.prototype.hasLocale = function() {\n\treturn this._attributes.locale !== \"\";\n};\n\n/**\n * Return the locale or an empty string if no locale is available\n * @returns {string} Returns the locale\n */\nPaper.prototype.getLocale = function() {\n\treturn this._attributes.locale;\n};\n\n/**\n * Check whether a permalink is available\n * @returns {boolean} Returns true if the Paper has a permalink.\n */\nPaper.prototype.hasPermalink = function() {\n\treturn this._attributes.permalink !== \"\";\n};\n\n/**\n * Return the permalink, or an empty string of no permalink is available.\n * @returns {string} Returns the permalink.\n */\nPaper.prototype.getPermalink = function() {\n\treturn this._attributes.permalink;\n};\n\n/*\n * Serializes the Paper instance to an object.\n *\n * @returns {Object} The serialized Paper.\n */\nPaper.prototype.serialize = function() {\n\treturn {\n\t\t_parseClass: \"Paper\",\n\t\ttext: this._text,\n\t\t...this._attributes,\n\t};\n};\n\n/**\n * Checks whether the given paper has the same properties as this instance.\n *\n * @param {Paper} paper The paper to compare to.\n *\n * @returns {boolean} Whether the given paper is identical or not.\n */\nPaper.prototype.equals = function( paper ) {\n\treturn this._text === paper.getText() && isEqual( this._attributes, paper._attributes );\n};\n\n/**\n * Parses the object to a Paper.\n *\n * @param {Object} serialized The serialized object.\n *\n * @returns {Paper} The parsed Paper.\n */\nPaper.parse = function( serialized ) {\n\t// _parseClass is taken here so it doesn't end up in the attributes.\n\t// eslint-disable-next-line no-unused-vars\n\tconst { text, _parseClass, ...attributes } = serialized;\n\n\treturn new Paper( text, attributes );\n};\n\nexport default Paper;\n"]}