{"version":3,"sources":["../../../src/values/SentencePart.js"],"names":["SentencePart","sentencePartText","auxiliaries","locale","_sentencePartText","_auxiliaries","_locale","_isPassive","prototype","getSentencePartText","isPassive","getAuxiliaries","getLocale","setPassive","passive","serialize","_parseClass","parse","serialized","sentencePart"],"mappings":";;;;;AAAA;;;;;;;;;AASA,IAAIA,eAAe,SAAfA,YAAe,CAAUC,gBAAV,EAA4BC,WAA5B,EAAyCC,MAAzC,EAAkD;AACpE,OAAKC,iBAAL,GAAyBH,gBAAzB;AACA,OAAKI,YAAL,GAAoBH,WAApB;AACA,OAAKI,OAAL,GAAeH,MAAf;AACA,OAAKI,UAAL,GAAkB,KAAlB;AACA,CALD;;AAOA;;;;;AAKAP,aAAaQ,SAAb,CAAuBC,mBAAvB,GAA6C,YAAW;AACvD,SAAO,KAAKL,iBAAZ;AACA,CAFD;;AAIA;;;;;AAKAJ,aAAaQ,SAAb,CAAuBE,SAAvB,GAAmC,YAAW;AAC7C,SAAO,KAAKH,UAAZ;AACA,CAFD;;AAIA;;;;;AAKAP,aAAaQ,SAAb,CAAuBG,cAAvB,GAAwC,YAAW;AAClD,SAAO,KAAKN,YAAZ;AACA,CAFD;;AAIA;;;;;AAKAL,aAAaQ,SAAb,CAAuBI,SAAvB,GAAmC,YAAW;AAC7C,SAAO,KAAKN,OAAZ;AACA,CAFD;;AAIA;;;;;;AAMAN,aAAaQ,SAAb,CAAuBK,UAAvB,GAAoC,UAAUC,OAAV,EAAoB;AACvD,OAAKP,UAAL,GAAkBO,OAAlB;AACA,CAFD;;AAIA;;;;;AAKAd,aAAaQ,SAAb,CAAuBO,SAAvB,GAAmC,YAAW;AAC7C,SAAO;AACNC,iBAAa,cADP;AAENf,sBAAkB,KAAKG,iBAFjB;AAGNF,iBAAa,KAAKG,YAHZ;AAINF,YAAQ,KAAKG,OAJP;AAKNI,eAAW,KAAKH;AALV,GAAP;AAOA,CARD;;AAUA;;;;;;;AAOAP,aAAaiB,KAAb,GAAqB,UAAUC,UAAV,EAAuB;AAC3C,MAAMC,eAAe,IAAInB,YAAJ,CAAkBkB,WAAWjB,gBAA7B,EAA+CiB,WAAWhB,WAA1D,EAAuEgB,WAAWf,MAAlF,CAArB;AACAgB,eAAaN,UAAb,CAAyBK,WAAWR,SAApC;;AAEA,SAAOS,YAAP;AACA,CALD;;kBAOenB,Y","file":"SentencePart.js","sourcesContent":["/**\n * Constructs a sentence part object.\n *\n * @param {string} sentencePartText The text in the sentence part.\n * @param {Array} auxiliaries The list of auxiliaries from the sentence part.\n * @param {string} locale The locale used for this sentence part.\n *\n * @constructor\n */\nvar SentencePart = function( sentencePartText, auxiliaries, locale ) {\n\tthis._sentencePartText = sentencePartText;\n\tthis._auxiliaries = auxiliaries;\n\tthis._locale = locale;\n\tthis._isPassive = false;\n};\n\n/**\n * Returns the sentence part string.\n *\n * @returns {string} The sentence part.\n */\nSentencePart.prototype.getSentencePartText = function() {\n\treturn this._sentencePartText;\n};\n\n/**\n * Returns the passiveness of a sentence part.\n *\n * @returns {boolean} returns true if passive, otherwise returns false.\n */\nSentencePart.prototype.isPassive = function() {\n\treturn this._isPassive;\n};\n\n/**\n * Returns the list of auxiliaries from a sentence part.\n *\n * @returns {Array} The list of auxiliaries.\n */\nSentencePart.prototype.getAuxiliaries = function() {\n\treturn this._auxiliaries;\n};\n\n/**\n * Returns the locale of the sentence part.\n *\n * @returns {string} The locale of the sentence part.\n */\nSentencePart.prototype.getLocale = function() {\n\treturn this._locale;\n};\n\n/**\n * Sets the passiveness of the sentence part.\n *\n * @param {boolean} passive Whether the sentence part is passive or not.\n * @returns {void}\n */\nSentencePart.prototype.setPassive = function( passive ) {\n\tthis._isPassive = passive;\n};\n\n/**\n * Serializes the SentencePart instance to an object.\n *\n * @returns {Object} The serialized SentencePart.\n */\nSentencePart.prototype.serialize = function() {\n\treturn {\n\t\t_parseClass: \"SentencePart\",\n\t\tsentencePartText: this._sentencePartText,\n\t\tauxiliaries: this._auxiliaries,\n\t\tlocale: this._locale,\n\t\tisPassive: this._isPassive,\n\t};\n};\n\n/**\n * Parses the object to a SentencePart.\n *\n * @param {Object} serialized The serialized object.\n *\n * @returns {SentencePart} The parsed SentencePart.\n */\nSentencePart.parse = function( serialized ) {\n\tconst sentencePart = new SentencePart( serialized.sentencePartText, serialized.auxiliaries, serialized.locale );\n\tsentencePart.setPassive( serialized.isPassive );\n\n\treturn sentencePart;\n};\n\nexport default SentencePart;\n"]}