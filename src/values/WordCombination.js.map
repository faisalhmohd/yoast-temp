{"version":3,"sources":["../../../src/values/WordCombination.js"],"names":["isFunctionWord","word","functionWords","indexOf","toLocaleLowerCase","WordCombination","words","occurrences","_words","_length","length","_occurrences","_functionWords","lengthBonus","prototype","getLengthBonus","getWords","getLength","getCombination","join","getOccurrences","incrementOccurrences","getMultiplier","relevantWordPercentage","isRelevantWord","_relevantWords","getRelevantWordPercentage","relevantWordCount","wordRelevance","bind","getRelevance","setRelevantWords","relevantWords","getDensity","wordCount","serialize","_parseClass","parse","serialized","wordCombination"],"mappings":"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","file":"WordCombination.js","sourcesContent":["import { forEach } from \"lodash-es\";\nimport { has } from \"lodash-es\";\n\n/**\n * Returns whether or not the given word is a function word.\n *\n * @param {string} word The word to check.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {boolean} Whether or not the word is a function word.\n */\nfunction isFunctionWord( word, functionWords ) {\n\treturn -1 !== functionWords.indexOf( word.toLocaleLowerCase() );\n}\n\n/**\n * Represents a word combination in the context of relevant words.\n *\n * @constructor\n *\n * @param {string[]} words The list of words that this combination consists of.\n * @param {number} [occurrences] The number of occurrences, defaults to 0.\n * @param {Function} functionWords The function containing the lists of function words.\n */\nfunction WordCombination( words, occurrences, functionWords ) {\n\tthis._words = words;\n\tthis._length = words.length;\n\tthis._occurrences = occurrences || 0;\n\tthis._functionWords = functionWords;\n}\n\nWordCombination.lengthBonus = {\n\t2: 3,\n\t3: 7,\n\t4: 12,\n\t5: 18,\n};\n\n/**\n * Returns the base relevance based on the length of this combination.\n *\n * @returns {number} The base relevance based on the length.\n */\nWordCombination.prototype.getLengthBonus = function() {\n\tif ( has( WordCombination.lengthBonus, this._length ) ) {\n\t\treturn WordCombination.lengthBonus[ this._length ];\n\t}\n\n\treturn 0;\n};\n\n/**\n * Returns the list with words.\n *\n * @returns {array} The list with words.\n */\nWordCombination.prototype.getWords = function() {\n\treturn this._words;\n};\n\n/**\n * Returns the word combination length.\n *\n * @returns {number} The word combination length.\n */\nWordCombination.prototype.getLength = function() {\n\treturn this._length;\n};\n\n/**\n * Returns the combination as it occurs in the text.\n *\n * @returns {string} The combination.\n */\nWordCombination.prototype.getCombination = function() {\n\treturn this._words.join( \" \" );\n};\n\n/**\n * Returns the amount of occurrences of this word combination.\n *\n * @returns {number} The amount of occurrences.\n */\nWordCombination.prototype.getOccurrences = function() {\n\treturn this._occurrences;\n};\n\n/**\n * Increments the occurrences.\n *\n * @returns {void}\n */\nWordCombination.prototype.incrementOccurrences = function() {\n\tthis._occurrences += 1;\n};\n\n/**\n * Returns the relevance of the length.\n *\n * @param {number} relevantWordPercentage The relevance of the words within the combination.\n * @returns {number} The relevance based on the length and the word relevance.\n */\nWordCombination.prototype.getMultiplier = function( relevantWordPercentage ) {\n\tvar lengthBonus = this.getLengthBonus();\n\n\t// The relevance scales linearly from the relevance of one word to the maximum.\n\treturn 1 + relevantWordPercentage * lengthBonus;\n};\n\n/**\n * Returns if the given word is a relevant word based on the given word relevance.\n *\n * @param {string} word The word to check if it is relevant.\n * @returns {boolean} Whether or not it is relevant.\n */\nWordCombination.prototype.isRelevantWord = function( word ) {\n\treturn has( this._relevantWords, word );\n};\n\n/**\n * Returns the relevance of the words within this combination.\n *\n * @returns {number} The percentage of relevant words inside this combination.\n */\nWordCombination.prototype.getRelevantWordPercentage = function() {\n\tvar relevantWordCount = 0, wordRelevance = 1;\n\n\tif ( this._length > 1 ) {\n\t\tforEach( this._words, function( word ) {\n\t\t\tif ( this.isRelevantWord( word ) ) {\n\t\t\t\trelevantWordCount += 1;\n\t\t\t}\n\t\t}.bind( this ) );\n\n\t\twordRelevance = relevantWordCount / this._length;\n\t}\n\n\treturn wordRelevance;\n};\n\n/**\n * Returns the relevance for this word combination.\n *\n * @returns {number} The relevance of this word combination.\n */\nWordCombination.prototype.getRelevance = function() {\n\tif ( this._words.length === 1 && isFunctionWord( this._words[ 0 ], this._functionWords ) ) {\n\t\treturn 0;\n\t}\n\n\tvar wordRelevance = this.getRelevantWordPercentage();\n\tif ( wordRelevance === 0 ) {\n\t\treturn 0;\n\t}\n\n\treturn this.getMultiplier( wordRelevance ) * this._occurrences;\n};\n\n/**\n * Sets the relevance of single words\n *\n * @param {Object} relevantWords A mapping from a word to a relevance.\n * @returns {void}\n */\nWordCombination.prototype.setRelevantWords = function( relevantWords ) {\n\tthis._relevantWords = relevantWords;\n};\n\n/**\n * Returns the density of this combination within the text.\n *\n * @param {number} wordCount The word count of the text this combination was found in.\n * @returns {number} The density of this combination.\n */\nWordCombination.prototype.getDensity = function( wordCount ) {\n\treturn this._occurrences / wordCount;\n};\n\n/**\n * Serializes the WordCombination instance to an object.\n *\n * @returns {Object} The serialized WordCombination.\n */\nWordCombination.prototype.serialize = function() {\n\treturn {\n\t\t_parseClass: \"WordCombination\",\n\t\twords: this._words,\n\t\toccurrences: this._occurrences,\n\t\tfunctionWords: this._functionWords,\n\t\trelevantWords: this._relevantWords,\n\t};\n};\n\n/**\n * Parses the object to a WordCombination.\n *\n * @param {Object} serialized The serialized object.\n *\n * @returns {WordCombination} The parsed WordCombination.\n */\nWordCombination.parse = function( serialized ) {\n\tconst wordCombination = new WordCombination( serialized.words, serialized.occurrences, serialized.functionWords );\n\twordCombination.setRelevantWords( serialized.relevantWords );\n\n\treturn wordCombination;\n};\n\nexport default WordCombination;\n"]}