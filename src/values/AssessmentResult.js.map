{"version":3,"sources":["../../../src/values/AssessmentResult.js"],"names":["emptyMarker","AssessmentResult","values","_hasScore","_identifier","_hasMarks","_marker","score","text","marks","setScore","setText","setMarks","prototype","hasScore","getScore","hasText","getText","getMarks","length","setIdentifier","identifier","getIdentifier","setMarker","marker","hasMarker","getMarker","setHasMarks","hasMarks","serialize","_parseClass","map","mark","parse","serialized","result"],"mappings":"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","file":"AssessmentResult.js","sourcesContent":["import { isArray } from \"lodash-es\";\nimport { isUndefined } from \"lodash-es\";\nimport { isNumber } from \"lodash-es\";\n\nimport Mark from \"./Mark\";\n\n/**\n * A function that only returns an empty that can be used as an empty marker\n *\n * @returns {Array} A list of empty marks.\n */\nvar emptyMarker = function() {\n\treturn [];\n};\n\n/**\n * Construct the AssessmentResult value object.\n *\n * @param {Object} [values] The values for this assessment result.\n *\n * @constructor\n */\nvar AssessmentResult = function( values ) {\n\tthis._hasScore = false;\n\tthis._identifier = \"\";\n\tthis._hasMarks = false;\n\tthis._marker = emptyMarker;\n\tthis.score = 0;\n\tthis.text = \"\";\n\tthis.marks = [];\n\n\tif ( isUndefined( values ) ) {\n\t\tvalues = {};\n\t}\n\n\tif ( ! isUndefined( values.score ) ) {\n\t\tthis.setScore( values.score );\n\t}\n\n\tif ( ! isUndefined( values.text ) ) {\n\t\tthis.setText( values.text );\n\t}\n\n\tif ( ! isUndefined( values.marks ) ) {\n\t\tthis.setMarks( values.marks );\n\t}\n};\n\n/**\n * Check if a score is available.\n * @returns {boolean} Whether or not a score is available.\n */\nAssessmentResult.prototype.hasScore = function() {\n\treturn this._hasScore;\n};\n\n/**\n * Get the available score\n * @returns {number} The score associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getScore = function() {\n\treturn this.score;\n};\n\n/**\n * Set the score for the assessment.\n * @param {number} score The score to be used for the score property\n * @returns {void}\n */\nAssessmentResult.prototype.setScore = function( score ) {\n\tif ( isNumber( score ) ) {\n\t\tthis.score = score;\n\t\tthis._hasScore = true;\n\t}\n};\n\n/**\n * Check if a text is available.\n * @returns {boolean} Whether or not a text is available.\n */\nAssessmentResult.prototype.hasText = function() {\n\treturn this.text !== \"\";\n};\n\n/**\n * Get the available text\n * @returns {string} The text associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getText = function() {\n\treturn this.text;\n};\n\n/**\n * Set the text for the assessment.\n * @param {string} text The text to be used for the text property\n * @returns {void}\n */\nAssessmentResult.prototype.setText = function( text ) {\n\tif ( isUndefined( text ) ) {\n\t\ttext = \"\";\n\t}\n\n\tthis.text = text;\n};\n\n/**\n * Gets the available marks.\n *\n * @returns {array} The marks associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getMarks = function() {\n\treturn this.marks;\n};\n\n/**\n * Sets the marks for the assessment.\n *\n * @param {array} marks The marks to be used for the marks property\n *\n * @returns {void}\n */\nAssessmentResult.prototype.setMarks = function( marks ) {\n\tif ( isArray( marks ) ) {\n\t\tthis.marks = marks;\n\t\tthis._hasMarks = marks.length > 0;\n\t}\n};\n\n/**\n * Sets the identifier\n *\n * @param {string} identifier An alphanumeric identifier for this result.\n * @returns {void}\n */\nAssessmentResult.prototype.setIdentifier = function( identifier ) {\n\tthis._identifier = identifier;\n};\n\n/**\n * Gets the identifier\n *\n * @returns {string} An alphanumeric identifier for this result.\n */\nAssessmentResult.prototype.getIdentifier = function() {\n\treturn this._identifier;\n};\n\n/**\n * Sets the marker, a pure function that can return the marks for a given Paper\n *\n * @param {Function} marker The marker to set.\n * @returns {void}\n */\nAssessmentResult.prototype.setMarker = function( marker ) {\n\tthis._marker = marker;\n};\n\n/**\n * Returns whether or not this result has a marker that can be used to mark for a given Paper\n *\n * @returns {boolean} Whether or this result has a marker.\n */\nAssessmentResult.prototype.hasMarker = function() {\n\treturn this._hasMarks && this._marker !== this.emptyMarker;\n};\n\n/**\n * Gets the marker, a pure function that can return the marks for a given Paper\n *\n * @returns {Function} The marker.\n */\nAssessmentResult.prototype.getMarker = function() {\n\treturn this._marker;\n};\n\n/**\n * Sets the value of _hasMarks to determine if there is something to mark.\n *\n * @param {boolean} hasMarks Is there something to mark.\n * @returns {void}\n */\nAssessmentResult.prototype.setHasMarks = function( hasMarks ) {\n\tthis._hasMarks = hasMarks;\n};\n\n/**\n * Returns the value of _hasMarks to determine if there is something to mark.\n *\n * @returns {boolean} Is there something to mark.\n */\nAssessmentResult.prototype.hasMarks = function() {\n\treturn this._hasMarks;\n};\n\n/**\n * Serializes the AssessmentResult instance to an object.\n *\n * @returns {Object} The serialized AssessmentResult.\n */\nAssessmentResult.prototype.serialize = function() {\n\treturn {\n\t\t_parseClass: \"AssessmentResult\",\n\t\tidentifier: this._identifier,\n\t\tscore: this.score,\n\t\ttext: this.text,\n\t\tmarks: this.marks.map( mark => mark.serialize() ),\n\t};\n};\n\n/**\n * Parses the object to an AssessmentResult.\n *\n * @param {Object} serialized The serialized object.\n *\n * @returns {AssessmentResult} The parsed AssessmentResult.\n */\nAssessmentResult.parse = function( serialized ) {\n\tconst result = new AssessmentResult( {\n\t\ttext: serialized.text,\n\t\tscore: serialized.score,\n\t\tmarks: serialized.marks.map( mark => Mark.parse( mark ) ),\n\t} );\n\tresult.setIdentifier( serialized.identifier );\n\n\treturn result;\n};\n\nexport default AssessmentResult;\n"]}