{"version":3,"sources":["../../../../src/morphology/morphoHelpers/buildFormRule.js"],"names":["buildOneFormFromRegex","word","regexes","i","length","reg","test","replace","repl","buildTwoFormsFromRegex","repl1","repl2"],"mappings":";;;;;AAAA;;;;;;;;;AASA,IAAMA,wBAAwB,SAAxBA,qBAAwB,CAAUC,IAAV,EAAgBC,OAAhB,EAA0B;AACvD,OAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAID,QAAQE,MAA7B,EAAqCD,GAArC,EAA2C;AAC1C,QAAKD,QAASC,CAAT,EAAaE,GAAb,CAAiBC,IAAjB,CAAuBL,IAAvB,MAAkC,IAAvC,EAA8C;AAC7C,aAAOA,KAAKM,OAAL,CAAcL,QAASC,CAAT,EAAaE,GAA3B,EAAgCH,QAASC,CAAT,EAAaK,IAA7C,CAAP;AACA;AACD;AACD,CAND;;AAQA;;;;;;;;;AASA,IAAMC,yBAAyB,SAAzBA,sBAAyB,CAAUR,IAAV,EAAgBC,OAAhB,EAA0B;AACxD,OAAM,IAAIC,IAAI,CAAd,EAAiBA,IAAID,QAAQE,MAA7B,EAAqCD,GAArC,EAA2C;AAC1C,QAAKD,QAASC,CAAT,EAAaE,GAAb,CAAiBC,IAAjB,CAAuBL,IAAvB,MAAkC,IAAvC,EAA8C;AAC7C,aAAO,CACNA,KAAKM,OAAL,CAAcL,QAASC,CAAT,EAAaE,GAA3B,EAAgCH,QAASC,CAAT,EAAaO,KAA7C,CADM,EAENT,KAAKM,OAAL,CAAcL,QAASC,CAAT,EAAaE,GAA3B,EAAgCH,QAASC,CAAT,EAAaQ,KAA7C,CAFM,CAAP;AAIA;AACD;AACD,CATD;;QAYCX,qB,GAAAA,qB;QACAS,sB,GAAAA,sB","file":"buildFormRule.js","sourcesContent":["/**\n * Checks if the input word qualifies for the input regex and if so builds a required form.\n * This function is used for other more specific functions.\n *\n * @param {string} word The word to build forms for.\n * @param {Array} regexes The regex-based array of rules to compare the word against.\n *\n * @returns {string} The newly built form of the word.\n */\nconst buildOneFormFromRegex = function( word, regexes ) {\n\tfor ( let i = 0; i < regexes.length; i++ ) {\n\t\tif ( regexes[ i ].reg.test( word ) === true ) {\n\t\t\treturn word.replace( regexes[ i ].reg, regexes[ i ].repl );\n\t\t}\n\t}\n};\n\n/**\n * Checks if the input word qualifies for the input regex and if so builds two required forms.\n * This function is used for other more specific functions.\n *\n * @param {string} word The word for which to determine its forms.\n * @param {Array} regexes The regex-based array of rules to compare the word against.\n *\n * @returns {Array} Array of word forms.\n */\nconst buildTwoFormsFromRegex = function( word, regexes ) {\n\tfor ( let i = 0; i < regexes.length; i++ ) {\n\t\tif ( regexes[ i ].reg.test( word ) === true ) {\n\t\t\treturn [\n\t\t\t\tword.replace( regexes[ i ].reg, regexes[ i ].repl1 ),\n\t\t\t\tword.replace( regexes[ i ].reg, regexes[ i ].repl2 ),\n\t\t\t];\n\t\t}\n\t}\n};\n\nexport {\n\tbuildOneFormFromRegex,\n\tbuildTwoFormsFromRegex,\n};\n"]}