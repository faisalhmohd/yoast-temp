{"version":3,"sources":["../../../src/researches/keyphraseDistribution.js"],"names":["computeScoresPerSentenceLongTopic","topic","sentences","locale","sentenceScores","Array","length","i","foundInCurrentSentence","percentWordMatches","computeScoresPerSentenceShortTopic","currentSentence","maximizeSentenceScores","sentenceScoresTransposed","map","col","row","scoresForOneSentence","getDistraction","numberOfSentences","allTopicSentencesIndices","push","numberOfTopicSentences","unshift","distances","getSentenceScores","topicFormsInOneArray","topicNumber","language","maximizedSentenceScores","sentencesWithMaximizedScores","sentence","score","sentencesWithTopic","filter","sentenceObject","keyphraseDistributionResearcher","paper","researcher","getText","topicForms","getResearch","getLocale","keyphraseForms","synonymsForms","forEach","synonym","allTopicWords","sort","a","b","maxLengthDistraction","sentencesToHighlight","keyphraseDistributionScore"],"mappings":"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","file":"keyphraseDistribution.js","sourcesContent":["import getSentences from \"../stringProcessing/getSentences\";\nimport { findWordFormsInString } from \"./findKeywordFormsInString\";\nimport { max, uniq as unique } from \"lodash-es\";\nimport { zipWith } from \"lodash-es\";\nimport { flattenDeep } from \"lodash-es\";\nimport { indexOf } from \"lodash-es\";\nimport { markWordsInSentences } from \"../stringProcessing/markWordsInSentences\";\nimport getLanguage from \"../helpers/getLanguage\";\n\n/**\n * Checks whether at least half of the content words from the topic are found within the sentence.\n * Assigns a score to every sentence following the following schema:\n * 9 if at least half of the content words from the topic are in the sentence,\n * 3 otherwise.\n *\n * @param {Array}  topic     The word forms of all content words in a keyphrase or a synonym.\n * @param {Array}  sentences An array of all sentences in the text.\n * @param {string} locale    The locale of the paper to analyse.\n *\n * @returns {Array} The scores per sentence.\n */\nconst computeScoresPerSentenceLongTopic = function( topic, sentences, locale ) {\n\tconst sentenceScores = Array( sentences.length );\n\n\tfor ( let i = 0; i < sentences.length; i++ ) {\n\t\tconst foundInCurrentSentence = findWordFormsInString( topic, sentences[ i ], locale );\n\n\t\tif ( foundInCurrentSentence.percentWordMatches >= 50 ) {\n\t\t\tsentenceScores[ i ] = 9;\n\t\t} else {\n\t\t\tsentenceScores[ i ] = 3;\n\t\t}\n\t}\n\n\treturn sentenceScores;\n};\n\n\n/**\n * Checks whether all content words from the topic are found within one sentence.\n * Assigns a score to every sentence following the following schema:\n * 9 if all content words from the topic are in the sentence,\n * 3 if not all content words from the topic were found in the sentence.\n *\n * @param {Array}  topic     The word forms of all content words in a keyphrase or a synonym.\n * @param {Array}  sentences An array of all sentences in the text.\n * @param {string} locale    The locale of the paper to analyse.\n *\n * @returns {Array} The scores per sentence.\n */\nconst computeScoresPerSentenceShortTopic = function( topic, sentences, locale ) {\n\tconst sentenceScores = Array( sentences.length );\n\n\tfor ( let i = 0; i < sentences.length; i++ ) {\n\t\tconst currentSentence = sentences[ i ];\n\t\tconst foundInCurrentSentence = findWordFormsInString( topic, currentSentence, locale );\n\t\tif ( foundInCurrentSentence.percentWordMatches === 100 ) {\n\t\t\tsentenceScores[ i ] = 9;\n\t\t} else {\n\t\t\tsentenceScores[ i ] = 3;\n\t\t}\n\t}\n\treturn sentenceScores;\n};\n\n/**\n * Maximizes scores: Give every sentence a maximal score that it got from analysis of all topics\n *\n * @param {Array} sentenceScores The scores for every sentence, as assessed per keyphrase and every synonym.\n *\n * @returns {Array} Maximal scores of topic relevance per sentence.\n */\nconst maximizeSentenceScores = function( sentenceScores ) {\n\tconst sentenceScoresTransposed = sentenceScores[ 0 ].map( function( col, i ) {\n\t\treturn sentenceScores.map( function( row ) {\n\t\t\treturn row[ i ];\n\t\t} );\n\t} );\n\n\treturn sentenceScoresTransposed.map( function( scoresForOneSentence ) {\n\t\treturn max( scoresForOneSentence );\n\t} );\n};\n\n\n/**\n * Computes the maximally long piece of text that does not include the topic.\n *\n * @param {Array} sentenceScores The array of scores per sentence.\n *\n * @returns {number} The maximum number of sentences that do not include the topic.\n */\nconst getDistraction = function( sentenceScores ) {\n\tconst numberOfSentences = sentenceScores.length;\n\tconst allTopicSentencesIndices = [];\n\n\tfor ( let i = 0; i < numberOfSentences; i++ ) {\n\t\tif ( sentenceScores[ i ] > 3 ) {\n\t\t\tallTopicSentencesIndices.push( i );\n\t\t}\n\t}\n\n\tconst numberOfTopicSentences = allTopicSentencesIndices.length;\n\n\tif ( numberOfTopicSentences === 0 ) {\n\t\treturn numberOfSentences;\n\t}\n\n\t/**\n\t * Add fake topic sentences at the very beginning and at the very end\n\t * to account for cases when the text starts or ends with a train of distraction.\n\t */\n\tallTopicSentencesIndices.unshift( -1 );\n\tallTopicSentencesIndices.push( numberOfSentences );\n\n\tconst distances = [];\n\n\tfor ( let i = 1; i < numberOfTopicSentences + 2; i++ ) {\n\t\tdistances.push( allTopicSentencesIndices[ i ] - allTopicSentencesIndices[ i - 1 ] - 1 );\n\t}\n\n\treturn max( distances );\n};\n\n/**\n * Computes the per-sentence scores depending on the length of the topic phrase and maximizes them over all topic phrases.\n *\n * @param {Array}  sentences              The sentences to get scores for.\n * @param {Array}  topicFormsInOneArray   The topic phrases forms to search for in the sentences.\n * @param {string} locale                 The locale to work in.\n *\n * @returns {Object} An array with maximized score per sentence and an array with all sentences that do not contain the topic.\n */\nconst getSentenceScores = function( sentences, topicFormsInOneArray, locale ) {\n\t// Compute per-sentence scores of topic-relatedness.\n\tconst topicNumber = topicFormsInOneArray.length;\n\n\tconst sentenceScores = Array( topicNumber );\n\n\t// Determine whether the language has function words.\n\tconst language = getLanguage( locale );\n\n\t// For languages with function words apply either full match or partial match depending on topic length\n\tif ( indexOf( [ \"en\", \"de\", \"nl\", \"fr\", \"es\", \"it\", \"pt\", \"ru\", \"pl\" ], language  ) >= 0 ) {\n\t\tfor ( let i = 0; i < topicNumber; i++ ) {\n\t\t\tconst topic = topicFormsInOneArray[ i ];\n\t\t\tif ( topic.length < 4 ) {\n\t\t\t\tsentenceScores[ i ] = computeScoresPerSentenceShortTopic( topic, sentences, locale );\n\t\t\t} else {\n\t\t\t\tsentenceScores[ i ] = computeScoresPerSentenceLongTopic( topic, sentences, locale );\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// For languages without function words apply the full match always\n\t\tfor ( let i = 0; i < topicNumber; i++ ) {\n\t\t\tconst topic = topicFormsInOneArray[ i ];\n\t\t\tsentenceScores[ i ] = computeScoresPerSentenceShortTopic( topic, sentences, locale );\n\t\t}\n\t}\n\n\t// Maximize scores: Give every sentence a maximal score that it got from analysis of all topics\n\tconst maximizedSentenceScores = maximizeSentenceScores( sentenceScores );\n\n\t// Zip an array combining each sentence with the associated maximized score.\n\tconst sentencesWithMaximizedScores =  zipWith( sentences, maximizedSentenceScores, ( sentence, score ) => {\n\t\treturn { sentence, score };\n\t} );\n\n\t// Filter sentences that contain topic words for future highlights.\n\tconst sentencesWithTopic = sentencesWithMaximizedScores.filter( sentenceObject => sentenceObject.score > 3 );\n\n\treturn {\n\t\tmaximizedSentenceScores: maximizedSentenceScores,\n\t\tsentencesWithTopic: sentencesWithTopic.map( sentenceObject => sentenceObject.sentence ),\n\t};\n};\n\n\n/**\n * Determines which portions of the text did not receive a lot of content words from keyphrase and synonyms.\n *\n * @param {Paper}       paper       The paper to check the keyphrase distribution for.\n * @param {Researcher}  researcher  The researcher to use for analysis.\n *\n * @returns {Object} The scores of topic relevance per portion of text and an array of all word forms to highlight.\n */\nconst keyphraseDistributionResearcher = function( paper, researcher ) {\n\tconst sentences = getSentences( paper.getText() );\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\tconst locale = paper.getLocale();\n\tconst topicFormsInOneArray = [ topicForms.keyphraseForms ];\n\n\ttopicForms.synonymsForms.forEach( function( synonym ) {\n\t\ttopicFormsInOneArray.push( synonym );\n\t} );\n\n\tconst allTopicWords = unique( flattenDeep( topicFormsInOneArray ) ).sort( ( a, b ) => b.length - a.length );\n\n\t// Get per-sentence scores and sentences that have topic.\n\tconst sentenceScores = getSentenceScores( sentences, topicFormsInOneArray, locale );\n\tconst maximizedSentenceScores = sentenceScores.maximizedSentenceScores;\n\tconst maxLengthDistraction = getDistraction( maximizedSentenceScores );\n\n\treturn {\n\t\tsentencesToHighlight: markWordsInSentences( allTopicWords, sentenceScores.sentencesWithTopic, locale ),\n\t\tkeyphraseDistributionScore: maxLengthDistraction / sentences.length * 100,\n\t};\n};\n\nexport {\n\tcomputeScoresPerSentenceShortTopic,\n\tcomputeScoresPerSentenceLongTopic,\n\tmaximizeSentenceScores,\n\tkeyphraseDistributionResearcher,\n\tgetDistraction,\n};\n"]}