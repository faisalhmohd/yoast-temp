{"version":3,"sources":["../../../../../src/researches/dutch/passiveVoice/DutchParticiple.js"],"names":["DutchParticiple","participle","sentencePart","attributes","call","require","inherits","prototype","isPassive","getSentencePart","getParticiple","language","getLanguage","isOnNonParticiplesList","hasNonParticipleEnding","directPrecedenceException","getType","test"],"mappings":";;;;;;AAAA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAMA,kBAAkB,SAAlBA,eAAkB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAiD;AACxE,uBAAWC,IAAX,CAAiB,IAAjB,EAAuBH,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACA,2BAAeC,IAAf,CAAqB,IAArB;AACA,CAHD;;AAKAC,QAAS,MAAT,EAAkBC,QAAlB,CAA4BN,eAA5B;;AAEA;;;;;;AAMAA,gBAAgBO,SAAhB,CAA0BC,SAA1B,GAAsC,YAAW;AAChD,MAAMN,eAAe,KAAKO,eAAL,EAArB;AACA,MAAMR,aAAa,KAAKS,aAAL,EAAnB;AACA,MAAMC,WAAW,KAAKC,WAAL,EAAjB;;AAEA,SAAO,CAAE,KAAKC,sBAAL,EAAF,IACN,CAAE,KAAKC,sBAAL,EADI,IAEN,CAAE,KAAKC,yBAAL,CAAgCb,YAAhC,EAA8CD,UAA9C,EAA0DU,QAA1D,CAFH;AAGA,CARD;;AAUA;;;;;AAKAX,gBAAgBO,SAAhB,CAA0BM,sBAA1B,GAAmD,YAAW;AAC7D,MAAK,KAAKG,OAAL,OAAmB,WAAxB,EAAsC;AACrC,WAAO,KAAP;AACA;;AAED,SAAO,wBAAU,+BAAV,EAA4B,KAAKN,aAAL,EAA5B,CAAP;AACA,CAND;;AAQA;;;;;AAKAV,gBAAgBO,SAAhB,CAA0BO,sBAA1B,GAAmD,YAAW;AAC7D,SAAS,yDAAF,CAA6DG,IAA7D,CAAmE,KAAKP,aAAL,EAAnE;AAAP;AACA,CAFD;;AAIAV,gBAAgBO,SAAhB,CAA0BQ,yBAA1B;;kBAEef,e","file":"DutchParticiple.js","sourcesContent":["import { includes } from \"lodash-es\";\n\nimport Participle from \"../../../values/Participle.js\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException.js\";\nimport nonParticiples from \"./nonParticiples\";\nimport directPrecedenceException from \"../../../stringProcessing/directPrecedenceExceptionWithoutRegex\";\n\n/**\n * Creates an Participle object for the Dutch language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nconst DutchParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( DutchParticiple, Participle );\n\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nDutchParticiple.prototype.isPassive = function() {\n\tconst sentencePart = this.getSentencePart();\n\tconst participle = this.getParticiple();\n\tconst language = this.getLanguage();\n\n\treturn ! this.isOnNonParticiplesList() &&\n\t\t! this.hasNonParticipleEnding() &&\n\t\t! this.directPrecedenceException( sentencePart, participle, language );\n};\n\n/**\n * Checks whether a found participle is in the nonParticiples list.\n *\n * @returns {boolean} Returns true if it is in the nonParticiples list, otherwise returns false.\n */\nDutchParticiple.prototype.isOnNonParticiplesList = function() {\n\tif ( this.getType() === \"irregular\" ) {\n\t\treturn false;\n\t}\n\n\treturn includes( nonParticiples(), this.getParticiple() );\n};\n\n/**\n * Checks whether a found participle has a non-participle ending and is therefore not really a participle.\n *\n * @returns {boolean} Returns true if the participle has a non-participle ending, otherwise returns false.\n */\nDutchParticiple.prototype.hasNonParticipleEnding = function() {\n\treturn ( /\\S+(heid|teit|tijd)($|[ \\n\\r\\t.,'()\"+\\-;!?:/»«‹›<>])/ig ).test( this.getParticiple() );\n};\n\nDutchParticiple.prototype.directPrecedenceException = directPrecedenceException;\n\nexport default DutchParticiple;\n"]}