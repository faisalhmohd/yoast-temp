{"version":3,"sources":["../../../src/researches/metaDescriptionKeyword.js"],"names":["paper","researcher","description","getDescription","locale","getLocale","topicForms","getResearch","sentences","sentenceMatches","map","matchPerSentence","sentence","reduce","sum","count","replaceFoundKeywordForms","matchedKeywordForms","maxToRemove","forEach","keywordForm","matches","slice","replace","match","matchesKeyphrase","keyphraseForms","keywordForms","fullKeyphraseMatches","Math","min","fullSynonymsMatches","synonymsForms","synonymForms","fullSynonymMatches"],"mappings":";;;;;;kBAmEe,UAAUA,KAAV,EAAiBC,UAAjB,EAA8B;AAC5C,KAAMC,cAAcF,MAAMG,cAAN,EAApB;AACA,KAAMC,SAASJ,MAAMK,SAAN,EAAf;;AAEA,KAAMC,aAAaL,WAAWM,WAAX,CAAwB,YAAxB,CAAnB;;AAEA,KAAMC,YAAY,4BAAcN,WAAd,CAAlB;;AAEA,KAAMO,kBAAkBD,UAAUE,GAAV,CACvB;AAAA,SAAYC,iBAAkBC,QAAlB,EAA4BN,UAA5B,EAAwCF,MAAxC,CAAZ;AAAA,EADuB,CAAxB;;AAIA,QAAOK,gBAAgBI,MAAhB,CAAwB,UAAEC,GAAF,EAAOC,KAAP;AAAA,SAAkBD,MAAMC,KAAxB;AAAA,EAAxB,EAAuD,CAAvD,CAAP;AACA,C;;AAhFD;;;;AACA;;;;;;;;AAEA;;;;;;;;AAQA,IAAMC,2BAA2B,SAA3BA,wBAA2B,CAAUd,WAAV,EAAuBe,mBAAvB,EAA4CC,WAA5C,EAA0D;AAC1F;AACAD,qBAAoBE,OAApB,CAA6B;AAAA,SAC5BC,YAAYC,OAAZ,CAAoBC,KAApB,CAA2B,CAA3B,EAA8BJ,WAA9B,EAA4CC,OAA5C,CACC,iBAAS;AACRjB,iBAAcA,YAAYqB,OAAZ,CAAqBC,KAArB,EAA4B,EAA5B,CAAd;AACA,GAHF,CAD4B;AAAA,EAA7B;AAOA,QAAOtB,WAAP;AACA,CAVD;;AAYA;;;;;;;;;;AAUA,IAAMS,mBAAmB,SAAnBA,gBAAmB,CAAUC,QAAV,EAAoBN,UAApB,EAAgCF,MAAhC,EAAyC;AACjE;AACA,KAAMqB,mBAAmBnB,WAAWoB,cAAX,CAA0BhB,GAA1B,CAA+B;AAAA,SAAgB,kCAAYE,QAAZ,EAAsBe,YAAtB,EAAoCvB,MAApC,CAAhB;AAAA,EAA/B,CAAzB;;AAEA;AACA,KAAMwB,uBAAuBC,KAAKC,GAAL,gCAAaL,iBAAiBf,GAAjB,CAAsB;AAAA,SAASc,MAAMT,KAAf;AAAA,EAAtB,CAAb,EAA7B;;AAEA;AACAH,YAAWI,yBAA0BJ,QAA1B,EAAoCa,gBAApC,EAAsDG,oBAAtD,CAAX;;AAEA;AACA,KAAMG,sBAAsBzB,WAAW0B,aAAX,CAAyBtB,GAAzB,CAC3B,wBAAgB;AACf;AACA,MAAMW,UAAUY,aAAavB,GAAb,CAAkB;AAAA,UAAgB,kCAAYE,QAAZ,EAAsBe,YAAtB,EAAoCvB,MAApC,CAAhB;AAAA,GAAlB,CAAhB;AACA;AACA,MAAM8B,qBAAqBL,KAAKC,GAAL,gCAAaT,QAAQX,GAAR,CAAa;AAAA,UAASc,MAAMT,KAAf;AAAA,GAAb,CAAb,EAA3B;AACA;AACAH,aAAWI,yBAA0BJ,QAA1B,EAAoCa,gBAApC,EAAsDS,kBAAtD,CAAX;AACA,SAAOA,kBAAP;AACA,EAT0B,CAA5B;;AAYA,QAAO,CAAEN,oBAAF,4BAA2BG,mBAA3B,GAAiDlB,MAAjD,CAAyD,UAAEC,GAAF,EAAOC,KAAP;AAAA,SAAkBD,MAAMC,KAAxB;AAAA,EAAzD,EAAwF,CAAxF,CAAP;AACA,CAxBD;;AA0BA","file":"metaDescriptionKeyword.js","sourcesContent":["import matchWords from \"../stringProcessing/matchTextWithArray\";\nimport getSentences from \"../stringProcessing/getSentences\";\n\n/**\n * Replaces found keyword forms in the given description.\n *\n * @param {string} description the description to remove the matched keyword forms from.\n * @param {Object[]} matchedKeywordForms the matched keyword forms to remove from the description.\n * @param {Number} maxToRemove the maximum amount of matches of each individual keyword to remove.\n * @returns {string} the description with the keywords removed.\n */\nconst replaceFoundKeywordForms = function( description, matchedKeywordForms, maxToRemove ) {\n\t// Replace matches so we do not match them for synonyms.\n\tmatchedKeywordForms.forEach( keywordForm =>\n\t\tkeywordForm.matches.slice( 0, maxToRemove ).forEach(\n\t\t\tmatch => {\n\t\t\t\tdescription = description.replace( match, \"\" );\n\t\t\t}\n\t\t)\n\t);\n\treturn description;\n};\n\n/**\n * Counts the number of full keyphrase matches in the given sentence. Takes synonyms into account.\n *\n * A full keyphrase is when all keywords in the keyphrase match.\n *\n * @param {string} sentence the sentence that needs to be analyzed.\n * @param {Object} topicForms the keyphrase (and its optional synonyms') word forms.\n * @param {string} locale the current locale\n * @returns {Number} the number of matched keyphrases in the sentence.\n */\nconst matchPerSentence = function( sentence, topicForms, locale ) {\n\t// Focus keyphrase matches.\n\tconst matchesKeyphrase = topicForms.keyphraseForms.map( keywordForms => matchWords( sentence, keywordForms, locale ) );\n\n\t// Count the number of matches that contain every word in the entire keyphrase.\n\tconst fullKeyphraseMatches = Math.min( ...matchesKeyphrase.map( match => match.count ) );\n\n\t// Replace all full keyphrase matches so we do not match them for synonyms.\n\tsentence = replaceFoundKeywordForms( sentence, matchesKeyphrase, fullKeyphraseMatches );\n\n\t// Keyphrase synonyms matches.\n\tconst fullSynonymsMatches = topicForms.synonymsForms.map(\n\t\tsynonymForms => {\n\t\t\t// Synonym keyphrase matches.\n\t\t\tconst matches = synonymForms.map( keywordForms => matchWords( sentence, keywordForms, locale ) );\n\t\t\t// Count the number of matches that contain every word in the entire synonym keyphrase.\n\t\t\tconst fullSynonymMatches = Math.min( ...matches.map( match => match.count ) );\n\t\t\t// Replace all full matches so we do not match them for other synonyms.\n\t\t\tsentence = replaceFoundKeywordForms( sentence, matchesKeyphrase, fullSynonymMatches );\n\t\t\treturn fullSynonymMatches;\n\t\t}\n\t);\n\n\treturn [ fullKeyphraseMatches, ...fullSynonymsMatches ].reduce( ( sum, count ) => sum + count, 0 );\n};\n\n/**\n * Counts the number of full keyphrase matches in the description.\n * Returns -1 if no description is specified in the given paper.\n *\n * @param {Paper} paper The paper object containing the description.\n * @param {Researcher} researcher the researcher object to gather researchers from.\n * @returns {Number} The number of keyphrase matches for the entire description.\n */\nexport default function( paper, researcher ) {\n\tconst description = paper.getDescription();\n\tconst locale = paper.getLocale();\n\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\n\tconst sentences = getSentences( description );\n\n\tconst sentenceMatches = sentences.map(\n\t\tsentence => matchPerSentence( sentence, topicForms, locale )\n\t);\n\n\treturn sentenceMatches.reduce( ( sum, count ) => sum + count, 0 );\n}\n\n"]}