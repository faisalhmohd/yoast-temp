{"version":3,"sources":["../../../../../src/researches/german/passiveVoice/determinePassives.js"],"names":["sentencePartText","auxiliaries","language","passive","auxiliaryMatches","match","auxiliaryRegex","participles","require","allAuxiliaries"],"mappings":";;;;;;kBAgBe,UAAUA,gBAAV,EAA4BC,WAA5B,EAAyCC,QAAzC,EAAoD;AAClE,MAAIC,UAAU,KAAd;AACA,MAAIC,mBAAmBJ,iBAAiBK,KAAjB,CAAwBC,cAAxB,CAAvB;AACA,MAAKF,qBAAqB,IAA1B,EAAiC;AAChC,WAAOD,OAAP;AACA;AACD,MAAII,cAAc,8BAAgBP,gBAAhB,EAAkCC,WAAlC,EAA+CC,QAA/C,CAAlB;AACA,SAAO,8CAAgCK,WAAhC,CAAP;AACA,C;;AAxBD;;;;AAEA;;;;AACA;;;;;;AAFA,IAAIN,cAAcO,QAAS,kBAAT,IAAgCC,cAAlD;;;AAIA,IAAIH,iBAAiB,oCAAcL,WAAd,CAArB;;AAEA","file":"determinePassives.js","sourcesContent":["import arrayToRegex from \"../../../stringProcessing/createRegexFromArray.js\";\nvar auxiliaries = require( \"./auxiliaries.js\" )().allAuxiliaries;\nimport getParticiples from \"./getParticiples.js\";\nimport determineSentencePartIsPassive from \"../../passiveVoice/periphrastic/determineSentencePartIsPassive.js\";\n\nvar auxiliaryRegex = arrayToRegex( auxiliaries );\n\n/**\n * Determines whether a sentence part is passive.\n *\n * @param {string} sentencePartText The sentence part to determine voice for.\n * @param {Array} auxiliaries A list with auxiliaries in this sentence part.\n * @param {string} language The language of the sentence part.\n\n * @returns {boolean} Returns true if passive, otherwise returns false.\n */\nexport default function( sentencePartText, auxiliaries, language ) {\n\tvar passive = false;\n\tvar auxiliaryMatches = sentencePartText.match( auxiliaryRegex );\n\tif ( auxiliaryMatches === null ) {\n\t\treturn passive;\n\t}\n\tvar participles = getParticiples( sentencePartText, auxiliaries, language );\n\treturn determineSentencePartIsPassive( participles );\n}\n"]}