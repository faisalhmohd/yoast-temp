{"version":3,"sources":["../../../src/researches/topicCount.js"],"names":["paper","onlyKeyword","keyword","getKeyword","synonyms","getSynonyms","text","getText","sentences","topicWords","concat","filter","Boolean","sort","a","b","length","count","matches","markings","matchesIndices","topicFound","topicFoundInSentence","indexOfSentence","indexRunningThroughSentence","forEach","sentence","getLocale","occurrence","indexOfOccurrenceInSentence","indexOf","push","index","match","original","marked","replace","x"],"mappings":";;;;;;kBAoBe,UAAUA,KAAV,EAAuC;AAAA,KAAtBC,WAAsB,uEAAR,KAAQ;;AACrD,KAAMC,UAAUF,MAAMG,UAAN,EAAhB;AACA,KAAMC,WAAW,6BAAeJ,MAAMK,WAAN,EAAf,CAAjB;AACA,KAAMC,OAAO,uBAAiBN,MAAMO,OAAN,EAAjB,CAAb;AACA,KAAMC,YAAY,4BAAcF,IAAd,CAAlB;AACA,KAAIG,aAAa,EAAjB;;AAEA,KAAKR,gBAAgB,IAArB,EAA4B;AAC3BQ,eAAaA,WAAWC,MAAX,CAAmBR,OAAnB,CAAb;AACA,EAFD,MAEO;AACNO,eAAaA,WAAWC,MAAX,CAAmBR,OAAnB,EAA4BE,QAA5B,EAAuCO,MAAvC,CAA+CC,OAA/C,CAAb;AACAH,aAAWI,IAAX,CAAiB,UAAEC,CAAF,EAAKC,CAAL;AAAA,UAAYA,EAAEC,MAAF,GAAWF,EAAEE,MAAzB;AAAA,GAAjB;AACA;;AAED,KAAK,uBAASP,UAAT,CAAL,EAA6B;AAC5B,SAAO;AACNQ,UAAO,CADD;AAENC,YAAS,EAFH;AAGNC,aAAU,EAHJ;AAINC,mBAAgB;AAJV,GAAP;AAMA;;AAED,KAAIC,aAAa,EAAjB;AACA,KAAIC,uBAAuB,EAA3B;AACA,KAAIH,WAAW,EAAf;AACA,KAAII,kBAAkB,CAAtB;AACA,KAAIC,8BAA8B,CAAlC;AACA,KAAMJ,iBAAiB,EAAvB;;AAEAZ,WAAUiB,OAAV,CAAmB,UAAUC,QAAV,EAAqB;AACvCJ,yBAAuB,kCAAoBI,QAApB,EAA8BjB,UAA9B,EAA0CT,MAAM2B,SAAN,EAA1C,EAA8DT,OAArF;AACA,MAAKI,qBAAqBN,MAArB,GAA8B,CAAnC,EAAuC;AACtCM,wBAAqBG,OAArB,CAA8B,UAAUG,UAAV,EAAuB;AACpD,QAAMC,8BAA8BH,SAASI,OAAT,CAAkBF,UAAlB,EAA8BJ,2BAA9B,CAApC;AACAJ,mBAAeW,IAAf,CACC;AACCC,YAAOH,8BAA8BN,eADtC;AAECU,YAAOL;AAFR,KADD;AAMAJ,mCAA+BK,8BAA8BD,WAAWZ,MAAxE;AACA,IATD;;AAWAG,cAAWA,SAAST,MAAT,CAAiB,mBAAU;AACrCwB,cAAUR,QAD2B;AAErCS,YAAQT,SAASU,OAAT,CAAkB,oCAAcd,oBAAd,CAAlB,EAAyD,UAAUe,CAAV,EAAc;AAC9E,YAAO,iCAASA,CAAT,CAAP;AACA,KAFO;AAF6B,IAAV,CAAjB,CAAX;AAMA;;AAEDhB,eAAaA,WAAWX,MAAX,CAAmBY,oBAAnB,CAAb;AACAC,qBAAmBG,SAASV,MAAT,GAAkB,CAArC;AACA,EAxBD;;AA0BA,QAAO;AACNC,SAAOI,WAAWL,MADZ;AAENE,WAAS,oBAAQG,UAAR,EAAqBR,IAArB,CAA2B,UAAEC,CAAF,EAAKC,CAAL;AAAA,UAAYA,EAAEC,MAAF,GAAWF,EAAEE,MAAzB;AAAA,GAA3B,CAFH;AAGNG,YAAUA,QAHJ;AAINC,kBAAgBA;AAJV,EAAP;AAMA,C;;AAjFD;;;;AAEA;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA","file":"topicCount.js","sourcesContent":["/** @module analyses/getTopicCount */\nimport matchTextWithArray from \"../stringProcessing/matchTextWithArray.js\";\n\nimport { normalize as normalizeQuotes } from \"../stringProcessing/quotes.js\";\nimport parseSynonyms from \"../stringProcessing/parseSynonyms\";\nimport { uniq as unique } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\nimport getSentences from \"../stringProcessing/getSentences\";\nimport arrayToRegex from \"../stringProcessing/createRegexFromArray\";\nimport addMark from \"../markers/addMarkSingleWord\";\nimport Mark from \"../values/Mark.js\";\n\n/**\n * Calculates the topic count, i.e., how many times the keyword or its synonyms were encountered in the text.\n *\n * @param {Object}  paper                   The paper containing keyword, text and potentially synonyms.\n * @param {boolean} [onlyKeyword=false]     Whether to only use the keyword for the count.\n *\n * @returns {number} The keyword count.\n */\nexport default function( paper, onlyKeyword = false ) {\n\tconst keyword = paper.getKeyword();\n\tconst synonyms = parseSynonyms( paper.getSynonyms() );\n\tconst text = normalizeQuotes( paper.getText() );\n\tconst sentences = getSentences( text );\n\tlet topicWords = [];\n\n\tif ( onlyKeyword === true ) {\n\t\ttopicWords = topicWords.concat( keyword );\n\t} else {\n\t\ttopicWords = topicWords.concat( keyword, synonyms ).filter( Boolean );\n\t\ttopicWords.sort( ( a, b ) => b.length - a.length );\n\t}\n\n\tif ( isEmpty( topicWords ) ) {\n\t\treturn {\n\t\t\tcount: 0,\n\t\t\tmatches: [],\n\t\t\tmarkings: [],\n\t\t\tmatchesIndices: [],\n\t\t};\n\t}\n\n\tlet topicFound = [];\n\tlet topicFoundInSentence = [];\n\tlet markings = [];\n\tlet indexOfSentence = 0;\n\tlet indexRunningThroughSentence = 0;\n\tconst matchesIndices = [];\n\n\tsentences.forEach( function( sentence ) {\n\t\ttopicFoundInSentence = matchTextWithArray( sentence, topicWords, paper.getLocale() ).matches;\n\t\tif ( topicFoundInSentence.length > 0 ) {\n\t\t\ttopicFoundInSentence.forEach( function( occurrence ) {\n\t\t\t\tconst indexOfOccurrenceInSentence = sentence.indexOf( occurrence, indexRunningThroughSentence );\n\t\t\t\tmatchesIndices.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tindex: indexOfOccurrenceInSentence + indexOfSentence,\n\t\t\t\t\t\tmatch: occurrence,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tindexRunningThroughSentence += indexOfOccurrenceInSentence + occurrence.length;\n\t\t\t} );\n\n\t\t\tmarkings = markings.concat( new Mark( {\n\t\t\t\toriginal: sentence,\n\t\t\t\tmarked: sentence.replace( arrayToRegex( topicFoundInSentence ),  function( x ) {\n\t\t\t\t\treturn addMark( x );\n\t\t\t\t} ),\n\t\t\t} ) );\n\t\t}\n\n\t\ttopicFound = topicFound.concat( topicFoundInSentence );\n\t\tindexOfSentence += sentence.length + 1;\n\t} );\n\n\treturn {\n\t\tcount: topicFound.length,\n\t\tmatches: unique( topicFound ).sort( ( a, b ) => b.length - a.length ),\n\t\tmarkings: markings,\n\t\tmatchesIndices: matchesIndices,\n\t};\n}\n\n\n"]}