{"version":3,"sources":["../../../src/researches/getPassiveVoice.js"],"names":["paper","text","getText","locale","getLocale","language","sentences","map","sentence","totalNumberSentences","length","morphologicalLanguages","includes","total","passives","getMorphologicalPassives","passiveSentences","periphrasticLanguages","getPeriphrasticPassives","strippedSentence","getSentenceText","toLocaleLowerCase","setPassive","isPassive","push","sentenceParts","passive","sentencePart","getSentencePartText","getAuxiliaries"],"mappings":";;;;;;kBAqFe,UAAUA,KAAV,EAAkB;AAChC,KAAMC,OAAOD,MAAME,OAAN,EAAb;AACA,KAAMC,SAASH,MAAMI,SAAN,EAAf;AACA,KAAMC,WAAW,2BAAaF,MAAb,CAAjB;AACA,KAAMG,YAAY,4BAAcL,IAAd,EAChBM,GADgB,CACX,UAAUC,QAAV,EAAqB;AAC1B,SAAO,uBAAcA,QAAd,CAAP;AACA,EAHgB,CAAlB;AAIA,KAAMC,uBAAuBH,UAAUI,MAAvC;;AAEA,KAAKC,uBAAuBC,QAAvB,CAAiCP,QAAjC,CAAL,EAAmD;AAClD,SAAO;AACNQ,UAAOJ,oBADD;AAENK,aAAUC,yBAA0BT,SAA1B,EAAqCD,QAArC,EAAgDW;AAFpD,GAAP;AAIA;AACD,KAAKC,sBAAsBL,QAAtB,CAAgCP,QAAhC,CAAL,EAAkD;AACjD,SAAO;AACNQ,UAAOJ,oBADD;AAENK,aAAUI,wBAAyBZ,SAAzB,EAAoCD,QAApC,EAA+CW;AAFnD,GAAP;AAIA;AACD,C;;AA3GD;;;;AACA;;AACA;;;;AACA;;;;AAEA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAML,yBAAyB,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,CAA/B;AACA,IAAMM,wBAAwB,CAAE,IAAF,EAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,EAA4C,IAA5C,EAAkD,IAAlD,CAA9B;;AAEA;;;;AAIA;;;;;;;AAOA,IAAMF,2BAA2B,SAA3BA,wBAA2B,CAAUT,SAAV,EAAqBD,QAArB,EAAgC;AAChE,KAAMW,mBAAmB,EAAzB;;AAEA,wBAASV,SAAT,EAAoB,UAAUE,QAAV,EAAqB;AACxC,MAAMW,mBAAmB,kCAAeX,SAASY,eAAT,EAAf,EAA4CC,iBAA5C,EAAzB;;AAEAb,WAASc,UAAT,CAAqB,wCAAmBH,gBAAnB,EAAqCd,QAArC,CAArB;;AAEA,MAAKG,SAASe,SAAT,OAAyB,IAA9B,EAAqC;AACpCP,oBAAiBQ,IAAjB,CAAuBhB,SAASY,eAAT,EAAvB;AACA;AACD,EARD;AASA,QAAO;AACNJ;AADM,EAAP;AAGA,CAfD;;AAiBA;;;;;;;AAOA,IAAME,0BAA0B,SAA1BA,uBAA0B,CAAUZ,SAAV,EAAqBD,QAArB,EAAgC;AAC/D,KAAMW,mBAAmB,EAAzB;;AAEA,wBAASV,SAAT,EAAoB,UAAUE,QAAV,EAAqB;AACxC,MAAMW,mBAAmB,kCAAeX,SAASY,eAAT,EAAf,EAA4CC,iBAA5C,EAAzB;;AAEA;AACA,MAAII,gBAAgB,EAApB;;AAEA,MAAKpB,aAAa,IAAb,IAAqBA,aAAa,IAAlC,IAA0CA,aAAa,IAA5D,EAAmE;AAClEoB,mBAAgB,gDAA8CN,gBAA9C,EAAgEd,QAAhE,CAAhB;AACA,GAFD,MAEO;AACNoB,mBAAgB,gCAAqCN,gBAArC,EAAuDd,QAAvD,CAAhB;AACA;;AAED,MAAIqB,UAAU,KAAd;AACA,yBAASD,aAAT,EAAwB,UAAUE,YAAV,EAAyB;AAChDA,gBAAaL,UAAb,CAAyB,4CAAuBK,aAAaC,mBAAb,EAAvB,EAA2DD,aAAaE,cAAb,EAA3D,EAA0FxB,QAA1F,CAAzB;AACAqB,aAAUA,WAAWC,aAAaJ,SAAb,EAArB;AACA,GAHD;AAIA,MAAKG,OAAL,EAAe;AACdV,oBAAiBQ,IAAjB,CAAuBhB,SAASY,eAAT,EAAvB;AACA;AACD,EApBD;AAqBA,QAAO;AACNJ;AADM,EAAP;AAGA,CA3BD;;AA6BA","file":"getPassiveVoice.js","sourcesContent":["import getSentences from \"../stringProcessing/getSentences.js\";\nimport { stripFullTags as stripHTMLTags } from \"../stringProcessing/stripHTMLTags.js\";\nimport getLanguage from \"../helpers/getLanguage.js\";\nimport Sentence from \"../values/Sentence.js\";\n\nimport { forEach } from \"lodash-es\";\n\nimport isPassiveSentencePart from \"./passiveVoice/periphrastic/determinePassiveSentencePart.js\";\nimport isPassiveSentence from \"./passiveVoice/morphological/determinePassiveSentence.js\";\nimport getPeriphrasticSentencePartsDefault from \"./passiveVoice/periphrastic/getSentenceParts.js\";\nimport getPeriphrasticSentencePartsSplitOnStopwords from \"./passiveVoice/periphrastic/getSentencePartsSplitOnStopwords.js\";\n\nconst morphologicalLanguages = [ \"ru\", \"tr\", \"sv\" ];\nconst periphrasticLanguages = [ \"en\", \"de\", \"nl\", \"fr\", \"es\", \"it\", \"pt\", \"cn\", \"pl\" ];\n\n/* Languages that employ both morphological and periphrastic passive voice marking have not been implemented yet.\n * const morphologicalAndPeriphrasticLanguages = [ \"da\", \"nb\" ];\n */\n\n/**\n * Looks for morphological passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getMorphologicalPassives = function( sentences, language ) {\n\tconst passiveSentences = [];\n\n\tforEach( sentences, function( sentence ) {\n\t\tconst strippedSentence = stripHTMLTags( sentence.getSentenceText() ).toLocaleLowerCase();\n\n\t\tsentence.setPassive( isPassiveSentence( strippedSentence, language ) );\n\n\t\tif ( sentence.isPassive() === true ) {\n\t\t\tpassiveSentences.push( sentence.getSentenceText() );\n\t\t}\n\t} );\n\treturn {\n\t\tpassiveSentences,\n\t};\n};\n\n/**\n * Looks for periphrastic passive voice.\n *\n * @param {Array} sentences Sentences extracted from the text.\n * @param {string} language Language of the text.\n * @returns {Object} The found passive sentences.\n */\nconst getPeriphrasticPassives = function( sentences, language ) {\n\tconst passiveSentences = [];\n\n\tforEach( sentences, function( sentence ) {\n\t\tconst strippedSentence = stripHTMLTags( sentence.getSentenceText() ).toLocaleLowerCase();\n\n\t\t// The functionality based on sentencePart objects should be rewritten using array indices of stopwords and auxiliaries.\n\t\tlet sentenceParts = [];\n\n\t\tif ( language === \"de\" || language === \"nl\" || language === \"pl\" ) {\n\t\t\tsentenceParts = getPeriphrasticSentencePartsSplitOnStopwords( strippedSentence, language );\n\t\t} else {\n\t\t\tsentenceParts = getPeriphrasticSentencePartsDefault( strippedSentence, language );\n\t\t}\n\n\t\tlet passive = false;\n\t\tforEach( sentenceParts, function( sentencePart ) {\n\t\t\tsentencePart.setPassive( isPassiveSentencePart( sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), language ) );\n\t\t\tpassive = passive || sentencePart.isPassive();\n\t\t} );\n\t\tif ( passive ) {\n\t\t\tpassiveSentences.push( sentence.getSentenceText() );\n\t\t}\n\t} );\n\treturn {\n\t\tpassiveSentences,\n\t};\n};\n\n/**\n * Determines the number of passive sentences in the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {Object} The total number of sentences in the text and the found passive sentences.\n */\nexport default function( paper ) {\n\tconst text = paper.getText();\n\tconst locale = paper.getLocale();\n\tconst language = getLanguage( locale );\n\tconst sentences = getSentences( text )\n\t\t.map( function( sentence ) {\n\t\t\treturn new Sentence( sentence );\n\t\t} );\n\tconst totalNumberSentences = sentences.length;\n\n\tif ( morphologicalLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getMorphologicalPassives( sentences, language ).passiveSentences,\n\t\t};\n\t}\n\tif ( periphrasticLanguages.includes( language ) ) {\n\t\treturn {\n\t\t\ttotal: totalNumberSentences,\n\t\t\tpassives: getPeriphrasticPassives( sentences, language ).passiveSentences,\n\t\t};\n\t}\n}\n"]}