{"version":3,"sources":["../../../src/researches/findKeywordInPageTitle.js"],"names":["paper","researcher","keyword","getKeyword","title","getTitle","locale","getLocale","result","exactMatchFound","allWordsFound","position","exactMatchKeyphrase","exactMatchRequest","processExactMatchRequest","exactMatchRequested","keywordMatched","count","adjustPosition","topicForms","getResearch","useSynonyms","separateWordsMatched","percentWordMatches","getFunctionWords","stripFunctionWordsFromStart","functionWords","str","toLocaleLowerCase","titleWords","word","trim","doubleQuotes","length","substring","process","env","YOAST_RECALIBRATION","language","all","titleBeforeKeyword","substr"],"mappings":"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","file":"findKeywordInPageTitle.js","sourcesContent":["/** @module analyses/findKeywordInPageTitle */\n\nimport wordMatch from \"../stringProcessing/matchTextWithWord.js\";\nimport { findTopicFormsInString } from \"./findKeywordFormsInString.js\";\n\nimport getFunctionWordsFactory from \"../helpers/getFunctionWords\";\n\nimport { escapeRegExp, filter, get, includes, isEmpty, isUndefined } from \"lodash-es\";\nimport getLanguage from \"../helpers/getLanguage\";\nimport getWords from \"../stringProcessing/getWords\";\n\nconst getFunctionWords = getFunctionWordsFactory();\n\n/**\n * Strips all function words from the start of the given string.\n *\n * @param {string[]} functionWords The array of function words to strip from the start.\n * @param {string} str The string from which to strip the function words.\n *\n * @returns {boolean} Whether the string consists of function words only.\n */\nconst stripFunctionWordsFromStart = function( functionWords, str ) {\n\tstr = str.toLocaleLowerCase();\n\tlet titleWords = getWords( str.toLocaleLowerCase() );\n\n\t// Strip all function words from the start of the string.\n\ttitleWords = filter( titleWords, function( word ) {\n\t\treturn ( ! includes( functionWords, word.trim().toLocaleLowerCase() ) );\n\t} );\n\n\treturn isEmpty( titleWords );\n};\n\n/**\n * Checks if exact match functionality is requested by enclosing the keyphrase in double quotation marks.\n *\n * @param {string} keyword The keyword to check.\n *\n * @returns {Object} Whether the exact match funcionality is requested and the keyword stripped from double quotes.\n */\nconst processExactMatchRequest = function( keyword ) {\n\tconst exactMatchRequest = { exactMatchRequested: false, keyword: keyword };\n\n\t// Check if morphology is suppressed. If so, strip the quotation marks from the keyphrase.\n\tconst doubleQuotes = [ \"“\", \"”\", \"〝\", \"〞\", \"〟\", \"‟\", \"„\", \"\\\"\" ];\n\tif ( includes( doubleQuotes, keyword[ 0 ] ) && includes( doubleQuotes, keyword[ keyword.length - 1 ] ) ) {\n\t\texactMatchRequest.keyword = keyword.substring( 1, keyword.length - 1 );\n\t\texactMatchRequest.exactMatchRequested = true;\n\t}\n\n\treturn exactMatchRequest;\n};\n\n/**\n * Checks whether an exact match of the keyphrase is found in the title.\n *\n * @param {string} title The title of the paper.\n * @param {number} position The position of the keyphrase in the title.\n * @param {string} locale The locale of the paper.\n *\n * @returns {number} Potentially adjusted position of the keyphrase in the title.\n */\nconst adjustPosition = function( title, position, locale ) {\n\t// Don't do anything if position if already 0.\n\tif ( position === 0 ) {\n\t\treturn position;\n\t}\n\n\t// Don't do anything for non-recalibration.\n\tif ( ! ( process.env.YOAST_RECALIBRATION === \"enabled\" ) ) {\n\t\treturn position;\n\t}\n\n\t// Don't do anything if no function words exist for this locale.\n\tconst language = getLanguage( locale );\n\tconst functionWords = get( getFunctionWords, [ language ], [] );\n\tif ( isUndefined( functionWords.all ) ) {\n\t\treturn position;\n\t}\n\n\t// Strip all function words from the beginning of the title.\n\tconst titleBeforeKeyword = title.substr( 0, position );\n\tif ( stripFunctionWordsFromStart( functionWords.all, titleBeforeKeyword ) ) {\n\t\t/*\n\t\t * Return position 0 if there are no words left in the title before the keyword after filtering\n\t\t * the function words (such that \"keyword\" in \"the keyword\" is still counted as position 0).\n \t\t */\n\t\treturn 0;\n\t}\n\n\treturn position;\n};\n\n\n/**\n * Counts the occurrences of the keyword in the page title. Returns the result that contains information on\n * (1) whether the exact match of the keyphrase was used in the title,\n * (2) whether all (content) words from the keyphrase were found in the title,\n * (3) at which position the exact match was found in the title.\n *\n * @param {Object} paper The paper containing title and keyword.\n * @param {Researcher} researcher The researcher to use for analysis.\n *\n * @returns {Object} result with the information on whether the keyphrase was matched in the title and how.\n */\nexport default function( paper, researcher ) {\n\tlet keyword = escapeRegExp( paper.getKeyword() );\n\tconst title = paper.getTitle();\n\tconst locale = paper.getLocale();\n\n\tconst result = { exactMatchFound: false, allWordsFound: false, position: -1, exactMatchKeyphrase: false  };\n\n\t// Check if the keyphrase is enclosed in double quotation marks to ensure that only exact matches are processed.\n\tconst exactMatchRequest = processExactMatchRequest( keyword );\n\tif ( exactMatchRequest.exactMatchRequested ) {\n\t\tkeyword = exactMatchRequest.keyword;\n\t\tresult.exactMatchKeyphrase = true;\n\t}\n\n\t// Check if the exact match of the keyphrase found in the title.\n\tconst keywordMatched = wordMatch( title, keyword, locale );\n\n\tif ( keywordMatched.count > 0 ) {\n\t\tresult.exactMatchFound = true;\n\t\tresult.allWordsFound = true;\n\t\tresult.position = adjustPosition( title, keywordMatched.position, locale );\n\n\t\treturn result;\n\t}\n\n\t// Check 2: Are all content words from the keyphrase in the title?\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\n\t// Use only keyphrase ( not the synonyms) to match topic words in the title.\n\tconst useSynonyms = false;\n\n\tconst separateWordsMatched = findTopicFormsInString( topicForms, title, useSynonyms, locale );\n\n\tif ( separateWordsMatched.percentWordMatches === 100 ) {\n\t\tresult.allWordsFound = true;\n\t}\n\n\treturn result;\n}\n"]}