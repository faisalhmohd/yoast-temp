{"version":3,"sources":["../../../src/researches/getLinkStatistics.js"],"names":["linkToSelf","anchor","permalink","anchorLink","getFromAnchorTag","areEqual","filterAnchorsLinkingToSelf","anchors","anchorsLinkingToSelf","map","filter","index","filterAnchorsContainingTopic","topicForms","locale","anchorsContainingKeyphraseOrSynonyms","filterAnchorsContainedInTopic","keyphraseAndSynonyms","morphologyData","anchorsContainedInTopic","forEach","currentAnchor","linkTextForms","j","length","topic","percentWordMatches","push","keywordInAnchor","paper","researcher","result","totalKeyword","matchedAnchors","keyword","getKeyword","getLocale","getResearch","synonyms","getSynonyms","concat","getData","countLinkTypes","getText","getPermalink","linkCount","total","totalNaKeyword","internalTotal","internalDofollow","internalNofollow","externalTotal","externalDofollow","externalNofollow","otherTotal","otherDofollow","otherNofollow","i","linkType","linkFollow","keywordInAnchors"],"mappings":"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","file":"getLinkStatistics.js","sourcesContent":["/** @module analyses/getLinkStatistics */\n\nimport getAnchors from \"../stringProcessing/getAnchorsFromText.js\";\nimport findKeywordInUrl from \"../stringProcessing/findKeywordInUrl.js\";\nimport getLinkType from \"../stringProcessing/getLinkType.js\";\nimport checkNofollow from \"../stringProcessing/checkNofollow.js\";\nimport urlHelper from \"../stringProcessing/url.js\";\nimport parseSynonyms from \"../stringProcessing/parseSynonyms\";\nimport { buildForms } from \"./buildKeywordForms\";\nimport getLanguage from \"../helpers/getLanguage\";\n\nimport { flatten } from \"lodash-es\";\nimport { findWordFormsInString } from \"./findKeywordFormsInString\";\n\n\n/**\n * Checks whether the link is pointing at itself.\n * @param {string} anchor The link anchor.\n * @param {string} permalink The permalink of the paper.\n *\n * @returns {boolean} Whether the anchor is pointing at itself.\n */\nconst linkToSelf = function( anchor, permalink ) {\n\tconst anchorLink = urlHelper.getFromAnchorTag( anchor );\n\n\treturn urlHelper.areEqual( anchorLink, permalink );\n};\n\n/**\n * Filters anchors that are not pointing at itself.\n * @param {Array} anchors An array with all anchors from the paper\n * @param {string} permalink The permalink of the paper.\n *\n * @returns {Array} The array of all anchors that are not pointing at the paper itself.\n */\nconst filterAnchorsLinkingToSelf = function( anchors, permalink ) {\n\tconst anchorsLinkingToSelf = anchors.map( function( anchor ) {\n\t\treturn linkToSelf( anchor, permalink );\n\t} );\n\n\tanchors = anchors.filter( function( anchor, index ) {\n\t\treturn anchorsLinkingToSelf[ index ] === false;\n\t} );\n\n\treturn anchors;\n};\n\n/**\n * Filters anchors that contain keyphrase or synonyms.\n * @param {Array} anchors An array with all anchors from the paper\n * @param {Object} topicForms The object with topicForms.\n * @param {string} locale The locale of the paper\n *\n * @returns {Array} The array of all anchors that contain keyphrase or synonyms.\n */\nconst filterAnchorsContainingTopic = function( anchors, topicForms, locale ) {\n\tconst anchorsContainingKeyphraseOrSynonyms = anchors.map( function( anchor ) {\n\t\treturn findKeywordInUrl( anchor, topicForms, locale );\n\t} );\n\tanchors = anchors.filter( function( anchor, index ) {\n\t\treturn anchorsContainingKeyphraseOrSynonyms[ index ] === true;\n\t} );\n\n\treturn anchors;\n};\n\n/**\n * Filters anchors that are contained within keyphrase or synonyms.\n * @param {Array} anchors An array with all anchors from the paper.\n * @param {Array} keyphraseAndSynonyms An array with keyphrase and its synonyms.\n * @param {string} locale The locale of the paper.\n * @param {Object} morphologyData The morphology data (regexes and exception lists) available for the language.\n *\n * @returns {Array} The array of all anchors that contain keyphrase or synonyms.\n */\nconst filterAnchorsContainedInTopic = function( anchors, keyphraseAndSynonyms, locale, morphologyData ) {\n\tconst anchorsContainedInTopic = [];\n\n\tanchors.forEach( function( currentAnchor ) {\n\t\t// Generate the forms of the content words from within the anchor.\n\t\tconst linkTextForms = buildForms( currentAnchor, getLanguage( locale ), morphologyData );\n\n\t\tfor ( let j = 0; j < keyphraseAndSynonyms.length; j++ ) {\n\t\t\tconst topic = keyphraseAndSynonyms[ j ];\n\t\t\tif ( findWordFormsInString( linkTextForms, topic, locale ).percentWordMatches === 100 ) {\n\t\t\t\tanchorsContainedInTopic.push( true );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} );\n\n\tanchors = anchors.filter( function( anchor, index ) {\n\t\treturn anchorsContainedInTopic[ index ] === true;\n\t} );\n\n\treturn anchors;\n};\n\n\n/**\n * Checks whether or not an anchor contains the passed keyword.\n * @param {Paper} paper The paper to research.\n * @param {Researcher} researcher The researcher to use.\n * @param {Array} anchors The array of anchors of the links found in the paper.\n * @param {string} permalink The string with a permalink of the paper.\n *\n * @returns {Object} How many anchors contained the keyphrase or synonyms, what are these anchors\n */\nconst keywordInAnchor = function( paper, researcher, anchors, permalink ) {\n\tconst result = { totalKeyword: 0, matchedAnchors: [] };\n\n\tconst keyword = paper.getKeyword();\n\n\t// If no keyword is set, return empty result.\n\tif ( keyword === \"\" ) {\n\t\treturn result;\n\t}\n\n\t// Filter out anchors that point at the paper itself.\n\tanchors = filterAnchorsLinkingToSelf( anchors, permalink );\n\tif ( anchors.length === 0 ) {\n\t\treturn result;\n\t}\n\n\tconst locale = paper.getLocale();\n\tconst topicForms = researcher.getResearch( \"morphology\" );\n\n\t// Check if any anchors contain keyphrase or synonyms in them.\n\tanchors = filterAnchorsContainingTopic( anchors, topicForms, locale );\n\tif ( anchors.length === 0 ) {\n\t\treturn result;\n\t}\n\n\t// Check if content words from the anchors are all within the keyphrase or the synonyms.\n\tconst synonyms = paper.getSynonyms();\n\tconst keyphraseAndSynonyms = flatten( [].concat( keyword, parseSynonyms( synonyms ) ) );\n\n\tconst morphologyData = researcher.getData( \"morphology\" )[ getLanguage( locale ) ] || false;\n\n\tanchors = filterAnchorsContainedInTopic( anchors, keyphraseAndSynonyms, locale, morphologyData );\n\tresult.totalKeyword = anchors.length;\n\tresult.matchedAnchors = anchors;\n\n\treturn result;\n};\n\n/**\n * Counts the links found in the text.\n *\n * @param {Paper} paper The paper object containing text, keyword and url.\n * @param {Researcher} researcher The researcher to use for the paper.\n *\n * @returns {object} The object containing all linktypes.\n * total: the total number of links found.\n * totalNaKeyword: the total number of links if keyword is not available.\n * keyword: Object containing all the keyword related counts and matches.\n * keyword.totalKeyword: the total number of links with the keyword.\n * keyword.matchedAnchors: Array with the anchors that contain the keyword.\n * internalTotal: the total number of links that are internal.\n * internalDofollow: the internal links without a nofollow attribute.\n * internalNofollow: the internal links with a nofollow attribute.\n * externalTotal: the total number of links that are external.\n * externalDofollow: the external links without a nofollow attribute.\n * externalNofollow: the internal links with a dofollow attribute.\n * otherTotal: all links that are not HTTP or HTTPS.\n * otherDofollow: other links without a nofollow attribute.\n * otherNofollow: other links with a nofollow attribute.\n */\nconst countLinkTypes = function( paper, researcher ) {\n\tconst anchors = getAnchors( paper.getText() );\n\tconst permalink = paper.getPermalink();\n\n\tconst linkCount = {\n\t\ttotal: anchors.length,\n\t\ttotalNaKeyword: 0,\n\t\tkeyword: {\n\t\t\ttotalKeyword: 0,\n\t\t\tmatchedAnchors: [],\n\t\t},\n\t\tinternalTotal: 0,\n\t\tinternalDofollow: 0,\n\t\tinternalNofollow: 0,\n\t\texternalTotal: 0,\n\t\texternalDofollow: 0,\n\t\texternalNofollow: 0,\n\t\totherTotal: 0,\n\t\totherDofollow: 0,\n\t\totherNofollow: 0,\n\t};\n\n\tfor ( let i = 0; i < anchors.length; i++ ) {\n\t\tconst currentAnchor = anchors[ i ];\n\n\t\tconst linkType = getLinkType( currentAnchor, permalink );\n\t\tconst linkFollow = checkNofollow( currentAnchor );\n\n\t\tlinkCount[ linkType + \"Total\" ]++;\n\t\tlinkCount[ linkType + linkFollow ]++;\n\t}\n\n\tconst keywordInAnchors = keywordInAnchor( paper, researcher, anchors, permalink );\n\tlinkCount.keyword.totalKeyword = keywordInAnchors.totalKeyword;\n\tlinkCount.keyword.matchedAnchors = keywordInAnchors.matchedAnchors;\n\n\treturn linkCount;\n};\n\nexport default countLinkTypes;\n"]}