{"version":3,"sources":["../../../../../src/researches/polish/passiveVoice/PolishParticiple.js"],"names":["PolishParticiple","participle","sentencePart","attributes","call","require","inherits","prototype","isPassive","getSentencePart","getParticiple","auxiliaries","getAuxiliaries","language","getLanguage","directPrecedenceException","nonDirectPrecedenceException"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;;;;;AASA,IAAMA,mBAAmB,SAAnBA,gBAAmB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAiD;AACzE,uBAAWC,IAAX,CAAiB,IAAjB,EAAuBH,UAAvB,EAAmCC,YAAnC,EAAiDC,UAAjD;AACA,2BAAeC,IAAf,CAAqB,IAArB;AACA,CAHD;;AAKAC,QAAS,MAAT,EAAkBC,QAAlB,CAA4BN,gBAA5B;;AAEA;;;;;;AAMAA,iBAAiBO,SAAjB,CAA2BC,SAA3B,GAAuC,YAAW;AACjD,MAAMN,eAAe,KAAKO,eAAL,EAArB;AACA,MAAMR,aAAa,KAAKS,aAAL,EAAnB;AACA,MAAMC,cAAc,KAAKC,cAAL,EAApB;AACA,MAAMC,WAAW,KAAKC,WAAL,EAAjB;;AAEA,SAAO,CAAE,KAAKC,yBAAL,CAAgCb,YAAhC,EAA8CD,UAA9C,EAA0DY,QAA1D,CAAF,IACN,CAAE,KAAKG,4BAAL,CAAmCd,YAAnC,EAAiDD,UAAjD,EAA6DU,WAA7D,EAA0EE,QAA1E,CADH;AAEA,CARD;;AAUAb,iBAAiBO,SAAjB,CAA2BQ,yBAA3B;;AAEAf,iBAAiBO,SAAjB,CAA2BS,4BAA3B;;kBAEehB,gB","file":"PolishParticiple.js","sourcesContent":["import Participle from \"../../../values/Participle.js\";\nimport checkException from \"../../passiveVoice/periphrastic/checkException.js\";\nimport directPrecedenceException from \"../../../stringProcessing/directPrecedenceExceptionWithoutRegex\";\nimport nonDirectPrecedenceException from \"../../passiveVoice/periphrastic/freeAuxiliaryParticipleOrder/nonDirectParticiplePrecedenceException\";\n\n/**\n * Creates an Participle object for the Polish language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes The attributes object.\n *\n * @constructor\n */\nconst PolishParticiple = function( participle, sentencePart, attributes ) {\n\tParticiple.call( this, participle, sentencePart, attributes );\n\tcheckException.call( this );\n};\n\nrequire( \"util\" ).inherits( PolishParticiple, Participle );\n\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nPolishParticiple.prototype.isPassive = function() {\n\tconst sentencePart = this.getSentencePart();\n\tconst participle = this.getParticiple();\n\tconst auxiliaries = this.getAuxiliaries();\n\tconst language = this.getLanguage();\n\n\treturn ! this.directPrecedenceException( sentencePart, participle, language ) &&\n\t\t! this.nonDirectPrecedenceException( sentencePart, participle, auxiliaries, language );\n};\n\nPolishParticiple.prototype.directPrecedenceException = directPrecedenceException;\n\nPolishParticiple.prototype.nonDirectPrecedenceException = nonDirectPrecedenceException;\n\nexport default PolishParticiple;\n"]}