{"version":3,"sources":["../../src/assessor.js"],"names":["ScoreRating","Assessor","i18n","options","type","setI18n","_assessments","_options","researcher","_researcher","prototype","getAvailableAssessments","isApplicable","assessment","paper","hasOwnProperty","hasMarker","marker","getMarks","getSpecificMarker","getPaper","_lastPaper","getMarker","specificMarker","marks","assess","setPaper","assessments","results","bind","setHasMarkers","executeAssessment","hasMarkers","_hasMarkers","result","getResult","setIdentifier","identifier","hasMarks","setMarker","assessmentError","setScore","setText","sprintf","dgettext","getValidResults","isValidResult","assessmentResult","hasScore","hasText","calculateOverallScore","totalScore","getScore","Math","round","length","addAssessment","name","push","removeAssessment","toDelete","splice","getAssessment","getApplicableAssessments","availableAssessments","availableAssessment"],"mappings":"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","file":"assessor.js","sourcesContent":["import Researcher from \"./researcher.js\";\nimport MissingArgument from \"./errors/missingArgument\";\nimport removeDuplicateMarks from \"./markers/removeDuplicateMarks\";\nimport AssessmentResult from \"./values/AssessmentResult.js\";\nimport { showTrace } from \"./helpers/errors.js\";\n\nimport { isUndefined } from \"lodash-es\";\nimport { isFunction } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\nimport { filter } from \"lodash-es\";\nimport { map } from \"lodash-es\";\nimport { findIndex } from \"lodash-es\";\nimport { find } from \"lodash-es\";\n\nvar ScoreRating = 9;\n\n/**\n * Creates the Assessor.\n *\n * @param {Object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n * @param {Object} options.researcher The researcher to use in the assessor.\n *\n * @constructor\n */\nvar Assessor = function( i18n, options ) {\n\tthis.type = \"Assessor\";\n\tthis.setI18n( i18n );\n\tthis._assessments = [];\n\n\tthis._options = options || {};\n\n\tif ( ! isUndefined( this._options.researcher ) ) {\n\t\tthis._researcher = this._options.researcher;\n\t}\n};\n\n/**\n * Checks if the i18n object is defined and sets it.\n *\n * @param {Object} i18n The i18n object used for translations.\n * @throws {MissingArgument} Parameter needs to be a valid i18n object.\n * @returns {void}\n */\nAssessor.prototype.setI18n = function( i18n ) {\n\tif ( isUndefined( i18n ) ) {\n\t\tthrow new MissingArgument( \"The assessor requires an i18n object.\" );\n\t}\n\tthis.i18n = i18n;\n};\n\n/**\n * Gets all available assessments.\n * @returns {object} assessment\n */\nAssessor.prototype.getAvailableAssessments = function() {\n\treturn this._assessments;\n};\n\n/**\n * Checks whether or not the Assessment is applicable.\n *\n * @param {Object} assessment The Assessment object that needs to be checked.\n * @param {Paper} paper The Paper object to check against.\n * @param {Researcher} [researcher] The Researcher object containing additional information.\n * @returns {boolean} Whether or not the Assessment is applicable.\n */\nAssessor.prototype.isApplicable = function( assessment, paper, researcher ) {\n\tif ( assessment.hasOwnProperty( \"isApplicable\" ) || typeof assessment.isApplicable === \"function\" ) {\n\t\treturn assessment.isApplicable( paper, researcher );\n\t}\n\n\treturn true;\n};\n\n/**\n * Determines whether or not an assessment has a marker.\n *\n * @param {Object} assessment The assessment to check for.\n * @returns {boolean} Whether or not the assessment has a marker.\n */\nAssessor.prototype.hasMarker = function( assessment ) {\n\treturn isFunction( this._options.marker ) && ( assessment.hasOwnProperty( \"getMarks\" ) || typeof assessment.getMarks === \"function\" );\n};\n\n/**\n * Returns the specific marker for this assessor.\n *\n * @returns {Function} The specific marker for this assessor.\n */\nAssessor.prototype.getSpecificMarker = function() {\n\treturn this._options.marker;\n};\n\n/**\n * Returns the paper that was most recently assessed.\n *\n * @returns {Paper} The paper that was most recently assessed.\n */\nAssessor.prototype.getPaper = function() {\n\treturn this._lastPaper;\n};\n\n/**\n * Returns the marker for a given assessment, composes the specific marker with the assessment getMarks function.\n *\n * @param {Object} assessment The assessment for which we are retrieving the composed marker.\n * @param {Paper} paper The paper to retrieve the marker for.\n * @param {Researcher} researcher The researcher for the paper.\n * @returns {Function} A function that can mark the given paper according to the given assessment.\n */\nAssessor.prototype.getMarker = function( assessment, paper, researcher ) {\n\tvar specificMarker = this._options.marker;\n\n\treturn function() {\n\t\tlet marks = assessment.getMarks( paper, researcher );\n\t\tmarks = removeDuplicateMarks( marks );\n\n\t\tspecificMarker( paper, marks );\n\t};\n};\n\n/**\n * Runs the researches defined in the tasklist or the default researches.\n *\n * @param {Paper} paper The paper to run assessments on.\n * @returns {void}\n */\nAssessor.prototype.assess = function( paper ) {\n\tif ( isUndefined( this._researcher ) ) {\n\t\tthis._researcher = new Researcher( paper );\n\t} else {\n\t\tthis._researcher.setPaper( paper );\n\t}\n\n\tvar assessments = this.getAvailableAssessments();\n\tthis.results = [];\n\n\tassessments = filter( assessments, function( assessment ) {\n\t\treturn this.isApplicable( assessment, paper, this._researcher );\n\t}.bind( this ) );\n\n\tthis.setHasMarkers( false );\n\tthis.results = map( assessments, this.executeAssessment.bind( this, paper, this._researcher ) );\n\n\tthis._lastPaper = paper;\n};\n\n/**\n * Sets the value of has markers with a boolean to determine if there are markers.\n *\n * @param {boolean} hasMarkers True when there are markers, otherwise it is false.\n * @returns {void}\n */\nAssessor.prototype.setHasMarkers = function( hasMarkers ) {\n\tthis._hasMarkers = hasMarkers;\n};\n\n/**\n * Returns true when there are markers.\n *\n * @returns {boolean} Are there markers\n */\nAssessor.prototype.hasMarkers = function() {\n\treturn this._hasMarkers;\n};\n\n/**\n * Executes an assessment and returns the AssessmentResult.\n *\n * @param {Paper} paper The paper to pass to the assessment.\n * @param {Researcher} researcher The researcher to pass to the assessment.\n * @param {Object} assessment The assessment to execute.\n * @returns {AssessmentResult} The result of the assessment.\n */\nAssessor.prototype.executeAssessment = function( paper, researcher, assessment ) {\n\tvar result;\n\n\ttry {\n\t\tresult = assessment.getResult( paper, researcher, this.i18n );\n\t\tresult.setIdentifier( assessment.identifier );\n\n\t\tif ( result.hasMarks() ) {\n\t\t\tresult.marks = assessment.getMarks( paper, researcher );\n\t\t\tresult.marks = removeDuplicateMarks( result.marks );\n\t\t}\n\n\t\tif ( result.hasMarks() && this.hasMarker( assessment ) ) {\n\t\t\tthis.setHasMarkers( true );\n\n\t\t\tresult.setMarker( this.getMarker( assessment, paper, researcher ) );\n\t\t}\n\t} catch ( assessmentError ) {\n\t\tshowTrace( assessmentError );\n\n\t\tresult = new AssessmentResult();\n\n\t\tresult.setScore( -1 );\n\t\tresult.setText( this.i18n.sprintf(\n\t\t\t/* Translators: %1$s expands to the name of the assessment. */\n\t\t\tthis.i18n.dgettext( \"js-text-analysis\", \"An error occurred in the '%1$s' assessment\" ),\n\t\t\tassessment.identifier,\n\t\t\tassessmentError\n\t\t) );\n\t}\n\treturn result;\n};\n\n/**\n * Filters out all assessmentresults that have no score and no text.\n *\n * @returns {Array<AssessmentResult>} The array with all the valid assessments.\n */\nAssessor.prototype.getValidResults = function() {\n\treturn filter( this.results, function( result ) {\n\t\treturn this.isValidResult( result );\n\t}.bind( this ) );\n};\n\n/**\n * Returns if an assessmentResult is valid.\n *\n * @param {object} assessmentResult The assessmentResult to validate.\n * @returns {boolean} whether or not the result is valid.\n */\nAssessor.prototype.isValidResult = function( assessmentResult ) {\n\treturn assessmentResult.hasScore() && assessmentResult.hasText();\n};\n\n/**\n * Returns the overallscore. Calculates the totalscore by adding all scores and dividing these\n * by the number of results times the ScoreRating.\n *\n * @returns {number} The overallscore\n */\nAssessor.prototype.calculateOverallScore  = function() {\n\tvar results = this.getValidResults();\n\tvar totalScore = 0;\n\n\tforEach( results, function( assessmentResult ) {\n\t\ttotalScore += assessmentResult.getScore();\n\t} );\n\n\treturn Math.round( totalScore / ( results.length * ScoreRating ) * 100 ) || 0;\n};\n\n/**\n * Register an assessment to add it to the internal assessments object.\n *\n * @param {string} name The name of the assessment.\n * @param {object} assessment The object containing function to run as an assessment and it's requirements.\n * @returns {boolean} Whether registering the assessment was successful.\n * @private\n */\nAssessor.prototype.addAssessment = function( name, assessment ) {\n\tif ( ! assessment.hasOwnProperty( \"identifier\" ) ) {\n\t\tassessment.identifier = name;\n\t}\n\n\tthis._assessments.push( assessment );\n\treturn true;\n};\n\n/**\n * Remove a specific Assessment from the list of Assessments.\n *\n * @param {string} name The Assessment to remove from the list of assessments.\n * @returns {void}\n */\nAssessor.prototype.removeAssessment = function( name ) {\n\tvar toDelete = findIndex( this._assessments, function( assessment ) {\n\t\treturn assessment.hasOwnProperty( \"identifier\" ) && name === assessment.identifier;\n\t} );\n\n\tif ( -1 !== toDelete ) {\n\t\tthis._assessments.splice( toDelete, 1 );\n\t}\n};\n\n/**\n * Returns an assessment by identifier\n *\n * @param {string} identifier The identifier of the assessment.\n * @returns {undefined|Object} The object if found, otherwise undefined.\n */\nAssessor.prototype.getAssessment = function( identifier ) {\n\treturn find( this._assessments, function( assessment ) {\n\t\treturn assessment.hasOwnProperty( \"identifier\" ) && identifier === assessment.identifier;\n\t} );\n};\n\n/**\n * Checks which of the available assessments are applicable and returns an array with applicable assessments.\n *\n * @returns {Array} The array with applicable assessments.\n */\nAssessor.prototype.getApplicableAssessments = function() {\n\tvar availableAssessments = this.getAvailableAssessments();\n\treturn filter(\n\t\tavailableAssessments,\n\t\tfunction( availableAssessment ) {\n\t\t\treturn this.isApplicable( availableAssessment, this.getPaper() );\n\t\t}.bind( this )\n\t);\n};\n\n\nexport default Assessor;\n"]}