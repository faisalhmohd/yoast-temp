{"version":3,"sources":["../../../src/stringProcessing/precedenceExceptionWithoutRegex.js"],"names":["sentencePart","participle","language","wordsInSentencePart","map","word","toLowerCase","participleIndex","indexOf","precedenceExceptions","cannotBeBetweenPassiveAuxiliaryAndParticiple","i","en","fr","it","es"],"mappings":";;;;;;kBAyBe,UAAUA,YAAV,EAAwBC,UAAxB,EAAoCC,QAApC,EAA+C;AAC7D;AACA,KAAMC,sBAAsB,wBAAUH,YAAV,EAAyBI,GAAzB,CAA8B;AAAA,SAAQC,KAAKC,WAAL,EAAR;AAAA,EAA9B,CAA5B;;AAEA;AACA,KAAMC,kBAAkBJ,oBAAoBK,OAApB,CAA6BP,WAAWK,WAAX,EAA7B,CAAxB;;AAEA;;;;;;AAMA,KAAKC,kBAAkB,CAAvB,EAA2B;AAC1B,SAAO,KAAP;AACA;;AAED;AACA,KAAME,uBAAuB,mBAAKC,4CAAL,EAAmDR,QAAnD,EAA6D,EAA7D,CAA7B;;AAEA;AACA,MAAM,IAAIS,IAAI,CAAd,EAAiBA,IAAIJ,eAArB,EAAsCI,GAAtC,EAA4C;AAC3C,MAAK,wBAAUF,oBAAV,EAAgCN,oBAAqBQ,CAArB,CAAhC,CAAL,EAAkE;AACjE,UAAO,IAAP;AACA;AACD;;AAED,QAAO,KAAP;AACA,C;;AArDD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMD,+CAA+C;AACpDE,KAAI,+BAA8BF,4CADkB;AAEpDG,KAAI,+BAA6BH,4CAFmB;AAGpDI,KAAI,+BAA8BJ,4CAHkB;AAIpDK,KAAI,+BAA8BL;AAJkB,CAArD;;AAOA","file":"precedenceExceptionWithoutRegex.js","sourcesContent":["import { get, includes } from \"lodash-es\";\nimport functionWordsEnglishFactory from \"../researches/english/functionWords\";\nimport functionWordsFrenchFactory from \"../researches/french/functionWords\";\nimport functionWordsItalianFactory from \"../researches/italian/functionWords\";\nimport functionWordsSpanishFactory from \"../researches/spanish/functionWords\";\nimport getWords from \"../stringProcessing/getWords\";\n\nconst cannotBeBetweenPassiveAuxiliaryAndParticiple = {\n\ten: functionWordsEnglishFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple,\n\tfr: functionWordsFrenchFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple,\n\tit: functionWordsItalianFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple,\n\tes: functionWordsSpanishFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple,\n};\n\n/**\n * Checks whether a word from the precedence exception list occurs anywhere in the sentence part before the participle.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {string} participle   The participle.\n * @param {string} language     The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the precedence exception list occurs anywhere in the\n *                    sentence part before the participle, otherwise returns false.\n */\nexport default function( sentencePart, participle, language ) {\n\t// Break the sentence part up into words and convert to lower case.\n\tconst wordsInSentencePart = getWords( sentencePart ).map( word => word.toLowerCase() );\n\n\t// Search the participle in the word list.\n\tconst participleIndex = wordsInSentencePart.indexOf( participle.toLowerCase() );\n\n\t/*\n\t * There can be no exception in the following situations:\n\t *\n\t * -1 The participle is not found.\n\t *  0 There is no word before the participle.\n\t */\n\tif ( participleIndex < 1 ) {\n\t\treturn false;\n\t}\n\n\t// Get the exceptions word list.\n\tconst precedenceExceptions = get( cannotBeBetweenPassiveAuxiliaryAndParticiple, language, [] );\n\n\t// Check if the words preceding the participle are in the exceptions list.\n\tfor ( let i = 0; i < participleIndex; i++ ) {\n\t\tif ( includes( precedenceExceptions, wordsInSentencePart[ i ] ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n"]}