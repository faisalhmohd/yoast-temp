{"version":3,"sources":["../../../src/stringProcessing/matchTextWithTransliteration.js"],"names":["text","keyword","locale","keywordRegex","toRegex","turkishMappings","RegExp","map","x","join","matches","match","replace","transliterateKeyword","transliterateKeywordRegex","transliterateMatches","combinedArray","concat","transliterateWPKeyword","transliterateWPKeywordRegex","transliterateWPMatches"],"mappings":";;;;;;kBAwBe,UAAUA,IAAV,EAAgBC,OAAhB,EAAyBC,MAAzB,EAAkC;AAChD,KAAIC,eAAeC,QAASH,OAAT,CAAnB;;AAEA,KAAKC,WAAW,OAAhB,EAA0B;AACzB,MAAMG,kBAAkB,wDAA0BJ,OAA1B,CAAxB;AACAE,iBAAe,IAAIG,MAAJ,CAAYD,gBAAgBE,GAAhB,CAAqB;AAAA,UAAK,+BAAiBC,CAAjB,CAAL;AAAA,GAArB,EAAiDC,IAAjD,CAAuD,GAAvD,CAAZ,EAA0E,IAA1E,CAAf;AACA;AACD,KAAIC,UAAUV,KAAKW,KAAL,CAAYR,YAAZ,KAA8B,EAA5C;;AAEAH,QAAOA,KAAKY,OAAL,CAAcT,YAAd,EAA4B,EAA5B,CAAP;;AAEA,KAAIU,uBAAuB,6BAAeZ,OAAf,EAAwBC,MAAxB,CAA3B;AACA,KAAIY,4BAA4BV,QAASS,oBAAT,CAAhC;AACA,KAAIE,uBAAuBf,KAAKW,KAAL,CAAYG,yBAAZ,KAA2C,EAAtE;AACA,KAAIE,gBAAgBN,QAAQO,MAAR,CAAgBF,oBAAhB,CAApB;;AAEA,KAAIG,yBAAyB,oCAAiBjB,OAAjB,EAA0BC,MAA1B,CAA7B;;AAEA,KAAK,EAAIgB,2BAA2BL,oBAA/B,CAAL,EAA6D;AAC5D,MAAIM,8BAA8Bf,QAASc,sBAAT,CAAlC;AACA,MAAIE,yBAAyBpB,KAAKW,KAAL,CAAYQ,2BAAZ,KAA6C,EAA1E;;AAEAH,kBAAgBA,cAAcC,MAAd,CAAsBG,sBAAtB,CAAhB;AACA;;AAED,QAAO,mBAAKJ,aAAL,EAAoB,UAAUf,OAAV,EAAoB;AAC9C,SAAO,2BAAaA,OAAb,CAAP;AACA,EAFM,CAAP;AAGA,C;;AApDD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;AAKA,IAAIG,UAAU,SAAVA,OAAU,CAAUH,OAAV,EAAoB;AACjCA,WAAU,+BAAiBA,OAAjB,CAAV;AACA,QAAO,IAAIK,MAAJ,CAAYL,OAAZ,EAAqB,IAArB,CAAP;AACA,CAHD;;AAKA","file":"matchTextWithTransliteration.js","sourcesContent":["import { map } from \"lodash-es\";\nimport addWordBoundary from \"./addWordboundary.js\";\nimport stripSpaces from \"./stripSpaces.js\";\nimport transliterate from \"./transliterate.js\";\nimport transliterateWP from \"./transliterateWPstyle.js\";\nimport { replaceTurkishIsMemoized } from \"./specialCharacterMappings\";\n\n/**\n * Creates a regex from the keyword with included wordboundaries.\n * @param {string} keyword The keyword to create a regex from.\n * @returns {RegExp} Regular expression of the keyword with wordboundaries.\n */\nvar toRegex = function( keyword ) {\n\tkeyword = addWordBoundary( keyword );\n\treturn new RegExp( keyword, \"ig\" );\n};\n\n/**\n * Matches a string with and without transliteration.\n * @param {string} text The text to match.\n * @param {string} keyword The keyword to match in the text.\n * @param {string} locale The locale used for transliteration.\n * @returns {Array} All matches from the original as the transliterated text and keyword.\n */\nexport default function( text, keyword, locale ) {\n\tvar keywordRegex = toRegex( keyword );\n\n\tif ( locale === \"tr_TR\" ) {\n\t\tconst turkishMappings = replaceTurkishIsMemoized( keyword );\n\t\tkeywordRegex = new RegExp( turkishMappings.map( x => addWordBoundary( x ) ).join( \"|\" ), \"ig\" );\n\t}\n\tvar matches = text.match( keywordRegex ) || [];\n\n\ttext = text.replace( keywordRegex, \"\" );\n\n\tvar transliterateKeyword = transliterate( keyword, locale );\n\tvar transliterateKeywordRegex = toRegex( transliterateKeyword );\n\tvar transliterateMatches = text.match( transliterateKeywordRegex ) || [];\n\tvar combinedArray = matches.concat( transliterateMatches );\n\n\tvar transliterateWPKeyword = transliterateWP( keyword, locale );\n\n\tif ( ! ( transliterateWPKeyword === transliterateKeyword ) ) {\n\t\tvar transliterateWPKeywordRegex = toRegex( transliterateWPKeyword );\n\t\tvar transliterateWPMatches = text.match( transliterateWPKeywordRegex ) || [];\n\n\t\tcombinedArray = combinedArray.concat( transliterateWPMatches );\n\t}\n\n\treturn map( combinedArray, function( keyword ) {\n\t\treturn stripSpaces( keyword );\n\t} );\n}\n\n\n"]}