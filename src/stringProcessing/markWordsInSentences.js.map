{"version":3,"sources":["../../../src/stringProcessing/markWordsInSentences.js"],"names":["markWordsInSentences","collectMarkingsInSentence","sentence","topicFoundInSentence","markup","replace","x","RegExp","wordsToMark","sentences","locale","markings","indexOfSentence","indexRunningThroughSentence","matchesIndices","forEach","matches","length","occurrence","indexOfOccurrenceInSentence","indexOf","push","index","match","concat","original","marked"],"mappings":";;;;;QAsBgBA,oB,GAAAA,oB;;AAtBhB;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,4BAA4B,SAA5BA,yBAA4B,CAAUC,QAAV,EAAoBC,oBAApB,EAA2C;AAC5E,KAAMC,SAASF,SAASG,OAAT,CAAkB,oCAAcF,oBAAd,CAAlB,EAAwD,UAAUG,CAAV,EAAc;AACpF,SAAO,iCAASA,CAAT,CAAP;AACA,EAFc,CAAf;;AAIA,QAASF,OAAOC,OAAP,CAAgB,IAAIE,MAAJ,CAAY,kDAAZ,EAAgE,IAAhE,CAAhB,EAAwF,GAAxF,CAAT;AACA,CAND;;AAQA;;;;;;;;;AASO,SAASP,oBAAT,CAA+BQ,WAA/B,EAA4CC,SAA5C,EAAuDC,MAAvD,EAAgE;AACtE,KAAIP,uBAAuB,EAA3B;AACA,KAAIQ,WAAW,EAAf;AACA,KAAMC,kBAAkB,CAAxB;AACA,KAAIC,8BAA8B,CAAlC;AACA,KAAMC,iBAAiB,EAAvB;;AAEAL,WAAUM,OAAV,CAAmB,UAAUb,QAAV,EAAqB;AACvCC,yBAAuB,kCAAYD,QAAZ,EAAsBM,WAAtB,EAAmCE,MAAnC,EAA4CM,OAAnE;;AAEA,MAAKb,qBAAqBc,MAArB,GAA8B,CAAnC,EAAuC;AACtCd,wBAAqBY,OAArB,CAA8B,UAAUG,UAAV,EAAuB;AACpD,QAAMC,8BAA8BjB,SAASkB,OAAT,CAAkBF,UAAlB,EAA8BL,2BAA9B,CAApC;AACAC,mBAAeO,IAAf,CACC;AACCC,YAAOH,8BAA8BP,eADtC;AAECW,YAAOL;AAFR,KADD;AAMAL,mCAA+BM,8BAA8BD,WAAWD,MAAxE;AACA,IATD;AAUAN,cAAWA,SAASa,MAAT,CAAiB,mBAAU;AACrCC,cAAUvB,QAD2B;AAErCwB,YAAQzB,0BAA2BC,QAA3B,EAAqCC,oBAArC;AAF6B,IAAV,CAAjB,CAAX;AAIA;AACD,EAnBD;;AAqBA,QAAOQ,QAAP;AACA","file":"markWordsInSentences.js","sourcesContent":["import matchWords from \"./matchTextWithArray\";\nimport arrayToRegex from \"./createRegexFromArray\";\nimport addMark from \"../markers/addMarkSingleWord\";\nimport Mark from \"../values/Mark\";\n\nconst collectMarkingsInSentence = function( sentence, topicFoundInSentence ) {\n\tconst markup = sentence.replace( arrayToRegex( topicFoundInSentence ), function( x ) {\n\t\treturn addMark( x );\n\t} );\n\n\treturn ( markup.replace( new RegExp( \"</yoastmark> <yoastmark class='yoast-text-mark'>\", \"ig\" ), \" \" ) );\n};\n\n/**\n * Adds marks to words in a sentence.\n *\n * @param {[string]}    wordsToMark The words to mark.\n * @param {[string]}    sentences   The sentences in which to mark these words.\n * @param {string}      locale      The locale.\n *\n * @returns {[string]} The sentences with marks.\n */\nexport function markWordsInSentences( wordsToMark, sentences, locale ) {\n\tlet topicFoundInSentence = [];\n\tlet markings = [];\n\tconst indexOfSentence = 0;\n\tlet indexRunningThroughSentence = 0;\n\tconst matchesIndices = [];\n\n\tsentences.forEach( function( sentence ) {\n\t\ttopicFoundInSentence = matchWords( sentence, wordsToMark, locale ).matches;\n\n\t\tif ( topicFoundInSentence.length > 0 ) {\n\t\t\ttopicFoundInSentence.forEach( function( occurrence ) {\n\t\t\t\tconst indexOfOccurrenceInSentence = sentence.indexOf( occurrence, indexRunningThroughSentence );\n\t\t\t\tmatchesIndices.push(\n\t\t\t\t\t{\n\t\t\t\t\t\tindex: indexOfOccurrenceInSentence + indexOfSentence,\n\t\t\t\t\t\tmatch: occurrence,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tindexRunningThroughSentence += indexOfOccurrenceInSentence + occurrence.length;\n\t\t\t} );\n\t\t\tmarkings = markings.concat( new Mark( {\n\t\t\t\toriginal: sentence,\n\t\t\t\tmarked: collectMarkingsInSentence( sentence, topicFoundInSentence ),\n\t\t\t} ) );\n\t\t}\n\t} );\n\n\treturn markings;\n}\n"]}