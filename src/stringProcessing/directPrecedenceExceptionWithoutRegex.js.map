{"version":3,"sources":["../../../src/stringProcessing/directPrecedenceExceptionWithoutRegex.js"],"names":["sentencePart","participle","language","wordsInSentencePart","map","word","toLowerCase","participleIndex","indexOf","wordPrecedingParticiple","directPrecedenceExceptions","cannotDirectlyPrecedePassiveParticiples","nl","cannotDirectlyPrecedePassiveParticiple","en","fr","it","pl","es"],"mappings":";;;;;;kBA6Be,UAAUA,YAAV,EAAwBC,UAAxB,EAAoCC,QAApC,EAA+C;AAC7D;AACA,KAAMC,sBAAsB,wBAAUH,YAAV,EAAyBI,GAAzB,CAA8B;AAAA,SAAQC,KAAKC,WAAL,EAAR;AAAA,EAA9B,CAA5B;;AAEA;AACA,KAAMC,kBAAkBJ,oBAAoBK,OAApB,CAA6BP,WAAWK,WAAX,EAA7B,CAAxB;;AAEA;;;;;;AAMA,KAAKC,kBAAkB,CAAvB,EAA2B;AAC1B,SAAO,KAAP;AACA;;AAED,KAAME,0BAA0BN,oBAAqBI,kBAAkB,CAAvC,CAAhC;;AAEA;AACA,KAAMG,6BAA6B,mBAAKC,uCAAL,EAA8CT,QAA9C,EAAwD,EAAxD,CAAnC;;AAEA;AACA,QAAO,wBAAUQ,0BAAV,EAAsCD,uBAAtC,CAAP;AACA,C;;AArDD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAME,0CAA0C;AAC/CC,KAAI,+BAA4BC,sCADe;AAE/CC,KAAI,+BAA8BD,sCAFa;AAG/CE,KAAI,+BAA6BF,sCAHc;AAI/CG,KAAI,+BAA8BH,sCAJa;AAK/CI,KAAI,gCAA6BJ,sCALc;AAM/CK,KAAI,gCAA8BL;AANa,CAAhD;;AASA","file":"directPrecedenceExceptionWithoutRegex.js","sourcesContent":["import { get, includes } from \"lodash-es\";\nimport functionWordsDutchFactory from \"../researches/dutch/functionWords\";\nimport functionWordsEnglishFactory from \"../researches/english/functionWords\";\nimport functionWordsFrenchFactory from \"../researches/french/functionWords\";\nimport functionWordsItalianFactory from \"../researches/italian/functionWords\";\nimport functionWordsPolishFactory from \"../researches/polish/functionWords\";\nimport functionWordsSpanishFactory from \"../researches/spanish/functionWords\";\nimport getWords from \"../stringProcessing/getWords\";\n\nconst cannotDirectlyPrecedePassiveParticiples = {\n\tnl: functionWordsDutchFactory().cannotDirectlyPrecedePassiveParticiple,\n\ten: functionWordsEnglishFactory().cannotDirectlyPrecedePassiveParticiple,\n\tfr: functionWordsFrenchFactory().cannotDirectlyPrecedePassiveParticiple,\n\tit: functionWordsItalianFactory().cannotDirectlyPrecedePassiveParticiple,\n\tpl: functionWordsPolishFactory().cannotDirectlyPrecedePassiveParticiple,\n\tes: functionWordsSpanishFactory().cannotDirectlyPrecedePassiveParticiple,\n};\n\n/**\n * Checks whether the participle is directly preceded by a word from the direct precedence exception list.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {string} participle   The participle.\n * @param {string} language     The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the direct precedence exception list is directly preceding\n *                    the participle, otherwise returns false.\n */\nexport default function( sentencePart, participle, language ) {\n\t// Break the sentence part up into words and convert to lower case.\n\tconst wordsInSentencePart = getWords( sentencePart ).map( word => word.toLowerCase() );\n\n\t// Search the participle in the word list.\n\tconst participleIndex = wordsInSentencePart.indexOf( participle.toLowerCase() );\n\n\t/*\n\t * There can be no exception in the following situations:\n\t *\n\t * -1 The participle is not found.\n\t *  0 There is no word before the participle.\n\t */\n\tif ( participleIndex < 1 ) {\n\t\treturn false;\n\t}\n\n\tconst wordPrecedingParticiple = wordsInSentencePart[ participleIndex - 1 ];\n\n\t// Get the exceptions word list.\n\tconst directPrecedenceExceptions = get( cannotDirectlyPrecedePassiveParticiples, language, [] );\n\n\t// Check if the word preceding the participle is in the exceptions list.\n\treturn includes( directPrecedenceExceptions, wordPrecedingParticiple );\n}\n"]}