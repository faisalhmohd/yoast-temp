{"version":3,"sources":["../../../src/stringProcessing/directPrecedenceException.js"],"names":["sentencePart","participleIndex","language","directPrecedenceExceptionRegex","cannotDirectlyPrecedePassiveParticipleFrench","cannotDirectlyPrecedePassiveParticipleSpanish","cannotDirectlyPrecedePassiveParticipleItalian","cannotDirectlyPrecedePassiveParticipleDutch","cannotDirectlyPrecedePassiveParticiplePolish","cannotDirectlyPrecedePassiveParticipleEnglish","directPrecedenceExceptionMatch","cannotDirectlyPrecedePassiveParticiple"],"mappings":";;;;;;kBAkCe,UAAUA,YAAV,EAAwBC,eAAxB,EAAyCC,QAAzC,EAAoD;AAClE,KAAIC,uCAAJ;AACA,SAASD,QAAT;AACC,OAAK,IAAL;AACCC,oCAAiC,oCAAcC,4CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCD,oCAAiC,oCAAcE,6CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCF,oCAAiC,oCAAcG,6CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCH,oCAAiC,oCAAcI,2CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACCJ,oCAAiC,oCAAcK,4CAAd,CAAjC;AACA;AACD,OAAK,IAAL;AACA;AACCL,oCAAiC,oCAAcM,6CAAd,CAAjC;AACA;AAnBF;AAqBA,KAAMC,iCAAiC,mCAAgBV,YAAhB,EAA8BG,8BAA9B,CAAvC;AACA,QAAO,6BAAeO,8BAAf,EAA+CT,eAA/C,CAAP;AACA,C;;AA3DD;;;;AACA;;;;AACA;;;;AAEA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAGA;;;;AAGA;;;;;;AAdA,IAAMG,+CAA+C,+BAAsDO,sCAA3G;;AAGA,IAAMF,gDAAgD,+BAAuDE,sCAA7G;;AAGA,IAAMN,gDAAgD,+BAAuDM,sCAA7G;;AAGA,IAAML,gDAAgD,+BAAuDK,sCAA7G;;AAGA,IAAMJ,8CAA8C,gCAAqDI,sCAAzG;;AAGA,IAAMH,+CAA+C,gCAAsDG,sCAA3G;;AAGA","file":"directPrecedenceException.js","sourcesContent":["import getWordIndices from \"../researches/passiveVoice/periphrastic/getIndicesWithRegex.js\";\nimport includesIndex from \"./includesIndex\";\nimport arrayToRegex from \"./createRegexFromArray.js\";\n\nimport cannotDirectlyPrecedePassiveParticipleFrenchFactory from \"../researches/french/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleFrench = cannotDirectlyPrecedePassiveParticipleFrenchFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleEnglishFactory from \"../researches/english/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleEnglish = cannotDirectlyPrecedePassiveParticipleEnglishFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleSpanishFactory from \"../researches/spanish/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleSpanish = cannotDirectlyPrecedePassiveParticipleSpanishFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleItalianFactory from \"../researches/italian/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleItalian = cannotDirectlyPrecedePassiveParticipleItalianFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticipleDutchFactory from \"../researches/dutch/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticipleDutch = cannotDirectlyPrecedePassiveParticipleDutchFactory().cannotDirectlyPrecedePassiveParticiple;\n\nimport cannotDirectlyPrecedePassiveParticiplePolishFactory from \"../researches/polish/functionWords.js\";\nconst cannotDirectlyPrecedePassiveParticiplePolish = cannotDirectlyPrecedePassiveParticiplePolishFactory().cannotDirectlyPrecedePassiveParticiple;\n\n\n/**\n * Checks whether the participle is directly preceded by a word from the direct precedence exception list.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {number} participleIndex The index of the participle.\n * @param {string} language The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the direct precedence exception list is directly preceding\n * the participle, otherwise returns false.\n */\nexport default function( sentencePart, participleIndex, language ) {\n\tlet directPrecedenceExceptionRegex;\n\tswitch ( language ) {\n\t\tcase \"fr\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleFrench );\n\t\t\tbreak;\n\t\tcase \"es\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleSpanish );\n\t\t\tbreak;\n\t\tcase \"it\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleItalian );\n\t\t\tbreak;\n\t\tcase \"nl\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleDutch );\n\t\t\tbreak;\n\t\tcase \"pl\":\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticiplePolish );\n\t\t\tbreak;\n\t\tcase \"en\":\n\t\tdefault:\n\t\t\tdirectPrecedenceExceptionRegex = arrayToRegex( cannotDirectlyPrecedePassiveParticipleEnglish );\n\t\t\tbreak;\n\t}\n\tconst directPrecedenceExceptionMatch = getWordIndices( sentencePart, directPrecedenceExceptionRegex );\n\treturn includesIndex( directPrecedenceExceptionMatch, participleIndex );\n}\n"]}