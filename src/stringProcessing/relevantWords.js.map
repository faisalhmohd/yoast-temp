{"version":3,"sources":["../../../src/stringProcessing/relevantWords.js"],"names":["functionWordLists","densityLowerLimit","densityUpperLimit","relevantWordLimit","wordCountLowerLimit","specialCharacters","getWordCombinations","text","combinationSize","functionWords","sentences","words","combination","sentence","toLocaleLowerCase","word","i","length","slice","calculateOccurrences","wordCombinations","occurrences","wordCombination","getCombination","incrementOccurrences","getRelevantCombinations","filter","getOccurrences","getRelevance","sortCombinations","sort","combinationA","combinationB","difference","getLength","filterOneCharacterWordCombinations","getWords","filterFunctionWordsAnywhere","filterFunctionWordsAtBeginning","filterFunctionWordsAtEnding","lastWordIndex","filterFunctionWordsAtBeginningAndEnding","filterOnDensity","wordCount","getDensity","filterEndingWith","str","exceptions","combinationstr","endsWith","filterFunctionWords","combinations","filteredAnywhere","filteredAtBeginningAndEnding","filteredAtEnding","filteredAtBeginning","filterCombinations","language","getRelevantWords","locale","hasOwnProperty","all","oneWordCombinations","oneWordRelevanceMap","twoWordCombinations","threeWordCombinations","fourWordCombinations","fiveWordCombinations","concat","setRelevantWords"],"mappings":"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","file":"relevantWords.js","sourcesContent":["import getWords from \"../stringProcessing/getWords.js\";\nimport getSentences from \"../stringProcessing/getSentences.js\";\nimport WordCombination from \"../values/WordCombination.js\";\nimport { normalize as normalizeQuotes } from \"../stringProcessing/quotes.js\";\nimport functionWordListsFactory from \"../helpers/getFunctionWords.js\";\nconst functionWordLists = functionWordListsFactory();\nimport getLanguage from \"../helpers/getLanguage.js\";\n\nimport { filter } from \"lodash-es\";\nimport { map } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\nimport { has } from \"lodash-es\";\nimport { flatMap } from \"lodash-es\";\nimport { values } from \"lodash-es\";\nimport { take } from \"lodash-es\";\nimport { includes } from \"lodash-es\";\nimport { intersection } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\n\nconst densityLowerLimit = 0;\nconst densityUpperLimit = 0.03;\nconst relevantWordLimit = 100;\nconst wordCountLowerLimit = 200;\n\n// First four characters: en dash, em dash, hyphen-minus, and copyright sign.\nconst specialCharacters = [ \"–\", \"—\", \"-\", \"\\u00a9\", \"#\", \"%\", \"/\", \"\\\\\", \"$\", \"€\", \"£\", \"*\", \"•\", \"|\", \"→\", \"←\", \"}\", \"{\", \"//\", \"||\", \"\\u200b\" ];\n\n/**\n * Returns the word combinations for the given text based on the combination size.\n *\n * @param {string} text The text to retrieve combinations for.\n * @param {number} combinationSize The size of the combinations to retrieve.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {WordCombination[]} All word combinations for the given text.\n */\nfunction getWordCombinations( text, combinationSize, functionWords ) {\n\tconst sentences = getSentences( text );\n\n\tlet words, combination;\n\n\treturn flatMap( sentences, function( sentence ) {\n\t\tsentence = sentence.toLocaleLowerCase();\n\t\tsentence = normalizeQuotes( sentence );\n\t\twords = getWords( sentence );\n\n\t\treturn filter( map( words, function( word, i ) {\n\t\t\t// If there are still enough words in the sentence to slice of.\n\t\t\tif ( i + combinationSize - 1 < words.length ) {\n\t\t\t\tcombination = words.slice( i, i + combinationSize );\n\t\t\t\treturn new WordCombination( combination, 0, functionWords );\n\t\t\t}\n\n\t\t\treturn false;\n\t\t} ) );\n\t} );\n}\n\n/**\n * Calculates occurrences for a list of word combinations.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to calculate occurrences for.\n * @returns {WordCombination[]} Word combinations with their respective occurrences.\n */\nfunction calculateOccurrences( wordCombinations ) {\n\tconst occurrences = {};\n\n\tforEach( wordCombinations, function( wordCombination ) {\n\t\tconst combination = wordCombination.getCombination();\n\n\t\tif ( ! has( occurrences, combination ) ) {\n\t\t\toccurrences[ combination ] = wordCombination;\n\t\t}\n\n\t\toccurrences[ combination ].incrementOccurrences();\n\t} );\n\n\treturn values( occurrences );\n}\n\n/**\n * Returns only the relevant combinations from a list of word combinations. Assumes\n * occurrences have already been calculated.\n *\n * @param {WordCombination[]} wordCombinations A list of word combinations.\n * @returns {WordCombination[]} Only relevant word combinations.\n */\nfunction getRelevantCombinations( wordCombinations ) {\n\twordCombinations = wordCombinations.filter( function( combination ) {\n\t\treturn combination.getOccurrences() !== 1 &&\n\t\t\tcombination.getRelevance() !== 0;\n\t} );\n\treturn wordCombinations;\n}\n\n/**\n * Sorts combinations based on their relevance and length.\n *\n * @param {WordCombination[]} wordCombinations The combinations to sort.\n * @returns {void}\n */\nfunction sortCombinations( wordCombinations ) {\n\twordCombinations.sort( function( combinationA, combinationB ) {\n\t\tconst difference = combinationB.getRelevance() - combinationA.getRelevance();\n\t\t// The combination with the highest relevance comes first.\n\t\tif ( difference !== 0 ) {\n\t\t\treturn difference;\n\t\t}\n\t\t// In case of a tie on relevance, the longest combination comes first.\n\t\treturn combinationB.getLength() - combinationA.getLength();\n\t} );\n}\n\n/**\n * Filters word combinations that consist of a single one-character word.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterOneCharacterWordCombinations( wordCombinations ) {\n\treturn wordCombinations.filter( function( combination ) {\n\t\treturn ! ( combination.getLength() === 1 && combination.getWords()[ 0 ].length <= 1 );\n\t} );\n}\n\n/**\n * Filters word combinations containing certain function words at any position.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAnywhere( wordCombinations, functionWords ) {\n\treturn wordCombinations.filter( function( combination ) {\n\t\treturn isEmpty(\n\t\t\tintersection( functionWords, combination.getWords() )\n\t\t);\n\t} );\n}\n\n/**\n * Filters word combinations beginning with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtBeginning( wordCombinations, functionWords ) {\n\treturn wordCombinations.filter( function( combination ) {\n\t\treturn ! includes( functionWords, combination.getWords()[ 0 ] );\n\t} );\n}\n\n/**\n * Filters word combinations ending with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtEnding( wordCombinations, functionWords ) {\n\treturn wordCombinations.filter( function( combination ) {\n\t\tconst words = combination.getWords();\n\t\tconst lastWordIndex = words.length - 1;\n\t\treturn ! includes( functionWords, words[ lastWordIndex ] );\n\t} );\n}\n\n/**\n * Filters word combinations beginning and ending with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {Array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtBeginningAndEnding( wordCombinations, functionWords ) {\n\twordCombinations = filterFunctionWordsAtBeginning( wordCombinations, functionWords );\n\twordCombinations = filterFunctionWordsAtEnding( wordCombinations, functionWords );\n\treturn wordCombinations;\n}\n\n/**\n * Filters word combinations based on keyword density if the word count is 200 or over.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {number} wordCount The number of words in the total text.\n * @param {number} densityLowerLimit The lower limit of keyword density.\n * @param {number} densityUpperLimit The upper limit of keyword density.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterOnDensity( wordCombinations, wordCount, densityLowerLimit, densityUpperLimit ) {\n\treturn wordCombinations.filter( function( combination ) {\n\t\treturn ( combination.getDensity( wordCount ) >= densityLowerLimit && combination.getDensity( wordCount ) < densityUpperLimit\n\t\t);\n\t} );\n}\n\n/**\n * Filters combinations based on whether they end with a specified string or not.\n *\n * @param {WordCombination[]} wordCombinations The array of WordCombinations to filter.\n * @param {string} str The string the WordCombinations that need to be filtered out end with.\n * @param {string[]} exceptions The array of strings containing exceptions to not filter.\n * @returns {WordCombination[]} The filtered array of WordCombinations.\n */\nfunction filterEndingWith( wordCombinations, str, exceptions ) {\n\twordCombinations = wordCombinations.filter( function( combination ) {\n\t\tconst combinationstr = combination.getCombination();\n\t\tfor ( let i = 0; i < exceptions.length; i++ ) {\n\t\t\tif ( combinationstr.endsWith( exceptions[ i ] ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn ! combinationstr.endsWith( str );\n\t} );\n\treturn wordCombinations;\n}\n\n/**\n * Filters the list of word combination objects based on the language-specific function word filters.\n * Word combinations with specific parts of speech are removed.\n *\n * @param {Array} combinations The list of word combination objects.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {Array} The filtered list of word combination objects.\n */\nfunction filterFunctionWords( combinations, functionWords ) {\n\tcombinations = filterFunctionWordsAnywhere( combinations, functionWords.filteredAnywhere );\n\tcombinations = filterFunctionWordsAtBeginningAndEnding( combinations, functionWords.filteredAtBeginningAndEnding );\n\tcombinations = filterFunctionWordsAtEnding( combinations, functionWords.filteredAtEnding );\n\tcombinations = filterFunctionWordsAtBeginning( combinations, functionWords.filteredAtBeginning );\n\treturn combinations;\n}\n\n/**\n * Filters the list of word combination objects based on function word filters, a special character filter and\n * a one-character filter.\n *\n * @param {Array} combinations The list of word combination objects.\n * @param {Function} functionWords The function containing the lists of function words.\n * @param {string} language The language for which specific filters should be applied.\n * @returns {Array} The filtered list of word combination objects.\n */\nfunction filterCombinations( combinations, functionWords, language ) {\n\tcombinations = filterFunctionWordsAnywhere( combinations, specialCharacters );\n\tcombinations = filterOneCharacterWordCombinations( combinations );\n\tcombinations = filterFunctionWords( combinations, functionWords );\n\tif ( language === \"en\" ) {\n\t\tcombinations = filterEndingWith( combinations, \"'s\", [] );\n\t}\n\treturn combinations;\n}\n/**\n * Returns the relevant words in a given text.\n *\n * @param {string} text The text to retrieve the relevant words of.\n * @param {string} locale The paper's locale.\n * @returns {WordCombination[]} All relevant words sorted and filtered for this text.\n */\nfunction getRelevantWords( text, locale ) {\n\tlet language = getLanguage( locale );\n\tif ( ! functionWordLists.hasOwnProperty( language ) ) {\n\t\tlanguage = \"en\";\n\t}\n\n\tconst functionWords = functionWordLists[ language ];\n\n\tconst words = getWordCombinations( text, 1, functionWords.all );\n\tconst wordCount = words.length;\n\n\tlet oneWordCombinations = getRelevantCombinations(\n\t\tcalculateOccurrences( words )\n\t);\n\n\tsortCombinations( oneWordCombinations );\n\toneWordCombinations = take( oneWordCombinations, 100 );\n\n\tconst oneWordRelevanceMap = {};\n\n\tforEach( oneWordCombinations, function( combination ) {\n\t\toneWordRelevanceMap[ combination.getCombination() ] = combination.getRelevance();\n\t} );\n\n\tconst twoWordCombinations = calculateOccurrences( getWordCombinations( text, 2, functionWords.all ) );\n\tconst threeWordCombinations = calculateOccurrences( getWordCombinations( text, 3, functionWords.all ) );\n\tconst fourWordCombinations = calculateOccurrences( getWordCombinations( text, 4, functionWords.all ) );\n\tconst fiveWordCombinations = calculateOccurrences( getWordCombinations( text, 5, functionWords.all ) );\n\n\tlet combinations = oneWordCombinations.concat(\n\t\ttwoWordCombinations,\n\t\tthreeWordCombinations,\n\t\tfourWordCombinations,\n\t\tfiveWordCombinations\n\t);\n\n\tcombinations = filterCombinations( combinations, functionWords, language );\n\n\tforEach( combinations, function( combination ) {\n\t\tcombination.setRelevantWords( oneWordRelevanceMap );\n\t} );\n\n\tcombinations = getRelevantCombinations( combinations );\n\tsortCombinations( combinations );\n\n\tif ( wordCount >= wordCountLowerLimit ) {\n\t\tcombinations = filterOnDensity( combinations, wordCount, densityLowerLimit, densityUpperLimit );\n\t}\n\n\treturn take( combinations, relevantWordLimit );\n}\n\nexport {\n\tgetWordCombinations,\n\tgetRelevantWords,\n\tcalculateOccurrences,\n\tgetRelevantCombinations,\n\tsortCombinations,\n\tfilterFunctionWordsAtEnding,\n\tfilterFunctionWordsAtBeginning,\n\tfilterFunctionWords,\n\tfilterFunctionWordsAnywhere,\n\tfilterOnDensity,\n\tfilterOneCharacterWordCombinations,\n\tfilterEndingWith,\n};\n\nexport default {\n\tgetWordCombinations: getWordCombinations,\n\tgetRelevantWords: getRelevantWords,\n\tcalculateOccurrences: calculateOccurrences,\n\tgetRelevantCombinations: getRelevantCombinations,\n\tsortCombinations: sortCombinations,\n\tfilterFunctionWordsAtEnding: filterFunctionWordsAtEnding,\n\tfilterFunctionWordsAtBeginning: filterFunctionWordsAtBeginning,\n\tfilterFunctionWords: filterFunctionWordsAtBeginningAndEnding,\n\tfilterFunctionWordsAnywhere: filterFunctionWordsAnywhere,\n\tfilterOnDensity: filterOnDensity,\n\tfilterOneCharacterWordCombinations: filterOneCharacterWordCombinations,\n\tfilterEndingWith: filterEndingWith,\n};\n"]}