{"version":3,"sources":["../../../src/stringProcessing/precedenceException.js"],"names":["sentencePart","participleIndex","language","precedenceExceptionRegex","cannotBeBetweenAuxiliaryAndParticipleFrench","cannotBeBetweenAuxiliaryAndParticipleSpanish","cannotBeBetweenAuxiliaryAndParticipleItalian","cannotBeBetweenAuxiliaryAndParticipleEnglish","precedenceExceptionMatch","cannotBeBetweenPassiveAuxiliaryAndParticiple"],"mappings":";;;;;;kBA4Be,UAAUA,YAAV,EAAwBC,eAAxB,EAAyCC,QAAzC,EAAoD;AAClE,KAAIC,iCAAJ;AACA,SAASD,QAAT;AACC,OAAK,IAAL;AACCC,8BAA2B,oCAAcC,2CAAd,CAA3B;AACA;AACD,OAAK,IAAL;AACCD,8BAA2B,oCAAcE,4CAAd,CAA3B;AACA;AACD,OAAK,IAAL;AACCF,8BAA2B,oCAAcG,4CAAd,CAA3B;AACA;AACD,OAAK,IAAL;AACA;AACCH,8BAA2B,oCAAcI,4CAAd,CAA3B;AACA;AAbF;;AAgBA,KAAMC,2BAA2B,mCAAgBR,YAAhB,EAA8BG,wBAA9B,CAAjC;AACA,QAAO,6BAAeK,wBAAf,EAAyCP,eAAzC,CAAP;AACA,C;;AAhDD;;;;AACA;;;;AACA;;;;AAEA;;;;AAGA;;;;AAGA;;;;AAGA;;;;;;AARA,IAAMG,8CACL,+BAAqDK,4CADtD;;AAGA,IAAMF,+CACL,+BAAsDE,4CADvD;;AAGA,IAAMJ,+CACL,+BAAsDI,4CADvD;;AAGA,IAAMH,+CACL,+BAAsDG,4CADvD;;AAGA","file":"precedenceException.js","sourcesContent":["import getWordIndices from \"../researches/passiveVoice/periphrastic/getIndicesWithRegex.js\";\nimport precedesIndex from \"./precedesIndex\";\nimport arrayToRegex from \"./createRegexFromArray.js\";\n\nimport cannotBeBetweenAuxiliaryAndParticipleFrenchFactory from \"../researches/french/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleFrench =\n\tcannotBeBetweenAuxiliaryAndParticipleFrenchFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nimport cannotBeBetweenAuxiliaryAndParticipleEnglishFactory from \"../researches/english/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleEnglish =\n\tcannotBeBetweenAuxiliaryAndParticipleEnglishFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nimport cannotBeBetweenAuxiliaryAndParticipleSpanishFactory from \"../researches/spanish/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleSpanish =\n\tcannotBeBetweenAuxiliaryAndParticipleSpanishFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\nimport cannotBeBetweenAuxiliaryAndParticipleItalianFactory from \"../researches/italian/functionWords.js\";\nconst cannotBeBetweenAuxiliaryAndParticipleItalian =\n\tcannotBeBetweenAuxiliaryAndParticipleItalianFactory().cannotBeBetweenPassiveAuxiliaryAndParticiple;\n\n/**\n * Checks whether a word from the precedence exception list occurs anywhere in the sentence part before the participle.\n * If this is the case, the sentence part is not passive.\n *\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {number} participleIndex The index of the participle.\n * @param {string} language The language of the participle.\n *\n * @returns {boolean} Returns true if a word from the precedence exception list occurs anywhere in the\n * sentence part before the participle, otherwise returns false.\n */\nexport default function( sentencePart, participleIndex, language ) {\n\tlet precedenceExceptionRegex;\n\tswitch ( language ) {\n\t\tcase \"fr\":\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleFrench );\n\t\t\tbreak;\n\t\tcase \"es\":\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleSpanish );\n\t\t\tbreak;\n\t\tcase \"it\":\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleItalian );\n\t\t\tbreak;\n\t\tcase \"en\":\n\t\tdefault:\n\t\t\tprecedenceExceptionRegex = arrayToRegex( cannotBeBetweenAuxiliaryAndParticipleEnglish );\n\t\t\tbreak;\n\t}\n\n\tconst precedenceExceptionMatch = getWordIndices( sentencePart, precedenceExceptionRegex );\n\treturn precedesIndex( precedenceExceptionMatch, participleIndex );\n}\n"]}