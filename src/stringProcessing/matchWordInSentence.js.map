{"version":3,"sources":["../../../src/stringProcessing/matchWordInSentence.js"],"names":["wordBoundaries","characterInBoundary","character","isWordInSentence","word","sentence","toLocaleLowerCase","wordWithBoundaries","occurrenceStart","search","RegExp","occurrenceEnd","length","previousCharacter","nextCharacter"],"mappings":";;;;;;;AAAA;;;;AAEA;;AACA;;;;;;AAFA,IAAMA,iBAAiB,+BAAvB;;;AAIA;;;;;;AAMA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAAUC,SAAV,EAAsB;AACjD,QAAO,wBAAUF,cAAV,EAA0BE,SAA1B,CAAP;AACA,CAFD;;AAIA;;;;;;;AAOA,IAAMC,mBAAmB,SAAnBA,gBAAmB,CAAUC,IAAV,EAAgBC,QAAhB,EAA2B;AACnD;AACAD,QAAOA,KAAKE,iBAAL,EAAP;AACAD,YAAWA,SAASC,iBAAT,EAAX;;AAEA;AACA,KAAMC,qBAAqB,+BAAiB,4BAAcH,IAAd,CAAjB,CAA3B;AACA,KAAII,kBAAkBH,SAASI,MAAT,CAAiB,IAAIC,MAAJ,CAAYH,kBAAZ,EAAgC,IAAhC,CAAjB,CAAtB;AACA;AACA,KAAKC,oBAAoB,CAAC,CAA1B,EAA8B;AAC7B,SAAO,KAAP;AACA;AACD;;;;;;AAMA,KAAKA,kBAAkB,CAAvB,EAA2B;AAC1BA,qBAAmB,CAAnB;AACA;AACD,KAAMG,gBAAgBH,kBAAkBJ,KAAKQ,MAA7C;;AAEA;AACA,KAAMC,oBAAoBZ,oBAAqBI,SAAUG,kBAAkB,CAA5B,CAArB,KAA0DA,oBAAoB,CAAxG;AACA,KAAMM,gBAAgBb,oBAAqBI,SAAUM,aAAV,CAArB,KAAoDA,kBAAkBN,SAASO,MAArG;;AAEA,QAAWC,iBAAF,IAA2BC,aAApC;AACA,CA5BD;;QA+BCb,mB,GAAAA,mB;QACAE,gB,GAAAA,gB;kBAGc;AACdF,yCADc;AAEdE;AAFc,C","file":"matchWordInSentence.js","sourcesContent":["import wordBoundariesFactory from \"../config/wordBoundaries.js\";\nconst wordBoundaries = wordBoundariesFactory();\nimport { escapeRegExp, includes } from \"lodash-es\";\nimport addWordBoundary from \"./addWordboundary.js\";\n\n/**\n * Checks whether a character is present in the list of word boundaries.\n *\n * @param {string} character The character to look for.\n * @returns {boolean} Whether or not the character is present in the list of word boundaries.\n */\nconst characterInBoundary = function( character ) {\n\treturn includes( wordBoundaries, character );\n};\n\n/**\n * Checks whether a word is present in a sentence.\n *\n * @param {string} word The word to search for in the sentence.\n * @param {string} sentence The sentence to look through.\n * @returns {boolean} Whether or not the word is present in the sentence.\n */\nconst isWordInSentence = function( word, sentence ) {\n\t// To ensure proper matching, make everything lowercase.\n\tword = word.toLocaleLowerCase();\n\tsentence = sentence.toLocaleLowerCase();\n\n\t// Escape regex in word, since we use regex characters like in abbreviations (\"e.g.\").\n\tconst wordWithBoundaries = addWordBoundary( escapeRegExp( word ) );\n\tlet occurrenceStart = sentence.search( new RegExp( wordWithBoundaries, \"ig\" ) );\n\t// Return false if no match has been found.\n\tif ( occurrenceStart === -1 ) {\n\t\treturn false;\n\t}\n\t/*\n\tIf there is a word boundary before the matched word, the regex includes this word boundary in the match.\n\tThis means that occurrenceStart is the index of the word boundary before the match. Therefore 1 has to\n\tbe added to occurrenceStart, except when there is no word boundary before the match (i.e. at the start\n\tof a sentence).\n\t */\n\tif ( occurrenceStart > 0 ) {\n\t\toccurrenceStart += 1;\n\t}\n\tconst occurrenceEnd = occurrenceStart + word.length;\n\n\t// Check if the previous and next character are word boundaries to determine if a complete word was detected\n\tconst previousCharacter = characterInBoundary( sentence[ occurrenceStart - 1 ] ) || occurrenceStart === 0;\n\tconst nextCharacter = characterInBoundary( sentence[ occurrenceEnd ] ) || occurrenceEnd === sentence.length;\n\n\treturn ( ( previousCharacter ) && ( nextCharacter ) );\n};\n\nexport {\n\tcharacterInBoundary,\n\tisWordInSentence,\n};\n\nexport default {\n\tcharacterInBoundary,\n\tisWordInSentence,\n};\n"]}