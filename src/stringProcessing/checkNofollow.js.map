{"version":3,"sources":["../../../src/stringProcessing/checkNofollow.js"],"names":["anchorHTML","linkFollow","parser","Parser","onopentag","tagName","attributes","rel","toLowerCase","split","includes","write","end"],"mappings":";;;;;;kBAWe,UAAUA,UAAV,EAAuB;AACrC,KAAIC,aAAa,UAAjB;;AAEA,KAAMC,SAAS,IAAI,qBAAWC,MAAf,CAAuB;AACrC;;;;;;;AAOAC,aAAW,mBAAUC,OAAV,EAAmBC,UAAnB,EAAgC;AAC1C,OAAKD,YAAY,GAAZ,IAAmB,CAAEC,WAAWC,GAArC,EAA2C;AAC1C;AACA;;AAED,OAAKD,WAAWC,GAAX,CAAeC,WAAf,GAA6BC,KAA7B,CAAoC,IAApC,EAA2CC,QAA3C,CAAqD,UAArD,CAAL,EAAyE;AACxET,iBAAa,UAAb;AACA;AACD;AAhBoC,EAAvB,CAAf;;AAmBAC,QAAOS,KAAP,CAAcX,UAAd;AACAE,QAAOU,GAAP;;AAEA,QAAOX,UAAP;AACA,C;;AAlCD","file":"checkNofollow.js","sourcesContent":["/** @module stringProcessing/checkNofollow */\n\n// We use an external library, which can be found here: https://github.com/fb55/htmlparser2.\nimport htmlparser from \"htmlparser2\";\n\n/**\n * Checks if a link has a `rel` attribute with a `nofollow` value. If it has, returns Nofollow, otherwise Dofollow.\n *\n * @param {string} anchorHTML The anchor HTML to check against.\n * @returns {string} Returns Dofollow or Nofollow.\n */\nexport default function( anchorHTML ) {\n\tlet linkFollow = \"Dofollow\";\n\n\tconst parser = new htmlparser.Parser( {\n\t\t/**\n\t\t * Detects if there is a `nofollow` value in the `rel` attribute of a link.\n\t\t *\n\t\t * @param {string} tagName The tag name.\n\t\t * @param {object} attributes The tag attributes with the names and values of each attribute found.\n\t\t * @returns {void}\n\t\t */\n\t\tonopentag: function( tagName, attributes ) {\n\t\t\tif ( tagName !== \"a\" || ! attributes.rel ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( attributes.rel.toLowerCase().split( /\\s/ ).includes( \"nofollow\" ) ) {\n\t\t\t\tlinkFollow = \"Nofollow\";\n\t\t\t}\n\t\t},\n\t} );\n\n\tparser.write( anchorHTML );\n\tparser.end();\n\n\treturn linkFollow;\n}\n"]}