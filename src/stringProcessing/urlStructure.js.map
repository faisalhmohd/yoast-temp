{"version":3,"sources":["../../../src/stringProcessing/urlStructure.js"],"names":["urlTokenizer","tokens","staticRegex","variableRegex","createTokenizer","token","push","addRule","UrlStructure","structure","_structure","data","reduce","url","urlPart","type","_buildVariablePart","value","urlPartConfig","hasOwnProperty","name","TypeError","onText","end","map","src","substr","length"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;;;AAKA,IAAIA,YAAJ;;AAEA;;;;;AAKA,IAAIC,eAAJ;;AAEA;;;;;AAKA,IAAMC,cAAc,SAApB;;AAEA;;;;;AAKA,IAAMC,gBAAgB,aAAtB;;AAEA;;;;;;;AAOA,SAASC,eAAT,GAA2B;AAC1BH,UAAS,EAAT;;AAEAD,gBAAe,oBAAM,UAAUK,KAAV,EAAkB;AACtCJ,SAAOK,IAAP,CAAaD,KAAb;AACA,EAFc,CAAf;;AAIAL,cAAaO,OAAb,CAAsBL,WAAtB,EAAmC,QAAnC;AACAF,cAAaO,OAAb,CAAsBJ,aAAtB,EAAqC,UAArC;AACA;;AAGD;;;;;;IAKMK,Y;AACL;;;;;;;AAOA,uBAAaC,SAAb,EAAyB;AAAA;;AACxB,OAAKC,UAAL,GAAkBD,SAAlB;AACA;;AAED;;;;;;;;;;;;2BAQUE,I,EAAO;AAAA;;AAChB,UAAO,KAAKD,UAAL,CAAgBE,MAAhB,CAAwB,UAAEC,GAAF,EAAOC,OAAP,EAAoB;AAClD,QAAK,eAAeA,QAAQC,IAA5B,EAAmC;AAClCD,eAAU,MAAKE,kBAAL,CAAyBL,IAAzB,EAA+BG,OAA/B,CAAV;AACA,KAFD,MAEO;AACNA,eAAUA,QAAQG,KAAlB;AACA;;AAED,WAAOJ,MAAMC,OAAb;AACA,IARM,EAQJ,EARI,CAAP;AASA;;AAED;;;;;;;;;;;;;;qCAWoBH,I,EAAMO,a,EAAgB;AACzC,OAAK,CAAEP,KAAKQ,cAAL,CAAqBD,cAAcE,IAAnC,CAAP,EAAmD;AAClD,UAAM,IAAIC,SAAJ,CAAe,2CAA2CH,cAAcE,IAAzD,GAAgE,GAA/E,CAAN;AACA;;AAED,UAAOT,KAAMO,cAAcE,IAApB,CAAP;AACA;;AAED;;;;;;;;;;iCAOe;AACd,UAAO,KAAKV,UAAZ;AACA;;AAED;;;;;;;;;;;0BAQgBG,G,EAAM;AACrBT;;AAEAJ,gBAAasB,MAAb,CAAqBT,GAArB;AACAb,gBAAauB,GAAb;;AAEAtB,YAASA,OAAOuB,GAAP,CAAY,UAAEnB,KAAF,EAAa;AACjC,QAAMS,UAAU;AACfC,WAAMV,MAAMU,IADG;AAEfE,YAAOZ,MAAMoB;AAFE,KAAhB;;AAKA,QAAK,eAAepB,MAAMU,IAA1B,EAAiC;AAChC;AACAD,aAAQM,IAAR,GAAeN,QAAQG,KAAR,CAAcS,MAAd,CAAsB,CAAtB,EAAyBZ,QAAQG,KAAR,CAAcU,MAAd,GAAuB,CAAhD,CAAf;AACA;;AAED,WAAOb,OAAP;AACA,IAZQ,CAAT;;AAcA,UAAO,IAAIN,YAAJ,CAAkBP,MAAlB,CAAP;AACA;;;;;;kBAGaO,Y","file":"urlStructure.js","sourcesContent":["import core from \"tokenizer2/core\";\n\n/**\n * Contains a URL tokenizer that is capable of tokenizing a URL structure string.\n *\n * @type {Object}\n */\nvar urlTokenizer;\n\n/**\n * Contains the tokens as parsed by the urlTokenizer.\n *\n * @type {Object[]}\n */\nlet tokens;\n\n/**\n * Matches static parts of a URL, because we use %% as placeholder markers we don't support percentage signs in the URL.\n *\n * @type {RegExp}\n */\nconst staticRegex = /^[^%]+$/;\n\n/**\n * Matches variable parts of a URL, format is %%placeholder%%.\n *\n * @type {RegExp}\n */\nconst variableRegex = /^%%[^%]+%%$/;\n\n/**\n * Creates a tokenizer to tokenize HTML into blocks.\n *\n * @since 1.8.0\n *\n * @returns {void}\n */\nfunction createTokenizer() {\n\ttokens = [];\n\n\turlTokenizer = core( function( token ) {\n\t\ttokens.push( token );\n\t} );\n\n\turlTokenizer.addRule( staticRegex, \"static\" );\n\turlTokenizer.addRule( variableRegex, \"variable\" );\n}\n\n\n/**\n * Represents a URL structure. Placeholders can be defined using %%placeholder%% and can later be filled using the `applyData` method.\n *\n * @since 1.8.0\n */\nclass UrlStructure {\n\t/**\n\t * Sets the structure to the passed structure.\n\t *\n\t * @since 1.8.0\n\t *\n\t * @param {Array} structure The structure of the URL.\n\t */\n\tconstructor( structure ) {\n\t\tthis._structure = structure;\n\t}\n\n\t/**\n\t * Builds a URL from this URL structure and the given data.\n\t *\n\t * @since 1.8.0\n\t *\n\t * @param {Object} data A key value store of all the variable parts of the URL structure.\n\t * @returns {string} A URL with all variables parts filled.\n\t */\n\tbuildUrl( data ) {\n\t\treturn this._structure.reduce( ( url, urlPart ) => {\n\t\t\tif ( \"variable\" === urlPart.type ) {\n\t\t\t\turlPart = this._buildVariablePart( data, urlPart );\n\t\t\t} else {\n\t\t\t\turlPart = urlPart.value;\n\t\t\t}\n\n\t\t\treturn url + urlPart;\n\t\t}, \"\" );\n\t}\n\n\t/**\n\t * Builds a URL part for a small part of the URL.\n\t *\n\t * @since 1.8.0\n\t *\n\t * @private\n\t *\n\t * @param {Object} data The data to fill the URL parts.\n\t * @param {Object} urlPartConfig The config for the URL part.\n\t * @returns {string} A URL part.\n\t */\n\t_buildVariablePart( data, urlPartConfig ) {\n\t\tif ( ! data.hasOwnProperty( urlPartConfig.name ) ) {\n\t\t\tthrow new TypeError( 'Data doesn\\'t have required property \"' + urlPartConfig.name + '\"' );\n\t\t}\n\n\t\treturn data[ urlPartConfig.name ];\n\t}\n\n\t/**\n\t * Returns the structure.\n\t *\n\t * @since 1.8.0\n\t *\n\t * @returns {Array} The structure of the URL.\n\t */\n\tgetStructure() {\n\t\treturn this._structure;\n\t}\n\n\t/**\n\t * Parses a URL for static and variable parts. Variables should be surrounded by double percentage signs.\n\t *\n\t * @since 1.8.0\n\t *\n\t * @param {string} url The URL to parse.\n\t * @returns {UrlStructure} The parsed url structure.\n\t */\n\tstatic fromUrl( url ) {\n\t\tcreateTokenizer();\n\n\t\turlTokenizer.onText( url );\n\t\turlTokenizer.end();\n\n\t\ttokens = tokens.map( ( token ) => {\n\t\t\tconst urlPart = {\n\t\t\t\ttype: token.type,\n\t\t\t\tvalue: token.src,\n\t\t\t};\n\n\t\t\tif ( \"variable\" === token.type ) {\n\t\t\t\t// Strip the %% at the start and the end of the variable URL part.\n\t\t\t\turlPart.name = urlPart.value.substr( 2, urlPart.value.length - 4 );\n\t\t\t}\n\n\t\t\treturn urlPart;\n\t\t} );\n\n\t\treturn new UrlStructure( tokens );\n\t}\n}\n\nexport default UrlStructure;\n"]}