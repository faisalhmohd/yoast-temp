{"version":3,"sources":["../../../src/stringProcessing/addWordboundary.js"],"names":["matchString","positiveLookAhead","extraWordBoundary","wordBoundary","wordBoundaryStart","wordBoundaryEnd"],"mappings":";;;;;;kBAWe,UAAUA,WAAV,EAA2E;AAAA,KAApDC,iBAAoD,uEAAhC,KAAgC;AAAA,KAAzBC,iBAAyB,uEAAL,EAAK;;AACzF,KAAIC,YAAJ,EAAkBC,iBAAlB,EAAqCC,eAArC;;AAEAF,gBAAe,gHAAwDD,iBAAxD,GAA4E,IAA3F;AACAE,qBAAoB,QAAQD,YAAR,GAAuB,SAA3C;AACA,KAAKF,iBAAL,EAAyB;AACxBI,oBAAkB,YAAYF,YAAZ,GAA2B,iBAA3B,GAA+CA,YAA/C,GAA8D,MAAhF;AACA,EAFD,MAEO;AACNE,oBAAkB,SAASF,YAAT,GAAwB,gBAAxB,GAA2CA,YAA3C,GAA0D,MAA5E;AACA;;AAED,QAAOC,oBAAoBJ,WAApB,GAAkCK,eAAzC;AACA,C","file":"addWordboundary.js","sourcesContent":["/** @module stringProcessing/addWordboundary */\n\n/**\n * Returns a string that can be used in a regex to match a matchString with word boundaries.\n *\n * @param {string} matchString The string to generate a regex string for.\n * @param {boolean} [positiveLookAhead] Boolean indicating whether or not to include a positive look ahead\n * for the word boundaries at the end.\n * @param {string} [extraWordBoundary] Extra characters to match a word boundary on.\n * @returns {string} A regex string that matches the matchString with word boundaries.\n */\nexport default function( matchString, positiveLookAhead = false, extraWordBoundary = \"\" ) {\n\tvar wordBoundary, wordBoundaryStart, wordBoundaryEnd;\n\n\twordBoundary = \"[ \\\\u00a0 \\\\n\\\\r\\\\t\\.,\\(\\)”“〝〞〟‟„\\\"+\\\\-;!¡?¿:\\/»«‹›\" + extraWordBoundary + \"<>\";\n\twordBoundaryStart = \"(^|\" + wordBoundary + \"'‘’‛`])\";\n\tif ( positiveLookAhead ) {\n\t\twordBoundaryEnd = \"($|((?=\" + wordBoundary + \"]))|((['‘’‛`])(\" + wordBoundary + \"])))\";\n\t} else {\n\t\twordBoundaryEnd = \"($|(\" + wordBoundary + \"])|((['‘’‛`])(\" + wordBoundary + \"])))\";\n\t}\n\n\treturn wordBoundaryStart + matchString + wordBoundaryEnd;\n}\n"]}