{"version":3,"sources":["../../src/snippetPreviewToggler.js"],"names":["previewModes","desktop","mobile","minimumDesktopWidth","SnippetPreviewToggler","previewMode","previewToggles","viewElement","document","getElementById","prototype","initialize","_setPreviewMode","_findElementByMode","bindClickEvent","previewToggle","addEventListener","getAttribute","removeTooltipAbility","bind","bindMouseleaveEvent","bindBlurEvent","restoreTooltipAbility","bindMouseenterEvent","bindEvents","getElementsByClassName","toggleElement","_removeActiveStates","_setActiveState","removeClass","addClass","setDesktopMode","setMobileMode","setVisibility","previewWidth","setScrollHintVisibility","_removeActiveState","setAttribute","elementToActivate"],"mappings":"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","file":"snippetPreviewToggler.js","sourcesContent":["import { forEach } from \"lodash-es\";\nimport domManipulation from \"./helpers/domManipulation.js\";\n\nvar previewModes = {\n\tdesktop: \"snippet-editor__view--desktop\",\n\tmobile: \"snippet-editor__view--mobile\",\n};\n\nvar minimumDesktopWidth = 640;\n\n/**\n * Constructs the snippet preview toggle.\n *\n * @param {string}    previewMode    The default preview mode.\n * @param {Element[]} previewToggles Array with toggle elements.\n *\n * @property {string}    previewMode    The current preview mode.\n * @property {Element[]} previewToggles The array with toggle elements.\n * @property {Element}   viewElement    The target element.\n * @constructor\n */\nvar SnippetPreviewToggler = function( previewMode, previewToggles ) {\n\tthis.previewMode      = previewMode;\n\tthis.previewToggles   = previewToggles;\n\tthis.viewElement      = document.getElementById( \"snippet-preview-view\" );\n};\n\n/**\n * Initializes the object by setting the current previewMode as the active one.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.initialize = function() {\n\tthis._setPreviewMode( this.previewMode, this._findElementByMode( this.previewMode ) );\n};\n\n/**\n * Binds a function on the click event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the click event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindClickEvent = function( previewToggle ) {\n\tpreviewToggle.addEventListener( \"click\", function() {\n\t\tthis._setPreviewMode( previewToggle.getAttribute( \"data-type\" ), previewToggle );\n\t\tthis.removeTooltipAbility( previewToggle );\n\t}.bind( this ) );\n};\n\n/**\n * Binds a function on the mouseleave event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the mouseleave event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindMouseleaveEvent = function( previewToggle ) {\n\tpreviewToggle.addEventListener( \"mouseleave\", function() {\n\t\tthis.removeTooltipAbility( previewToggle );\n\t}.bind( this ) );\n};\n\n/**\n * Binds a function on the blur event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the blur event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindBlurEvent = function( previewToggle ) {\n\tpreviewToggle.addEventListener( \"blur\", function() {\n\t\tthis.restoreTooltipAbility( previewToggle );\n\t}.bind( this ) );\n};\n\n/**\n * Binds a function on the mouseenter event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the mouseenter event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindMouseenterEvent = function( previewToggle ) {\n\tpreviewToggle.addEventListener( \"mouseenter\", function() {\n\t\tthis.restoreTooltipAbility( previewToggle );\n\t}.bind( this ) );\n};\n\n/**\n * Sets the events for the preview toggles to switch between the preview modes and handle the tooltips.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindEvents = function() {\n\tforEach( this.previewToggles, function( previewToggle ) {\n\t\tthis.bindClickEvent( previewToggle );\n\t\tthis.bindMouseleaveEvent( previewToggle );\n\t\tthis.bindBlurEvent( previewToggle );\n\t\tthis.bindMouseenterEvent( previewToggle );\n\t}.bind( this ) );\n};\n\n/**\n * Returns the element by given mode.\n *\n * @param {string} previewMode The mode used to find the element.\n * @returns {Element} The found element.\n * @private\n */\nSnippetPreviewToggler.prototype._findElementByMode = function( previewMode ) {\n\treturn document.getElementsByClassName( \"snippet-editor__view-icon-\" + previewMode )[ 0 ];\n};\n\n/**\n * Sets the preview mode.\n *\n * @param {string}  previewMode   The preview mode that has to be set.\n * @param {Element} toggleElement The element that has been triggered.\n *\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._setPreviewMode = function( previewMode, toggleElement ) {\n\tthis._removeActiveStates();\n\tthis._setActiveState( toggleElement );\n\n\tdomManipulation.removeClass( this.viewElement, previewModes[ this.previewMode ] );\n\tdomManipulation.addClass( this.viewElement, previewModes[ previewMode ] );\n\n\tthis.previewMode = previewMode;\n};\n\n/**\n * Sets the Snippet Preview Toggler to desktop mode.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setDesktopMode = function() {\n\tthis._setPreviewMode( \"desktop\", this._findElementByMode( \"desktop\" ) );\n};\n\n/**\n * Sets the Snippet Preview Toggler to mobile mode.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setMobileMode = function() {\n\tthis._setPreviewMode( \"mobile\", this._findElementByMode( \"mobile\" ) );\n};\n\n/**\n * Sets the initial view to desktop or mobile based on the width of the Snippet Preview container.\n *\n * @param {number} previewWidth the width of the Snippet Preview container.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setVisibility = function( previewWidth ) {\n\tif ( previewWidth < minimumDesktopWidth ) {\n\t\tthis.setMobileMode();\n\t\t// At this point the desktop view is scrollable: set a CSS class to show the Scroll Hint message.\n\t\tdomManipulation.addClass( this.viewElement, \"snippet-editor__view--desktop-has-scroll\" );\n\t} else {\n\t\tthis.setDesktopMode();\n\t}\n};\n\n/**\n * When the window is resized, sets the visibility of the Scroll Hint message.\n *\n * @param {number} previewWidth the width of the Snippet Preview container.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setScrollHintVisibility = function( previewWidth ) {\n\tdomManipulation.removeClass( this.viewElement, \"snippet-editor__view--desktop-has-scroll\" );\n\tif ( previewWidth < minimumDesktopWidth ) {\n\t\tdomManipulation.addClass( this.viewElement, \"snippet-editor__view--desktop-has-scroll\" );\n\t}\n};\n\n/**\n * Removes all active state for the preview toggles.\n *\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._removeActiveStates = function() {\n\tforEach( this.previewToggles, this._removeActiveState.bind( this ) );\n};\n\n/**\n * Removes the active state for the given element.\n *\n * @param {Element} previewToggle The element to remove its state for.\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._removeActiveState = function( previewToggle ) {\n\tdomManipulation.removeClass( previewToggle, \"snippet-editor__view-icon-\" + previewToggle.getAttribute( \"data-type\" ) + \"--active\" );\n\tdomManipulation.removeClass( previewToggle, \"snippet-editor__view-icon--active\" );\n\tpreviewToggle.setAttribute( \"aria-pressed\", \"false\" );\n};\n\n/**\n * Makes an element tooltip hidden.\n *\n * @param {Element} previewToggle The element on which the tooltip should be hidden.\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.removeTooltipAbility = function( previewToggle ) {\n\tdomManipulation.addClass( previewToggle, \"yoast-tooltip-hidden\" );\n};\n\n/**\n * Makes an element tooltip visible.\n *\n * @param {Element} previewToggle The element on which the tooltip should be visible.\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.restoreTooltipAbility = function( previewToggle ) {\n\tdomManipulation.removeClass( previewToggle, \"yoast-tooltip-hidden\" );\n};\n\n/**\n * Adds active state to the given element.\n *\n * @param {Element} elementToActivate The element that will be activated.\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._setActiveState = function( elementToActivate ) {\n\tdomManipulation.addClass( elementToActivate, \"snippet-editor__view-icon-\" + elementToActivate.getAttribute( \"data-type\" ) + \"--active\"  );\n\tdomManipulation.addClass( elementToActivate, \"snippet-editor__view-icon--active\"  );\n\telementToActivate.setAttribute( \"aria-pressed\", \"true\" );\n};\n\nexport default SnippetPreviewToggler;\n"]}