{"version":3,"sources":["../../../src/worker/wrapTryCatchAroundAction.js"],"names":["wrapTryCatchAroundAction","logger","action","errorMessagePrefix","error","errorMessage","name","message","stack","debug","push","join"],"mappings":";;;;;kBASwBA,wB;AATxB;;;;;;;;;AASe,SAASA,wBAAT,CAAmCC,MAAnC,EAA2CC,MAA3C,EAA6E;AAAA,KAA1BC,kBAA0B,uEAAL,EAAK;;AAC3F,QAAO,YAAe;AACrB,MAAI;AACH,UAAOD,kCAAP;AACA,GAFD,CAEE,OAAQE,KAAR,EAAgB;AACjB,OAAIC,eAAeF,qBAAqB,CAAEA,kBAAF,CAArB,GAA8C,EAAjE;;AAEA,OAAKC,MAAME,IAAN,IAAcF,MAAMG,OAAzB,EAAmC;AAClC,QAAKH,MAAMI,KAAX,EAAmB;AAClBP,YAAOQ,KAAP,CAAcL,MAAMI,KAApB;AACA;AACD;AACAH,iBAAaK,IAAb,CAAsBN,MAAME,IAA5B,UAAqCF,MAAMG,OAA3C;AACA;;AAEDF,kBAAeA,aAAaM,IAAb,CAAmB,MAAnB,CAAf;AACAV,UAAOG,KAAP,CAAcC,YAAd;AACA,UAAO,EAAED,OAAOC,YAAT,EAAP;AACA;AACD,EAlBD;AAmBA","file":"wrapTryCatchAroundAction.js","sourcesContent":["/**\n * Wraps the given action in a try-catch that logs the error message.\n *\n * @param {Logger}   logger                  The logger instance to log with.\n * @param {Function} action                  The action to safely run.\n * @param {string}   [errorMessagePrefix=\"\"] The prefix of the error message.\n *\n * @returns {Function} The wrapped action.\n */\nexport default function wrapTryCatchAroundAction( logger, action, errorMessagePrefix = \"\" ) {\n\treturn ( ...args ) => {\n\t\ttry {\n\t\t\treturn action( ...args );\n\t\t} catch ( error ) {\n\t\t\tlet errorMessage = errorMessagePrefix ? [ errorMessagePrefix ] : [];\n\n\t\t\tif ( error.name && error.message ) {\n\t\t\t\tif ( error.stack ) {\n\t\t\t\t\tlogger.debug( error.stack );\n\t\t\t\t}\n\t\t\t\t// Standard JavaScript error (e.g. when calling `throw new Error( message )`).\n\t\t\t\terrorMessage.push( `${error.name}: ${error.message}` );\n\t\t\t}\n\n\t\t\terrorMessage = errorMessage.join( \"\\n\\t\" );\n\t\t\tlogger.error( errorMessage );\n\t\t\treturn { error: errorMessage };\n\t\t}\n\t};\n}\n"]}