{"version":3,"sources":["../../src/researcher.js"],"names":["keyphraseDistribution","morphology","Researcher","paper","setPaper","defaultResearches","urlLength","wordCountInText","findKeywordInPageTitle","calculateFleschReading","getLinkStatistics","getLinks","linkCount","imageCount","altTagCount","matchKeywordInSubheadings","keywordCount","getKeywordDensity","stopWordsInKeyword","stopWordsInUrl","metaDescriptionLength","keyphraseLength","keywordCountInUrl","firstParagraph","metaDescriptionKeyword","pageTitleWidth","wordComplexity","getParagraphLength","countSentencesFromText","countSentencesFromDescription","getSubheadingTextLengths","findTransitionWords","passiveVoice","getSentenceBeginnings","relevantWords","readingTime","getTopicDensity","topicCount","sentences","functionWordsInKeyphrase","h1s","_data","customResearches","prototype","addResearch","name","research","Function","hasResearch","Object","keys","getAvailableResearches","filter","length","getResearch","addResearchData","data","getData","hasOwnProperty"],"mappings":"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","file":"researcher.js","sourcesContent":["import sentences from \"./researches/sentences\";\n\nimport { merge } from \"lodash-es\";\nimport InvalidTypeError from \"./errors/invalidType\";\nimport MissingArgument from \"./errors/missingArgument\";\nimport { isUndefined } from \"lodash-es\";\nimport { isEmpty } from \"lodash-es\";\n\n// Researches\nimport wordCountInText from \"./researches/wordCountInText.js\";\n\nimport getLinkStatistics from \"./researches/getLinkStatistics.js\";\nimport linkCount from \"./researches/countLinks.js\";\nimport getLinks from \"./researches/getLinks.js\";\nimport urlLength from \"./researches/urlIsTooLong.js\";\nimport findKeywordInPageTitle from \"./researches/findKeywordInPageTitle.js\";\nimport matchKeywordInSubheadings from \"./researches/matchKeywordInSubheadings.js\";\nimport getKeywordDensity from \"./researches/getKeywordDensity.js\";\nimport keywordCount from \"./researches/keywordCount\";\nimport stopWordsInKeyword from \"./researches/stopWordsInKeyword\";\nimport stopWordsInUrl from \"./researches/stopWordsInUrl\";\nimport calculateFleschReading from \"./researches/calculateFleschReading.js\";\nimport metaDescriptionLength from \"./researches/metaDescriptionLength.js\";\nimport imageCount from \"./researches/imageCountInText.js\";\nimport altTagCount from \"./researches/imageAltTags.js\";\nimport keyphraseLength from \"./researches/keyphraseLength\";\nimport metaDescriptionKeyword from \"./researches/metaDescriptionKeyword.js\";\nimport keywordCountInUrl from \"./researches/keywordCountInUrl\";\nimport findKeywordInFirstParagraph from \"./researches/findKeywordInFirstParagraph.js\";\nimport pageTitleWidth from \"./researches/pageTitleWidth.js\";\nimport wordComplexity from \"./researches/getWordComplexity.js\";\nimport getParagraphLength from \"./researches/getParagraphLength.js\";\nimport countSentencesFromText from \"./researches/countSentencesFromText.js\";\nimport countSentencesFromDescription from \"./researches/countSentencesFromDescription.js\";\nimport getSubheadingTextLengths from \"./researches/getSubheadingTextLengths.js\";\nimport findTransitionWords from \"./researches/findTransitionWords.js\";\nimport passiveVoice from \"./researches/getPassiveVoice.js\";\nimport getSentenceBeginnings from \"./researches/getSentenceBeginnings.js\";\nimport relevantWords from \"./researches/relevantWords\";\nimport readingTime from \"./researches/readingTime\";\nimport getTopicDensity from \"./researches/getTopicDensity\";\nimport topicCount from \"./researches/topicCount\";\nimport { keyphraseDistributionResearcher } from \"./researches/keyphraseDistribution\";\nconst keyphraseDistribution = keyphraseDistributionResearcher;\nimport { research } from \"./researches/buildKeywordForms\";\nconst morphology = research;\nimport functionWordsInKeyphrase from \"./researches/functionWordsInKeyphrase\";\nimport h1s from \"./researches/h1s\";\n\n/**\n * This contains all possible, default researches.\n * @param {Paper} paper The Paper object that is needed within the researches.\n * @constructor\n * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.\n */\nvar Researcher = function( paper ) {\n\tthis.setPaper( paper );\n\n\tthis.defaultResearches = {\n\t\turlLength: urlLength,\n\t\twordCountInText: wordCountInText,\n\t\tfindKeywordInPageTitle: findKeywordInPageTitle,\n\t\tcalculateFleschReading: calculateFleschReading,\n\t\tgetLinkStatistics: getLinkStatistics,\n\t\tgetLinks: getLinks,\n\t\tlinkCount: linkCount,\n\t\timageCount: imageCount,\n\t\taltTagCount: altTagCount,\n\t\tmatchKeywordInSubheadings: matchKeywordInSubheadings,\n\t\tkeywordCount: keywordCount,\n\t\tgetKeywordDensity: getKeywordDensity,\n\t\tstopWordsInKeyword: stopWordsInKeyword,\n\t\tstopWordsInUrl: stopWordsInUrl,\n\t\tmetaDescriptionLength: metaDescriptionLength,\n\t\tkeyphraseLength: keyphraseLength,\n\t\tkeywordCountInUrl: keywordCountInUrl,\n\t\tfirstParagraph: findKeywordInFirstParagraph,\n\t\tmetaDescriptionKeyword: metaDescriptionKeyword,\n\t\tpageTitleWidth: pageTitleWidth,\n\t\twordComplexity: wordComplexity,\n\t\tgetParagraphLength: getParagraphLength,\n\t\tcountSentencesFromText: countSentencesFromText,\n\t\tcountSentencesFromDescription: countSentencesFromDescription,\n\t\tgetSubheadingTextLengths: getSubheadingTextLengths,\n\t\tfindTransitionWords: findTransitionWords,\n\t\tpassiveVoice: passiveVoice,\n\t\tgetSentenceBeginnings: getSentenceBeginnings,\n\t\trelevantWords: relevantWords,\n\t\treadingTime: readingTime,\n\t\tgetTopicDensity: getTopicDensity,\n\t\ttopicCount: topicCount,\n\t\tsentences,\n\t\tkeyphraseDistribution: keyphraseDistribution,\n\t\tmorphology: morphology,\n\t\tfunctionWordsInKeyphrase: functionWordsInKeyphrase,\n\t\th1s: h1s,\n\t};\n\n\tthis._data = {};\n\n\tthis.customResearches = {};\n};\n\n/**\n * Set the Paper associated with the Researcher.\n * @param {Paper} paper The Paper to use within the Researcher\n * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.\n * @returns {void}\n */\nResearcher.prototype.setPaper = function( paper ) {\n\tthis.paper = paper;\n};\n\n/**\n * Add a custom research that will be available within the Researcher.\n * @param {string} name A name to reference the research by.\n * @param {function} research The function to be added to the Researcher.\n * @throws {MissingArgument} Research name cannot be empty.\n * @throws {InvalidTypeError} The research requires a valid Function callback.\n * @returns {void}\n */\nResearcher.prototype.addResearch = function( name, research ) {\n\tif ( isUndefined( name ) || isEmpty( name ) ) {\n\t\tthrow new MissingArgument( \"Research name cannot be empty\" );\n\t}\n\n\tif ( ! ( research instanceof Function ) ) {\n\t\tthrow new InvalidTypeError( \"The research requires a Function callback.\" );\n\t}\n\n\tthis.customResearches[ name ] = research;\n};\n\n/**\n * Check whether or not the research is known by the Researcher.\n * @param {string} name The name to reference the research by.\n * @returns {boolean} Whether or not the research is known by the Researcher\n */\nResearcher.prototype.hasResearch = function( name ) {\n\treturn Object.keys( this.getAvailableResearches() ).filter(\n\t\tfunction( research ) {\n\t\t\treturn research === name;\n\t\t} ).length > 0;\n};\n\n/**\n * Return all available researches.\n * @returns {Object} An object containing all available researches.\n */\nResearcher.prototype.getAvailableResearches = function() {\n\treturn merge( this.defaultResearches, this.customResearches );\n};\n\n/**\n * Return the Research by name.\n * @param {string} name The name to reference the research by.\n *\n * @returns {*} Returns the result of the research or false if research does not exist.\n * @throws {MissingArgument} Research name cannot be empty.\n */\nResearcher.prototype.getResearch = function( name ) {\n\tif ( isUndefined( name ) || isEmpty( name ) ) {\n\t\tthrow new MissingArgument( \"Research name cannot be empty\" );\n\t}\n\n\tif ( ! this.hasResearch( name ) ) {\n\t\treturn false;\n\t}\n\n\treturn this.getAvailableResearches()[ name ]( this.paper, this );\n};\n\n/**\n * Add research data to the researcher by the research name.\n *\n * @param {string} research The identifier of the research.\n * @param {Object} data     The data object.\n *\n * @returns {void}.\n */\nResearcher.prototype.addResearchData = function( research, data ) {\n\tthis._data[ research ] = data;\n};\n\n/**\n * Return the research data from a research data provider by research name.\n *\n * @param {string} research The identifier of the research.\n *\n * @returns {*} The data provided by the provider, false if the data do not exist\n */\nResearcher.prototype.getData = function( research ) {\n\tif ( this._data.hasOwnProperty( research ) ) {\n\t\treturn this._data[ research ];\n\t}\n\n\treturn false;\n};\n\nexport default Researcher;\n"]}