{"version":3,"sources":["../../../src/renderers/AssessorPresenter.js"],"names":["AssessorPresenter","args","keyword","assessor","i18n","output","targets","overall","presenterConfig","_disableMarkerButtons","_activeMarker","prototype","setKeyword","configHasProperty","property","hasOwnProperty","getIndicator","rating","className","getIndicatorColorClass","screenReaderText","getIndicatorScreenReaderText","fullText","getIndicatorFullText","screenReaderReadabilityText","getIndicatorScreenReaderReadabilityText","resultToRating","result","score","getIndividualRatings","ratings","validResults","sort","getValidResults","mappedResults","map","item","key","addRating","bind","excludeFromResults","results","exclude","unsortables","getUndefinedScores","sortables","a","b","concat","filter","indicator","text","identifier","getIdentifier","hasMarker","marker","getMarker","getOverallRating","overallScore","markAssessment","removeAllMarks","render","disableMarker","disableMarkerButtons","enableMarkerButtons","addMarkerEventHandler","container","document","getElementById","markButton","getElementsByClassName","addEventListener","renderIndividualRatings","renderOverallRating","bindMarkButtons","scores","getSpecificMarker","getPaper","outputTarget","innerHTML","disabledMarkText","dgettext","markInText","removeMarksInText","activeMarker","markerButtonsDisabled","overallRating","calculateOverallScore","overallRatingElement"],"mappings":"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","file":"AssessorPresenter.js","sourcesContent":["import { forEach } from \"lodash-es\";\nimport { isNumber } from \"lodash-es\";\nimport { isObject } from \"lodash-es\";\nimport { isUndefined } from \"lodash-es\";\nimport { difference } from \"lodash-es\";\nimport { assessmentPresenterResult as template } from \"../templates.js\";\nimport scoreToRating from \"../interpreters/scoreToRating.js\";\nimport createConfig from \"../config/presenter.js\";\n\n/**\n * Constructs the AssessorPresenter.\n *\n * @param {Object} args A list of arguments to use in the presenter.\n * @param {object} args.targets The HTML elements to render the output to.\n * @param {string} args.targets.output The HTML element to render the individual ratings out to.\n * @param {string} args.targets.overall The HTML element to render the overall rating out to.\n * @param {string} args.keyword The keyword to use for checking, when calculating the overall rating.\n * @param {SEOAssessor} args.assessor The Assessor object to retrieve assessment results from.\n * @param {Jed} args.i18n The translation object.\n *\n * @constructor\n */\nvar AssessorPresenter = function( args ) {\n\tthis.keyword = args.keyword;\n\tthis.assessor = args.assessor;\n\tthis.i18n = args.i18n;\n\tthis.output = args.targets.output;\n\tthis.overall = args.targets.overall || \"overallScore\";\n\tthis.presenterConfig = createConfig( args.i18n );\n\n\tthis._disableMarkerButtons = false;\n\n\tthis._activeMarker = false;\n};\n\n/**\n * Sets the keyword.\n *\n * @param {string} keyword The keyword to use.\n * @returns {void}\n */\nAssessorPresenter.prototype.setKeyword = function( keyword ) {\n\tthis.keyword = keyword;\n};\n\n/**\n * Checks whether or not a specific property exists in the presenter configuration.\n *\n * @param {string} property The property name to search for.\n * @returns {boolean} Whether or not the property exists.\n */\nAssessorPresenter.prototype.configHasProperty = function( property ) {\n\treturn this.presenterConfig.hasOwnProperty( property );\n};\n\n/**\n * Gets a fully formatted indicator object that can be used.\n *\n * @param {string} rating The rating to use.\n * @returns {Object} An object containing the class, the screen reader text, and the full text.\n */\nAssessorPresenter.prototype.getIndicator = function( rating ) {\n\treturn {\n\t\tclassName: this.getIndicatorColorClass( rating ),\n\t\tscreenReaderText: this.getIndicatorScreenReaderText( rating ),\n\t\tfullText: this.getIndicatorFullText( rating ),\n\t\tscreenReaderReadabilityText: this.getIndicatorScreenReaderReadabilityText( rating ),\n\t};\n};\n\n/**\n * Gets the indicator color class from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} String containing the CSS class to be used.\n */\nAssessorPresenter.prototype.getIndicatorColorClass = function( rating ) {\n\tif ( ! this.configHasProperty( rating ) ) {\n\t\treturn \"\";\n\t}\n\n\treturn this.presenterConfig[ rating ].className;\n};\n\n/**\n * Get the indicator screen reader text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the screen reader text to be used.\n */\nAssessorPresenter.prototype.getIndicatorScreenReaderText = function( rating ) {\n\tif ( ! this.configHasProperty( rating ) ) {\n\t\treturn \"\";\n\t}\n\n\treturn this.presenterConfig[ rating ].screenReaderText;\n};\n\n/**\n * Get the indicator screen reader readability text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the screen reader readability text to be used.\n */\nAssessorPresenter.prototype.getIndicatorScreenReaderReadabilityText = function( rating ) {\n\tif ( ! this.configHasProperty( rating ) ) {\n\t\treturn \"\";\n\t}\n\n\treturn this.presenterConfig[ rating ].screenReaderReadabilityText;\n};\n\n/**\n * Get the indicator full text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the full text to be used.\n */\nAssessorPresenter.prototype.getIndicatorFullText = function( rating ) {\n\tif ( ! this.configHasProperty( rating ) ) {\n\t\treturn \"\";\n\t}\n\n\treturn this.presenterConfig[ rating ].fullText;\n};\n\n/**\n * Adds a rating based on the numeric score.\n *\n * @param {Object} result Object based on the Assessment result. Requires a score property to work.\n * @returns {Object} The Assessment result object with the rating added.\n */\nAssessorPresenter.prototype.resultToRating = function( result ) {\n\tif ( ! isObject( result ) ) {\n\t\treturn \"\";\n\t}\n\n\tresult.rating = scoreToRating( result.score );\n\n\treturn result;\n};\n\n/**\n * Takes the individual assessment results, sorts and rates them.\n *\n * @returns {Object} Object containing all the individual ratings.\n */\nAssessorPresenter.prototype.getIndividualRatings = function() {\n\tvar ratings = {};\n\tvar validResults = this.sort( this.assessor.getValidResults() );\n\tvar mappedResults = validResults.map( this.resultToRating );\n\n\tforEach( mappedResults, function( item, key ) {\n\t\tratings[ key ] = this.addRating( item );\n\t}.bind( this ) );\n\n\treturn ratings;\n};\n\n/**\n * Excludes items from the results that are present in the exclude array.\n *\n * @param {Array} results Array containing the items to filter through.\n * @param {Array} exclude Array of results to exclude.\n * @returns {Array} Array containing items that remain after exclusion.\n */\nAssessorPresenter.prototype.excludeFromResults = function( results, exclude ) {\n\treturn difference( results, exclude );\n};\n\n/**\n * Sorts results based on their score property and always places items considered to be unsortable, at the top.\n *\n * @param {Array} results Array containing the results that need to be sorted.\n * @returns {Array} Array containing the sorted results.\n */\nAssessorPresenter.prototype.sort = function( results ) {\n\tvar unsortables = this.getUndefinedScores( results );\n\tvar sortables = this.excludeFromResults( results, unsortables );\n\n\tsortables.sort( function( a, b ) {\n\t\treturn a.score - b.score;\n\t} );\n\n\treturn unsortables.concat( sortables );\n};\n\n/**\n * Returns a subset of results that have an undefined score or a score set to zero.\n *\n * @param {Array} results The results to filter through.\n * @returns {Array} A subset of results containing items with an undefined score or where the score is zero.\n */\nAssessorPresenter.prototype.getUndefinedScores = function( results ) {\n\treturn results.filter( function( result ) {\n\t\treturn isUndefined( result.score ) || result.score === 0;\n\t} );\n};\n\n/**\n * Creates a rating object based on the item that is being passed.\n *\n * @param {AssessmentResult} item The item to check and create a rating object from.\n * @returns {Object} Object containing a parsed item, including a colored indicator.\n */\nAssessorPresenter.prototype.addRating = function( item ) {\n\tvar indicator = this.getIndicator( item.rating );\n\tindicator.text = item.text;\n\tindicator.identifier = item.getIdentifier();\n\n\tif ( item.hasMarker() ) {\n\t\tindicator.marker = item.getMarker();\n\t}\n\n\treturn indicator;\n};\n\n/**\n * Calculates the overall rating score based on the overall score.\n *\n * @param {Number} overallScore The overall score to use in the calculation.\n * @returns {Object} The rating based on the score.\n */\nAssessorPresenter.prototype.getOverallRating = function( overallScore ) {\n\tvar rating = 0;\n\n\tif ( this.keyword === \"\" ) {\n\t\treturn this.resultToRating( { score: rating } );\n\t}\n\n\tif ( isNumber( overallScore ) ) {\n\t\trating = ( overallScore / 10 );\n\t}\n\n\treturn this.resultToRating( { score: rating } );\n};\n\n/**\n * Mark with a given marker. This will set the active marker to the correct value.\n *\n * @param {string} identifier The identifier for the assessment/marker.\n * @param {Function} marker The marker function.\n * @returns {void}\n */\nAssessorPresenter.prototype.markAssessment = function( identifier, marker ) {\n\tif ( this._activeMarker === identifier ) {\n\t\tthis.removeAllMarks();\n\t\tthis._activeMarker = false;\n\t} else {\n\t\tmarker();\n\t\tthis._activeMarker = identifier;\n\t}\n\n\tthis.render();\n};\n\n/**\n * Disables the currently active marker in the UI.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.disableMarker = function() {\n\tthis._activeMarker = false;\n\tthis.render();\n};\n\n/**\n * Disables the marker buttons.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.disableMarkerButtons = function() {\n\tthis._disableMarkerButtons = true;\n\tthis.render();\n};\n\n/**\n * Enables the marker buttons.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.enableMarkerButtons = function() {\n\tthis._disableMarkerButtons = false;\n\tthis.render();\n};\n\n/**\n * Adds an event listener for the marker button\n *\n * @param {string} identifier The identifier for the assessment the marker belongs to.\n * @param {Function} marker The marker function that can mark the assessment in the text.\n * @returns {void}\n */\nAssessorPresenter.prototype.addMarkerEventHandler = function( identifier, marker ) {\n\tvar container = document.getElementById( this.output );\n\tvar markButton = container.getElementsByClassName( \"js-assessment-results__mark-\" + identifier )[ 0 ];\n\n\tmarkButton.addEventListener( \"click\", this.markAssessment.bind( this, identifier, marker ) );\n};\n\n/**\n * Renders out both the individual and the overall ratings.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.render = function() {\n\tthis.renderIndividualRatings();\n\tthis.renderOverallRating();\n};\n\n/**\n * Adds event handlers to the mark buttons\n *\n * @param {Array} scores The list of rendered scores.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.bindMarkButtons = function( scores ) {\n\t// Make sure the button works for every score with a marker.\n\tforEach( scores, function( score ) {\n\t\tif ( score.hasOwnProperty( \"marker\" ) ) {\n\t\t\tthis.addMarkerEventHandler( score.identifier, score.marker );\n\t\t}\n\t}.bind( this ) );\n};\n\n/**\n * Removes all marks currently on the text\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.removeAllMarks = function() {\n\tvar marker = this.assessor.getSpecificMarker();\n\n\tmarker( this.assessor.getPaper(), [] );\n};\n\n/**\n * Renders out the individual ratings.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.renderIndividualRatings = function() {\n\tvar outputTarget = document.getElementById( this.output );\n\tvar scores = this.getIndividualRatings();\n\n\toutputTarget.innerHTML = template( {\n\t\tscores: scores,\n\t\ti18n: {\n\t\t\tdisabledMarkText: this.i18n.dgettext( \"js-text-analysis\", \"Marks are disabled in current view\" ),\n\t\t\tmarkInText: this.i18n.dgettext( \"js-text-analysis\", \"Mark this result in the text\" ),\n\t\t\tremoveMarksInText: this.i18n.dgettext( \"js-text-analysis\", \"Remove marks in the text\" ),\n\t\t},\n\t\tactiveMarker: this._activeMarker,\n\t\tmarkerButtonsDisabled: this._disableMarkerButtons,\n\t} );\n\n\tthis.bindMarkButtons( scores );\n};\n\n/**\n * Renders out the overall rating.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.renderOverallRating = function() {\n\tvar overallRating = this.getOverallRating( this.assessor.calculateOverallScore() );\n\tvar overallRatingElement = document.getElementById( this.overall );\n\n\tif ( ! overallRatingElement ) {\n\t\treturn;\n\t}\n\n\toverallRatingElement.className = \"overallScore \" + this.getIndicatorColorClass( overallRating.rating );\n};\n\nexport default AssessorPresenter;\n"]}