{"version":3,"sources":["../../../../src/assessments/readability/wordComplexityAssessment.js"],"names":["recommendedValue","filterComplexity","words","word","complexity","calculateComplexity","wordCount","wordComplexity","i18n","percentage","tooComplexWords","length","hasMarks","recommendedMaximum","wordComplexityURL","score","Math","max","min","text","sprintf","dgettext","markComplexWordsInSentence","sentence","complexWords","splitWords","split","complexWord","wordIndex","replace","splitSentenceOnWhitespace","whitespace","pop","shift","wordComplexityMarker","paper","researcher","wordComplexityResults","getResearch","result","markedSentence","join","original","marked","wordComplexityAssessment","complexityResult","assessmentResult","setScore","setText","setHasMarks","identifier","getResult","isApplicable","hasText","getMarks"],"mappings":"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","file":"wordComplexityAssessment.js","sourcesContent":["import { filter, flatMap, flatten, forEach, zip } from \"lodash-es\";\n\nimport formatNumber from \"../../helpers/formatNumber\";\nimport addMark from \"../../markers/addMark\";\nimport { createAnchorOpeningTag } from \"../../helpers/shortlinker\";\nimport removeSentenceTerminators from \"../../stringProcessing/removeSentenceTerminators\";\nimport AssessmentResult from \"../../values/AssessmentResult\";\nimport Mark from \"../../values/Mark\";\n\n// The maximum recommended value is 3 syllables. With more than 3 syllables a word is considered complex.\nvar recommendedValue = 3;\n\n/**\n * Filters the words that aren't too long.\n *\n * @param {Array} words The array with words to filter on complexity.\n * @returns {Array} The filtered list with complex words.\n */\nvar filterComplexity = function( words ) {\n\treturn filter( words, function( word ) {\n\t\treturn ( word.complexity > recommendedValue );\n\t} );\n};\n\n/**\n * Calculates the complexity of the text based on the syllables in words.\n * @param {number} wordCount The number of words used.\n * @param {Array} wordComplexity The list of words with their syllable count.\n * @param {Object} i18n The object used for translations.\n * @returns {{score: number, text}} resultobject with score and text.\n */\nvar calculateComplexity = function( wordCount, wordComplexity, i18n ) {\n\tvar percentage = 0;\n\tvar tooComplexWords = filterComplexity( wordComplexity ).length;\n\n\t// Prevent division by zero errors.\n\tif ( wordCount !== 0 ) {\n\t\tpercentage = ( tooComplexWords / wordCount ) * 100;\n\t}\n\n\tpercentage = formatNumber( percentage );\n\tvar hasMarks = ( percentage > 0 );\n\tvar recommendedMaximum = 5;\n\tvar wordComplexityURL = createAnchorOpeningTag( \"https://yoa.st/difficult-words\" );\n\t// 6 is the number of scorepoints between 3, minscore and 9, maxscore. For scoring we use 10 steps. each step is 0.6\n\t// Up to 1.7 percent is for scoring a 9, higher percentages give lower scores.\n\tvar score = 9 - Math.max( Math.min( ( 0.6 ) * ( percentage - 1.7 ), 6 ), 0 );\n\tscore = formatNumber( score );\n\n\tif ( score >= 7 ) {\n\t\treturn {\n\t\t\tscore: score,\n\t\t\thasMarks: hasMarks,\n\t\t\ttext: i18n.sprintf(\n\t\t\t\ti18n.dgettext(\n\t\t\t\t\t\"js-text-analysis\",\n\n\t\t\t\t\t// Translators: %1$s expands to the percentage of complex words, %2$s expands to a link on yoast.com,\n\t\t\t\t\t// %3$d expands to the recommended maximum number of syllables,\n\t\t\t\t\t// %4$s expands to the anchor end tag, %5$s expands to the recommended maximum number of syllables.\n\t\t\t\t\t\"%1$s of the words contain %2$sover %3$s syllables%4$s, \" +\n\t\t\t\t\t\"which is less than or equal to the recommended maximum of %5$s.\" ),\n\t\t\t\tpercentage + \"%\", wordComplexityURL, recommendedValue, \"</a>\", recommendedMaximum + \"%\"  ),\n\t\t};\n\t}\n\n\treturn {\n\t\tscore: score,\n\t\thasMarks: hasMarks,\n\t\ttext: i18n.sprintf(\n\t\t\ti18n.dgettext(\n\t\t\t\t\"js-text-analysis\",\n\n\t\t\t\t// Translators: %1$s expands to the percentage of complex words, %2$s expands to a link on yoast.com,\n\t\t\t\t// %3$d expands to the recommended maximum number of syllables,\n\t\t\t\t// %4$s expands to the anchor end tag, %5$s expands to the recommended maximum number of syllables.\n\t\t\t\t\"%1$s of the words contain %2$sover %3$s syllables%4$s, \" +\n\t\t\t\t\"which is more than the recommended maximum of %5$s.\" ),\n\t\t\tpercentage + \"%\", wordComplexityURL, recommendedValue, \"</a>\", recommendedMaximum + \"%\"  ),\n\t};\n};\n\n/**\n * Marks complex words in a sentence.\n * @param {string} sentence The sentence to mark complex words in.\n * @param {Array} complexWords The array with complex words.\n * @returns {Array} All marked complex words.\n */\nvar markComplexWordsInSentence = function( sentence, complexWords ) {\n\tvar splitWords = sentence.split( /\\s+/ );\n\n\tforEach( complexWords, function( complexWord ) {\n\t\tvar wordIndex = complexWord.wordIndex;\n\n\t\tif ( complexWord.word === splitWords[ wordIndex ] ||\n\t\t\tcomplexWord.word === removeSentenceTerminators( splitWords[ wordIndex ] ) ) {\n\t\t\tsplitWords[ wordIndex ] = splitWords[ wordIndex ].replace( complexWord.word, addMark( complexWord.word ) );\n\t\t}\n\t} );\n\treturn splitWords;\n};\n\n/**\n * Splits sentence on whitespace\n * @param {string} sentence The sentence to split.\n * @returns {Array} All words from sentence. .\n */\nvar splitSentenceOnWhitespace = function( sentence ) {\n\tvar whitespace = sentence.split( /\\S+/ );\n\n\t// Drop first and last elements.\n\twhitespace.pop();\n\twhitespace.shift();\n\n\treturn whitespace;\n};\n\n/**\n * Creates markers of words that are complex.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @returns {Array} A list with markers\n */\nvar wordComplexityMarker = function( paper, researcher ) {\n\tvar wordComplexityResults = researcher.getResearch( \"wordComplexity\" );\n\n\treturn flatMap( wordComplexityResults, function( result ) {\n\t\tvar words = result.words;\n\t\tvar sentence = result.sentence;\n\n\t\tvar complexWords = filterComplexity( words );\n\n\t\tif ( complexWords.length === 0 ) {\n\t\t\treturn [];\n\t\t}\n\n\t\tvar splitWords = markComplexWordsInSentence( sentence, complexWords );\n\n\t\tvar whitespace = splitSentenceOnWhitespace( sentence );\n\n\t\t// Rebuild the sentence with the marked words.\n\t\tvar markedSentence = zip( splitWords, whitespace );\n\t\tmarkedSentence = flatten( markedSentence );\n\t\tmarkedSentence = markedSentence.join( \"\" );\n\n\t\treturn new Mark( {\n\t\t\toriginal: sentence,\n\t\t\tmarked: markedSentence,\n\t\t} );\n\t} );\n};\n\n/**\n * Execute the word complexity assessment and return a result based on the syllables in words\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {object} i18n The object used for translations\n * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n */\nvar wordComplexityAssessment = function( paper, researcher, i18n ) {\n\tvar wordComplexity = researcher.getResearch( \"wordComplexity\" );\n\twordComplexity = flatMap( wordComplexity, function( sentence ) {\n\t\treturn sentence.words;\n\t} );\n\tvar wordCount = wordComplexity.length;\n\n\tvar complexityResult = calculateComplexity( wordCount, wordComplexity, i18n );\n\tvar assessmentResult = new AssessmentResult();\n\tassessmentResult.setScore( complexityResult.score );\n\tassessmentResult.setText( complexityResult.text );\n\tassessmentResult.setHasMarks( complexityResult.hasMarks );\n\treturn assessmentResult;\n};\n\nexport default {\n\tidentifier: \"wordComplexity\",\n\tgetResult: wordComplexityAssessment,\n\tisApplicable: function( paper ) {\n\t\treturn paper.hasText();\n\t},\n\tgetMarks: wordComplexityMarker,\n};\n"]}