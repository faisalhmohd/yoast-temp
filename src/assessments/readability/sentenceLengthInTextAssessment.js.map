{"version":3,"sources":["../../../../src/assessments/readability/sentenceLengthInTextAssessment.js"],"names":["SentenceLengthInTextAssessment","config","defaultConfig","recommendedWordCount","slightlyTooMany","farTooMany","identifier","_config","paper","researcher","i18n","sentences","getResearch","percentage","calculatePercentage","score","calculateScore","assessmentResult","setScore","setText","translateScore","setHasMarks","hasText","sentenceCount","sentenceObjects","getTooLongSentences","sentenceObject","sentence","original","marked","urlTitle","urlCallToAction","sprintf","dgettext","length","tooLongTotal","countTooLongSentences"],"mappings":"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","file":"sentenceLengthInTextAssessment.js","sourcesContent":["import { map, merge } from \"lodash-es\";\n\nimport Assessment from \"../../assessment\";\nimport countTooLongSentences from \"../../assessmentHelpers/checkForTooLongSentences\";\nimport formatNumber from \"../../helpers/formatNumber\";\nimport { inRangeEndInclusive as inRange } from \"../../helpers/inRange\";\nimport addMark from \"../../markers/addMark\";\nimport { createAnchorOpeningTag } from \"../../helpers/shortlinker\";\nimport { stripIncompleteTags as stripTags } from \"../../stringProcessing/stripHTMLTags\";\nimport AssessmentResult from \"../../values/AssessmentResult\";\nimport Mark from \"../../values/Mark\";\n\n/**\n * Represents the assessment that will calculate the length of sentences in the text.\n */\nclass SentenceLengthInTextAssessment extends Assessment {\n\t/**\n\t * Sets the identifier and the config.\n\t *\n\t * @param {object} config The configuration to use.\n\t * @returns {void}\n\t */\n\tconstructor( config = {} ) {\n\t\tsuper();\n\n\t\tconst defaultConfig = {\n\t\t\trecommendedWordCount: 20,\n\t\t\tslightlyTooMany: 25,\n\t\t\tfarTooMany: 30,\n\t\t};\n\n\t\tthis.identifier = \"textSentenceLength\";\n\t\tthis._config = merge( defaultConfig, config );\n\t}\n\n\t/**\n\t * Scores the percentage of sentences including more than the recommended number of words.\n\t *\n\t * @param {Paper} paper The paper to use for the assessment.\n\t * @param {Researcher} researcher The researcher used for calling research.\n\t * @param {object} i18n The object used for translations.\n\t * @returns {AssessmentResult} The Assessment result.\n\t */\n\tgetResult( paper, researcher, i18n ) {\n\t\tconst sentences = researcher.getResearch( \"countSentencesFromText\" );\n\t\tconst percentage = this.calculatePercentage( sentences );\n\t\tconst score = this.calculateScore( percentage );\n\n\t\tconst assessmentResult = new AssessmentResult();\n\n\t\tassessmentResult.setScore( score );\n\t\tassessmentResult.setText( this.translateScore( score, percentage, i18n ) );\n\t\tassessmentResult.setHasMarks( ( percentage > 0 ) );\n\n\t\treturn assessmentResult;\n\t}\n\n\t/**\n\t * Checks whether the paper has text.\n\t *\n\t * @param {Paper} paper The paper to use for the assessment.\n\t *\n\t * @returns {boolean} True when there is text.\n\t */\n\tisApplicable( paper ) {\n\t\treturn paper.hasText();\n\t}\n\n\t/**\n\t * Mark the sentences.\n\t *\n\t * @param {Paper} paper The paper to use for the marking.\n\t * @param {Researcher} researcher The researcher to use.\n\t *\n\t * @returns {Array} Array with all the marked sentences.\n\t */\n\tgetMarks( paper, researcher ) {\n\t\tconst sentenceCount = researcher.getResearch( \"countSentencesFromText\" );\n\t\tconst sentenceObjects = this.getTooLongSentences( sentenceCount );\n\n\t\treturn map( sentenceObjects, function( sentenceObject ) {\n\t\t\tconst sentence = stripTags( sentenceObject.sentence );\n\t\t\treturn new Mark( {\n\t\t\t\toriginal: sentence,\n\t\t\t\tmarked: addMark( sentence ),\n\t\t\t} );\n\t\t} );\n\t}\n\n\t/**\n\t * Translates the score to a message the user can understand.\n\t *\n\t * @param {number} score The score.\n\t * @param {number} percentage The percentage.\n\t * @param {object} i18n The object used for translations.\n\t *\n\t * @returns {string} A string.\n\t */\n\ttranslateScore( score, percentage,  i18n ) {\n\t\tconst urlTitle = createAnchorOpeningTag( \"https://yoa.st/34v\" );\n\t\tconst urlCallToAction = createAnchorOpeningTag( \"https://yoa.st/34w\" );\n\t\tif ( score >= 7 ) {\n\t\t\treturn i18n.sprintf(\n\t\t\t\t/* Translators: %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n\t\t\t\ti18n.dgettext( \"js-text-analysis\",\n\t\t\t\t\t\"%1$sSentence length%2$s: Great!\" ),\n\t\t\t\turlTitle,\n\t\t\t\t\"</a>\"\n\t\t\t);\n\t\t}\n\n\t\treturn i18n.sprintf(\n\t\t\t/* Translators: %1$s and %6$s expand to a link on yoast.com, %2$s expands to the anchor end tag,\n\t\t\t%3$d expands to percentage of sentences, %4$s expands to the recommended maximum sentence length,\n\t\t\t%5$s expands to the recommended maximum percentage. */\n\t\t\ti18n.dgettext( \"js-text-analysis\",\n\t\t\t\t\"%1$sSentence length%2$s: %3$s of the sentences contain more than %4$s words, which is more than the recommended maximum of %5$s.\" +\n\t\t\t\" %6$sTry to shorten the sentences%2$s.\" ),\n\t\t\turlTitle,\n\t\t\t\"</a>\",\n\t\t\tpercentage + \"%\",\n\t\t\tthis._config.recommendedWordCount,\n\t\t\tthis._config.slightlyTooMany + \"%\",\n\t\t\turlCallToAction\n\t\t);\n\t}\n\n\t/**\n\t * Calculates the percentage of sentences that are too long.\n\t *\n\t * @param {Array} sentences The sentences to calculate the percentage for.\n\t * @returns {number} The calculates percentage of too long sentences.\n\t */\n\tcalculatePercentage( sentences ) {\n\t\tlet percentage = 0;\n\n\t\tif ( sentences.length !== 0 ) {\n\t\t\tconst tooLongTotal = this.countTooLongSentences( sentences );\n\n\t\t\tpercentage = formatNumber( ( tooLongTotal / sentences.length ) * 100 );\n\t\t}\n\n\t\treturn percentage;\n\t}\n\n\t/**\n\t * Calculates the score for the given percentage.\n\t *\n\t * @param {number} percentage The percentage to calculate the score for.\n\t * @returns {number} The calculated score.\n\t */\n\tcalculateScore( percentage ) {\n\t\tlet score;\n\n\t\t// Green indicator.\n\t\tif ( percentage <= this._config.slightlyTooMany ) {\n\t\t\tscore = 9;\n\t\t}\n\n\t\t// Orange indicator.\n\t\tif ( inRange( percentage, this._config.slightlyTooMany, this._config.farTooMany ) ) {\n\t\t\tscore = 6;\n\t\t}\n\n\t\t// Red indicator.\n\t\tif ( percentage > this._config.farTooMany ) {\n\t\t\tscore = 3;\n\t\t}\n\n\t\treturn score;\n\t}\n\n\t/**\n\t * Gets the sentences that are qualified as being too long.\n\t *\n\t * @param {array} sentences The sentences to filter through.\n\t * @returns {array} Array with all the sentences considered to be too long.\n\t */\n\tgetTooLongSentences( sentences ) {\n\t\treturn countTooLongSentences( sentences, this._config.recommendedWordCount );\n\t}\n\n\t/**\n\t * Get the total amount of sentences that are qualified as being too long.\n\t *\n\t * @param {Array} sentences The sentences to filter through.\n\t * @returns {Number} The amount of sentences that are considered too long.\n\t */\n\tcountTooLongSentences( sentences ) {\n\t\treturn this.getTooLongSentences( sentences ).length;\n\t}\n}\n\nexport default SentenceLengthInTextAssessment;\n"]}