{"version":3,"sources":["../../../../src/assessments/readability/sentenceBeginningsAssessment.js"],"names":["maximumConsecutiveDuplicates","availableLanguages","groupSentenceBeginnings","sentenceBeginnings","tooOften","word","count","length","total","sortedCounts","lowestCount","calculateSentenceBeginningsResult","groupedSentenceBeginnings","i18n","urlTitle","urlCallToAction","score","hasMarks","text","sprintf","dngettext","dgettext","sentenceBeginningMarker","paper","researcher","getResearch","sentenceBeginning","sentences","begin","sentence","marked","original","sentenceBeginningsAssessment","sentenceBeginningsResult","assessmentResult","setScore","setText","setHasMarks","identifier","getResult","isApplicable","isLanguageAvailable","getLocale","hasText","getMarks"],"mappings":"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","file":"sentenceBeginningsAssessment.js","sourcesContent":["import { filter, flatten, map, partition, sortBy } from \"lodash-es\";\n\nimport marker from \"../../markers/addMark\";\nimport { createAnchorOpeningTag } from \"../../helpers/shortlinker\";\nimport { stripIncompleteTags as stripTags } from \"../../stringProcessing/stripHTMLTags\";\nimport AssessmentResult from \"../../values/AssessmentResult\";\nimport Mark from \"../../values/Mark\";\n\nconst maximumConsecutiveDuplicates = 2;\n\nimport getLanguageAvailability from \"../../helpers/getLanguageAvailability.js\";\nconst availableLanguages = [ \"en\", \"de\", \"es\", \"fr\", \"nl\", \"it\", \"ru\", \"pl\", \"sv\" ];\n\n/**\n * Counts and groups the number too often used sentence beginnings and determines the lowest count within that group.\n * @param {array} sentenceBeginnings The array containing the objects containing the beginning words and counts.\n * @returns {object} The object containing the total number of too often used beginnings and the lowest count within those.\n */\nconst groupSentenceBeginnings = function( sentenceBeginnings ) {\n\tconst tooOften = partition( sentenceBeginnings, function( word ) {\n\t\treturn word.count > maximumConsecutiveDuplicates;\n\t} );\n\n\tif ( tooOften[ 0 ].length === 0 ) {\n\t\treturn { total: 0 };\n\t}\n\n\tconst sortedCounts = sortBy( tooOften[ 0 ], function( word ) {\n\t\treturn word.count;\n\t} );\n\n\treturn { total: tooOften[ 0 ].length, lowestCount: sortedCounts[ 0 ].count };\n};\n\n/**\n * Calculates the score based on sentence beginnings.\n * @param {object} groupedSentenceBeginnings The object with grouped sentence beginnings.\n * @param {object} i18n The object used for translations.\n * @returns {{score: number, text: string, hasMarks: boolean}} result object with score and text.\n */\nconst calculateSentenceBeginningsResult = function( groupedSentenceBeginnings, i18n ) {\n\tconst urlTitle = createAnchorOpeningTag( \"https://yoa.st/35f\" );\n\tconst urlCallToAction = createAnchorOpeningTag( \"https://yoa.st/35g\" );\n\n\tif ( groupedSentenceBeginnings.total > 0 ) {\n\t\treturn {\n\t\t\tscore: 3,\n\t\t\thasMarks: true,\n\t\t\ttext: i18n.sprintf(\n\t\t\t\t/* Translators: %1$s and %5$s expand to a link on yoast.com, %2$s expands to the anchor end tag,\n\t\t\t\t%3$d expands to the number of consecutive sentences starting with the same word,\n\t\t\t\t%4$d expands to the number of instances where 3 or more consecutive sentences start with the same word. */\n\t\t\t\ti18n.dngettext(\n\t\t\t\t\t\"js-text-analysis\",\n\t\t\t\t\t\"%1$sConsecutive sentences%2$s: The text contains %3$d consecutive sentences starting with the same word.\" +\n\t\t\t\t\t\" %5$sTry to mix things up%2$s!\", \"%1$sConsecutive sentences%2$s: The text contains %4$d instances where\" +\n\t\t\t\t\t\" %3$d or more consecutive sentences start with the same word. %5$sTry to mix things up%2$s!\",\n\t\t\t\t\tgroupedSentenceBeginnings.total\n\t\t\t\t),\n\t\t\t\turlTitle,\n\t\t\t\t\"</a>\",\n\t\t\t\tgroupedSentenceBeginnings.lowestCount,\n\t\t\t\tgroupedSentenceBeginnings.total,\n\t\t\t\turlCallToAction\n\t\t\t),\n\t\t};\n\t}\n\treturn {\n\t\tscore: 9,\n\t\thasMarks: false,\n\t\ttext: i18n.sprintf(\n\t\t\t/* Translators:  %1$s expands to a link on yoast.com, %2$s expands to the anchor end tag */\n\t\t\ti18n.dgettext( \"js-text-analysis\",\n\t\t\t\t\"%1$sConsecutive sentences%2$s: There is enough variety in your sentences. That's great!\" ),\n\t\t\turlTitle,\n\t\t\t\"</a>\"\n\t\t),\n\t};\n};\n\n/**\n * Marks all consecutive sentences with the same beginnings.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {object} All marked sentences.\n */\nconst sentenceBeginningMarker = function( paper, researcher ) {\n\tlet sentenceBeginnings = researcher.getResearch( \"getSentenceBeginnings\" );\n\tsentenceBeginnings = filter( sentenceBeginnings, function( sentenceBeginning ) {\n\t\treturn sentenceBeginning.count > maximumConsecutiveDuplicates;\n\t} );\n\n\tconst sentences = map( sentenceBeginnings, function( begin ) {\n\t\treturn begin.sentences;\n\t} );\n\n\treturn map( flatten( sentences ), function( sentence ) {\n\t\tsentence = stripTags( sentence );\n\t\tconst marked = marker( sentence );\n\t\treturn new Mark( {\n\t\t\toriginal: sentence,\n\t\t\tmarked: marked,\n\t\t} );\n\t} );\n};\n\n/**\n * Scores the repetition of sentence beginnings in consecutive sentences.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} The Assessment result\n */\nconst sentenceBeginningsAssessment = function( paper, researcher, i18n ) {\n\tconst sentenceBeginnings = researcher.getResearch( \"getSentenceBeginnings\" );\n\tconst groupedSentenceBeginnings = groupSentenceBeginnings( sentenceBeginnings );\n\tconst sentenceBeginningsResult = calculateSentenceBeginningsResult( groupedSentenceBeginnings, i18n );\n\tconst assessmentResult = new AssessmentResult();\n\n\tassessmentResult.setScore( sentenceBeginningsResult.score );\n\tassessmentResult.setText( sentenceBeginningsResult.text );\n\tassessmentResult.setHasMarks( sentenceBeginningsResult.hasMarks );\n\treturn assessmentResult;\n};\n\nexport default {\n\tidentifier: \"sentenceBeginnings\",\n\tgetResult: sentenceBeginningsAssessment,\n\tisApplicable: function( paper ) {\n\t\tconst isLanguageAvailable = getLanguageAvailability( paper.getLocale(), availableLanguages );\n\t\treturn ( isLanguageAvailable && paper.hasText() );\n\t},\n\tgetMarks: sentenceBeginningMarker,\n};\n\n"]}