{"version":3,"sources":["../../src/pluggable.js"],"names":["Pluggable","app","loaded","preloadThreshold","plugins","modifications","customTests","setTimeout","_pollLoadingPlugins","bind","prototype","_registerPlugin","pluginName","options","console","error","_validateUniqueness","_ready","status","_reloaded","refresh","_registerModification","modification","callable","priority","_validateOrigin","prio","callableObject","origin","push","_registerTest","_registerAssessment","assessor","name","assessment","addAssessment","pollTime","_allReady","pluginsLoaded","_pollTimeExceeded","allReady","plugin","_applyModifications","data","context","callChain","Array","length","_stripIllegalModifications","sort","a","b","newData","_addPluginTests","analyzer","map","customTest","_addPluginTest","pluginTest","addAnalysis","analysis","analyzeScorer","addScoring","scoring","index"],"mappings":"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","file":"pluggable.js","sourcesContent":["import { isUndefined } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\nimport { reduce } from \"lodash-es\";\nimport { isString } from \"lodash-es\";\nimport { isObject } from \"lodash-es\";\nimport InvalidTypeError from \"./errors/invalidType\";\n\n/**\n * The plugins object takes care of plugin registrations, preloading and managing data modifications.\n *\n * A plugin for YoastSEO.js is basically a piece of JavaScript that hooks into YoastSEO.js by registering modifications.\n * In order to do so, it must first register itself as a plugin with YoastSEO.js. To keep our content analysis fast, we\n * don't allow asynchronous modifications. That's why we require plugins to preload all data they need in order to modify\n * the content. If plugins need to preload data, they can first register, then preload using AJAX and call `ready` once\n * preloaded.\n *\n * To minimize client side memory usage, we request plugins to preload as little data as possible. If you need to dynamically\n * fetch more data in the process of content creation, you can reload your data set and let YoastSEO.js know you've reloaded\n * by calling `reloaded`.\n */\n\n/**\n * Setup Pluggable and set its default values.\n *\n * @constructor\n * @param       {App}       app                 The App object to attach to.\n * @property    {number}    preloadThreshold\tThe maximum time plugins are allowed to preload before we load our content analysis.\n * @property    {object}    plugins             The plugins that have been registered.\n * @property    {object}    modifications \t    The modifications that have been registered. Every modification contains an array with callables.\n * @property    {Array}     customTests         All tests added by plugins.\n */\nvar Pluggable = function( app ) {\n\tthis.app = app;\n\tthis.loaded = false;\n\tthis.preloadThreshold = 3000;\n\tthis.plugins = {};\n\tthis.modifications = {};\n\tthis.customTests = [];\n\n\t// Allow plugins 1500 ms to register before we start polling their\n\tsetTimeout( this._pollLoadingPlugins.bind( this ), 1500 );\n};\n\n//  ***** DSL IMPLEMENTATION ***** //\n\n/**\n * Register a plugin with YoastSEO. A plugin can be declared \"ready\" right at registration or later using `this.ready`.\n *\n * @param {string}  pluginName      The name of the plugin to be registered.\n * @param {object}  options         The options passed by the plugin.\n * @param {string}  options.status  The status of the plugin being registered. Can either be \"loading\" or \"ready\".\n * @returns {boolean}               Whether or not the plugin was successfully registered.\n */\nPluggable.prototype._registerPlugin = function( pluginName, options ) {\n\tif ( typeof pluginName !== \"string\" ) {\n\t\tconsole.error( \"Failed to register plugin. Expected parameter `pluginName` to be a string.\" );\n\t\treturn false;\n\t}\n\n\tif ( ! isUndefined( options ) && typeof options !== \"object\" ) {\n\t\tconsole.error( \"Failed to register plugin \" + pluginName + \". Expected parameters `options` to be a object.\" );\n\t\treturn false;\n\t}\n\n\tif ( this._validateUniqueness( pluginName ) === false ) {\n\t\tconsole.error( \"Failed to register plugin. Plugin with name \" + pluginName + \" already exists\" );\n\t\treturn false;\n\t}\n\n\tthis.plugins[ pluginName ] = options;\n\n\treturn true;\n};\n\n/**\n * Declare a plugin \"ready\". Use this if you need to preload data with AJAX.\n *\n * @param {string} pluginName\tThe name of the plugin to be declared as ready.\n * @returns {boolean}           Whether or not the plugin was successfully declared ready.\n */\nPluggable.prototype._ready = function( pluginName ) {\n\tif ( typeof pluginName !== \"string\" ) {\n\t\tconsole.error( \"Failed to modify status for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\" );\n\t\treturn false;\n\t}\n\n\tif ( isUndefined( this.plugins[ pluginName ] ) ) {\n\t\tconsole.error( \"Failed to modify status for plugin \" + pluginName + \". The plugin was not properly registered.\" );\n\t\treturn false;\n\t}\n\n\tthis.plugins[ pluginName ].status = \"ready\";\n\n\treturn true;\n};\n\n/**\n * Used to declare a plugin has been reloaded. If an analysis is currently running. We will reset it to ensure running the latest modifications.\n *\n * @param {string} pluginName   The name of the plugin to be declared as reloaded.\n * @returns {boolean}           Whether or not the plugin was successfully declared as reloaded.\n */\nPluggable.prototype._reloaded = function( pluginName ) {\n\tif ( typeof pluginName !== \"string\" ) {\n\t\tconsole.error( \"Failed to reload Content Analysis for \" + pluginName + \". Expected parameter `pluginName` to be a string.\" );\n\t\treturn false;\n\t}\n\n\tif ( isUndefined( this.plugins[ pluginName ] ) ) {\n\t\tconsole.error( \"Failed to reload Content Analysis for plugin \" + pluginName + \". The plugin was not properly registered.\" );\n\t\treturn false;\n\t}\n\n\tthis.app.refresh();\n\treturn true;\n};\n\n/**\n * Enables hooking a callable to a specific data filter supported by YoastSEO. Can only be performed for plugins that have finished loading.\n *\n * @param {string}      modification\tThe name of the filter\n * @param {function}    callable \t    The callable\n * @param {string}      pluginName \t    The plugin that is registering the modification.\n * @param {number}      priority\t    (optional) Used to specify the order in which the callables associated with a particular filter are called.\n * \t\t\t\t\t\t\t\t\t    Lower numbers correspond with earlier execution.\n * @returns {boolean}                   Whether or not applying the hook was successfull.\n */\nPluggable.prototype._registerModification = function( modification, callable, pluginName, priority ) {\n\tif ( typeof modification !== \"string\" ) {\n\t\tconsole.error( \"Failed to register modification for plugin \" + pluginName + \". Expected parameter `modification` to be a string.\" );\n\t\treturn false;\n\t}\n\n\tif ( typeof callable !== \"function\" ) {\n\t\tconsole.error( \"Failed to register modification for plugin \" + pluginName + \". Expected parameter `callable` to be a function.\" );\n\t\treturn false;\n\t}\n\n\tif ( typeof pluginName !== \"string\" ) {\n\t\tconsole.error( \"Failed to register modification for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\" );\n\t\treturn false;\n\t}\n\n\t// Validate origin\n\tif ( this._validateOrigin( pluginName ) === false ) {\n\t\tconsole.error( \"Failed to register modification for plugin \" + pluginName + \". The integration has not finished loading yet.\" );\n\t\treturn false;\n\t}\n\n\t// Default priority to 10\n\tvar prio = typeof priority === \"number\" ?  priority : 10;\n\n\tvar callableObject = {\n\t\tcallable: callable,\n\t\torigin: pluginName,\n\t\tpriority: prio,\n\t};\n\n\t// Make sure modification is defined on modifications object\n\tif ( isUndefined( this.modifications[ modification ] ) ) {\n\t\tthis.modifications[ modification ] = [];\n\t}\n\n\tthis.modifications[ modification ].push( callableObject );\n\n\treturn true;\n};\n\n/**\n * Register test for a specific plugin\n *\n * @returns {void}\n *\n * @deprecated\n */\nPluggable.prototype._registerTest = function() {\n\tconsole.error( \"This function is deprecated, please use _registerAssessment\" );\n};\n\n/**\n * Register an assessment for a specific plugin\n *\n * @param {object} assessor The assessor object where the assessments needs to be added.\n * @param {string} name The name of the assessment.\n * @param {function} assessment The function to run as an assessment.\n * @param {string} pluginName The name of the plugin associated with the assessment.\n * @returns {boolean} Whether registering the assessment was successful.\n * @private\n */\nPluggable.prototype._registerAssessment = function( assessor, name, assessment, pluginName ) {\n\tif ( ! isString( name ) ) {\n\t\tthrow new InvalidTypeError( \"Failed to register test for plugin \" + pluginName + \". Expected parameter `name` to be a string.\" );\n\t}\n\n\tif ( ! isObject( assessment ) ) {\n\t\tthrow new InvalidTypeError( \"Failed to register assessment for plugin \" + pluginName +\n\t\t\t\". Expected parameter `assessment` to be a function.\" );\n\t}\n\n\tif ( ! isString( pluginName ) ) {\n\t\tthrow new InvalidTypeError( \"Failed to register assessment for plugin \" + pluginName +\n\t\t\t\". Expected parameter `pluginName` to be a string.\" );\n\t}\n\n\t// Prefix the name with the pluginName so the test name is always unique.\n\tname = pluginName + \"-\" + name;\n\n\tassessor.addAssessment( name, assessment );\n\n\treturn true;\n};\n\n// ***** PRIVATE HANDLERS *****//\n\n/**\n * Poller to handle loading of plugins. Plugins can register with our app to let us know they are going to hook into our Javascript. They are allowed\n * 5 seconds of pre-loading time to fetch all the data they need to be able to perform their data modifications. We will only apply data modifications\n * from plugins that have declared ready within the pre-loading time in order to safeguard UX and data integrity.\n *\n * @param   {number} pollTime (optional) The accumulated time to compare with the pre-load threshold.\n * @returns {void}\n * @private\n */\nPluggable.prototype._pollLoadingPlugins = function( pollTime ) {\n\tpollTime = isUndefined( pollTime ) ? 0 : pollTime;\n\tif ( this._allReady() === true ) {\n\t\tthis.loaded = true;\n\t\tthis.app.pluginsLoaded();\n\t} else if ( pollTime >= this.preloadThreshold ) {\n\t\tthis._pollTimeExceeded();\n\t} else {\n\t\tpollTime += 50;\n\t\tsetTimeout( this._pollLoadingPlugins.bind( this, pollTime ), 50 );\n\t}\n};\n\n/**\n * Checks if all registered plugins have finished loading\n *\n * @returns {boolean} Whether or not all registered plugins are loaded.\n * @private\n */\nPluggable.prototype._allReady = function() {\n\treturn reduce( this.plugins, function( allReady, plugin ) {\n\t\treturn allReady && plugin.status === \"ready\";\n\t}, true );\n};\n\n/**\n * Removes the plugins that were not loaded within time and calls `pluginsLoaded` on the app.\n *\n * @returns {void}\n * @private\n */\nPluggable.prototype._pollTimeExceeded = function() {\n\tforEach( this.plugins, function( plugin, pluginName ) {\n\t\tif ( ! isUndefined( plugin.options ) && plugin.options.status !== \"ready\" ) {\n\t\t\tconsole.error( \"Error: Plugin \" + pluginName + \". did not finish loading in time.\" );\n\t\t\tdelete this.plugins[ pluginName ];\n\t\t}\n\t} );\n\tthis.loaded = true;\n\tthis.app.pluginsLoaded();\n};\n\n/**\n * Calls the callables added to a modification hook. See the YoastSEO.js Readme for a list of supported modification hooks.\n *\n * @param\t{string}    modification\tThe name of the filter\n * @param   {*}         data \t\t    The data to filter\n * @param   {*}         context\t\t    (optional) Object for passing context parameters to the callable.\n * @returns {*} \t\t                The filtered data\n * @private\n */\nPluggable.prototype._applyModifications = function( modification, data, context ) {\n\tvar callChain = this.modifications[ modification ];\n\n\tif ( callChain instanceof Array && callChain.length > 0 ) {\n\t\tcallChain = this._stripIllegalModifications( callChain );\n\n\t\tcallChain.sort( function( a, b ) {\n\t\t\treturn a.priority - b.priority;\n\t\t} );\n\t\tforEach( callChain, function( callableObject ) {\n\t\t\tvar callable = callableObject.callable;\n\t\t\tvar newData = callable( data, context );\n\t\t\tif ( typeof newData === typeof data ) {\n\t\t\t\tdata = newData;\n\t\t\t} else {\n\t\t\t\tconsole.error( \"Modification with name \" + modification + \" performed by plugin with name \" +\n\t\t\t\tcallableObject.origin +\n\t\t\t\t\" was ignored because the data that was returned by it was of a different type than the data we had passed it.\" );\n\t\t\t}\n\t\t} );\n\t}\n\treturn data;\n};\n\n/**\n * Adds new tests to the analyzer and it's scoring object.\n *\n * @param {YoastSEO.Analyzer} analyzer The analyzer object to add the tests to\n * @returns {void}\n * @private\n */\nPluggable.prototype._addPluginTests = function( analyzer ) {\n\tthis.customTests.map( function( customTest ) {\n\t\tthis._addPluginTest( analyzer, customTest );\n\t}, this );\n};\n\n/**\n * Adds one new test to the analyzer and it's scoring object.\n *\n * @param {YoastSEO.Analyzer} analyzer              The analyzer that the test will be added to.\n * @param {Object}            pluginTest            The test to be added.\n * @param {string}            pluginTest.name       The name of the test.\n * @param {function}          pluginTest.callable   The function associated with the test.\n * @param {function}          pluginTest.analysis   The function associated with the analyzer.\n * @param {Object}            pluginTest.scoring    The scoring object to be used.\n * @returns {void}\n * @private\n */\nPluggable.prototype._addPluginTest = function( analyzer, pluginTest ) {\n\tanalyzer.addAnalysis( {\n\t\tname: pluginTest.name,\n\t\tcallable: pluginTest.analysis,\n\t} );\n\n\tanalyzer.analyzeScorer.addScoring( {\n\t\tname: pluginTest.name,\n\t\tscoring: pluginTest.scoring,\n\t} );\n};\n\n/**\n * Strips modifications from a callChain if they were not added with a valid origin.\n *\n * @param   {Array} callChain\t The callChain that contains items with possible invalid origins.\n * @returns {Array} callChain \t The stripped version of the callChain.\n * @private\n */\nPluggable.prototype._stripIllegalModifications = function( callChain ) {\n\tforEach( callChain, function( callableObject, index ) {\n\t\tif ( this._validateOrigin( callableObject.origin ) === false ) {\n\t\t\tdelete callChain[ index ];\n\t\t}\n\t}.bind( this ) );\n\n\treturn callChain;\n};\n\n/**\n * Validates if origin of a modification has been registered and finished preloading.\n *\n * @param \t{string}    pluginName      The name of the plugin that needs to be validated.\n * @returns {boolean}                   Whether or not the origin is valid.\n * @private\n */\nPluggable.prototype._validateOrigin = function( pluginName ) {\n\tif ( this.plugins[ pluginName ].status !== \"ready\" ) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n * Validates if registered plugin has a unique name.\n *\n * @param \t{string}    pluginName      The name of the plugin that needs to be validated for uniqueness.\n * @returns {boolean}                   Whether or not the plugin has a unique name.\n * @private\n */\nPluggable.prototype._validateUniqueness = function( pluginName ) {\n\tif ( ! isUndefined( this.plugins[ pluginName ] ) ) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nexport default Pluggable;\n"]}