{"version":3,"sources":["../../../src/helpers/syllableCountStep.js"],"names":["SyllableCountStep","syllableRegex","_hasRegex","_regex","_multiplier","createRegex","prototype","hasRegex","fragments","countModifier","getRegex","countSyllables","word","match","length"],"mappings":";;;;;;AAAA;;AAEA;;;;;;AAEA;;;;;;AAMA,IAAIA,oBAAoB,SAApBA,iBAAoB,CAAUC,aAAV,EAA0B;AACjD,OAAKC,SAAL,GAAiB,KAAjB;AACA,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,WAAL,GAAmB,EAAnB;AACA,OAAKC,WAAL,CAAkBJ,aAAlB;AACA,CALD;;AAOA;;;;;AAKAD,kBAAkBM,SAAlB,CAA4BC,QAA5B,GAAuC,YAAW;AACjD,SAAO,KAAKL,SAAZ;AACA,CAFD;;AAIA;;;;;;AAMAF,kBAAkBM,SAAlB,CAA4BD,WAA5B,GAA0C,UAAUJ,aAAV,EAA0B;AACnE,MAAK,CAAE,2BAAaA,aAAb,CAAF,IAAkC,CAAE,2BAAaA,cAAcO,SAA3B,CAAzC,EAAkF;AACjF,SAAKN,SAAL,GAAiB,IAAjB;AACA,SAAKC,MAAL,GAAc,oCAAcF,cAAcO,SAA5B,EAAuC,IAAvC,CAAd;AACA,SAAKJ,WAAL,GAAmBH,cAAcQ,aAAjC;AACA;AACD,CAND;;AAQA;;;;;AAKAT,kBAAkBM,SAAlB,CAA4BI,QAA5B,GAAuC,YAAW;AACjD,SAAO,KAAKP,MAAZ;AACA,CAFD;;AAIA;;;;;;;AAOAH,kBAAkBM,SAAlB,CAA4BK,cAA5B,GAA6C,UAAUC,IAAV,EAAiB;AAC7D,MAAK,KAAKV,SAAV,EAAsB;AACrB,QAAIW,QAAQD,KAAKC,KAAL,CAAY,KAAKV,MAAjB,KAA6B,EAAzC;AACA,WAAOU,MAAMC,MAAN,GAAe,KAAKV,WAA3B;AACA;AACD,SAAO,CAAP;AACA,CAND;;kBAQeJ,iB","file":"syllableCountStep.js","sourcesContent":["import { isUndefined } from \"lodash-es\";\n\nimport arrayToRegex from \"../stringProcessing/createRegexFromArray.js\";\n\n/**\n * Constructs a language syllable regex that contains a regex for matching syllable exclusion.\n *\n * @param {object} syllableRegex The object containing the syllable exclusions.\n * @constructor\n */\nvar SyllableCountStep = function( syllableRegex ) {\n\tthis._hasRegex = false;\n\tthis._regex = \"\";\n\tthis._multiplier = \"\";\n\tthis.createRegex( syllableRegex );\n};\n\n/**\n * Returns if a valid regex has been set.\n *\n * @returns {boolean} True if a regex has been set, false if not.\n */\nSyllableCountStep.prototype.hasRegex = function() {\n\treturn this._hasRegex;\n};\n\n/**\n * Creates a regex based on the given syllable exclusions, and sets the multiplier to use.\n *\n * @param {object} syllableRegex The object containing the syllable exclusions and multiplier.\n * @returns {void}\n */\nSyllableCountStep.prototype.createRegex = function( syllableRegex ) {\n\tif ( ! isUndefined( syllableRegex ) && ! isUndefined( syllableRegex.fragments ) ) {\n\t\tthis._hasRegex = true;\n\t\tthis._regex = arrayToRegex( syllableRegex.fragments, true );\n\t\tthis._multiplier = syllableRegex.countModifier;\n\t}\n};\n\n/**\n * Returns the stored regular expression.\n *\n * @returns {RegExp} The stored regular expression.\n */\nSyllableCountStep.prototype.getRegex = function() {\n\treturn this._regex;\n};\n\n/**\n * Matches syllable exclusions in a given word and the returns the number found multiplied with the\n * given multiplier.\n *\n * @param {String} word The word to match for syllable exclusions.\n * @returns {number} The amount of syllables found.\n */\nSyllableCountStep.prototype.countSyllables = function( word ) {\n\tif ( this._hasRegex ) {\n\t\tvar match = word.match( this._regex ) || [];\n\t\treturn match.length * this._multiplier;\n\t}\n\treturn 0;\n};\n\nexport default SyllableCountStep;\n"]}