{"version":3,"sources":["../../../../src/helpers/shortlinker/Shortlinker.js"],"names":["Shortlinker","config","configure","_config","params","url","link","encodeURI","queryString","createQueryString","append","Object","keys","map","encodeURIComponent","key","join"],"mappings":";;;;;;;;;;;;AAAA;;;IAGqBA,W;AACpB;;;;;AAKA,wBAA2B;AAAA,MAAdC,MAAc,uEAAL,EAAK;;AAAA;;AAC1B,OAAKC,SAAL,CAAgBD,MAAhB;AACA;;AAED;;;;;;;;;;;;4BAQWA,M,EAAS;AACnB,QAAKE,OAAL;AACCC,YAAQ;AADT,MAEIH,MAFJ;AAIA;;AAED;;;;;;;;;;;;AAaA;;;;;;;;yBAQQI,G,EAAmB;AAAA,OAAdD,MAAc,uEAAL,EAAK;;AAC1B,OAAIE,OAAOC,UAAWF,GAAX,CAAX;AACA,OAAMG,cAAcR,YAAYS,iBAAZ,cAChB,KAAKN,OAAL,CAAaC,MADG,EAEhBA,MAFgB,EAApB;;AAKA,OAAKI,gBAAgB,EAArB,EAA0B;AACzBF,YAAQ,MAAME,WAAd;AACA;;AAED,UAAOF,IAAP;AACA;;AAED;;;;;;;;;;;yCAQwBD,G,EAAmB;AAAA,OAAdD,MAAc,uEAAL,EAAK;;AAC1C,wBAAoB,KAAKM,MAAL,CAAaL,GAAb,EAAkBD,MAAlB,CAApB;AACA;;;oCAtCyBA,M,EAAS;AAClC,UAAOO,OAAOC,IAAP,CAAaR,MAAb,EACLS,GADK,CACA;AAAA,WAAWC,mBAAoBC,GAApB,CAAX,SAA0CD,mBAAoBV,OAAQW,GAAR,CAApB,CAA1C;AAAA,IADA,EAELC,IAFK,CAEC,GAFD,CAAP;AAGA;;;;;;kBApCmBhB,W","file":"Shortlinker.js","sourcesContent":["/**\n * Shortlinker to handle appending parameters to a link.\n */\nexport default class Shortlinker {\n\t/**\n\t * Initialize the Shortlinker class.\n\t *\n\t * @param {Object} [config={}] Optional configuration.\n\t */\n\tconstructor( config = {} ) {\n\t\tthis.configure( config );\n\t}\n\n\t/**\n\t * Saves the passed configuration.\n\t *\n\t * @param {Object} config             The configuration.\n\t * @param {Object} [config.params={}] The default params to create the query string with.\n\t *\n\t * @returns {void}\n\t */\n\tconfigure( config ) {\n\t\tthis._config = {\n\t\t\tparams: {},\n\t\t\t...config,\n\t\t};\n\t}\n\n\t/**\n\t * Creates a query string from a params object.\n\t *\n\t * @param {Object} params Params for in the query string.\n\t *\n\t * @returns {string} URI encoded query string.\n\t */\n\tstatic createQueryString( params ) {\n\t\treturn Object.keys( params )\n\t\t\t.map( key => `${ encodeURIComponent( key ) }=${ encodeURIComponent( params[ key ] ) }` )\n\t\t\t.join( \"&\" );\n\t}\n\n\t/**\n\t * Creates a link by combining the params from the config and appending them to the url.\n\t *\n\t * @param {string} url         The base url.\n\t * @param {Object} [params={}] Optional params for in the url.\n\t *\n\t * @returns {string} The url with query string.\n\t */\n\tappend( url, params = {} ) {\n\t\tlet link = encodeURI( url );\n\t\tconst queryString = Shortlinker.createQueryString( {\n\t\t\t...this._config.params,\n\t\t\t...params,\n\t\t} );\n\n\t\tif ( queryString !== \"\" ) {\n\t\t\tlink += \"?\" + queryString;\n\t\t}\n\n\t\treturn link;\n\t}\n\n\t/**\n\t * Creates an anchor opening tag; uses the append function to create the url.\n\t *\n\t * @param {string} url         The base url.\n\t * @param {Object} [params={}] Optional params for in the url.\n\t *\n\t * @returns {string} The anchor opening tag.\n\t */\n\tcreateAnchorOpeningTag( url, params = {} ) {\n\t\treturn `<a href='${ this.append( url, params ) }' target='_blank'>`;\n\t}\n}\n"]}