{"version":3,"sources":["../../../src/helpers/types.js"],"names":["getType","subject","Array","isArray","isSameType","expectedType","passedType"],"mappings":";;;;;;;;AAAA;;;;;;AAMA,IAAIA,UAAU,SAAVA,OAAU,CAAUC,OAAV,EAAoB;AACjC,MAAKC,MAAMC,OAAN,CAAeF,OAAf,CAAL,EAAgC;AAC/B,WAAO,OAAP;AACA;AACD,gBAAcA,OAAd,yCAAcA,OAAd;AACA,CALD;;AAOA;;;;;;;AAOA,IAAIG,aAAa,SAAbA,UAAa,CAAUH,OAAV,EAAmBI,YAAnB,EAAkC;AAClD,MAAIC,aAAaN,QAASC,OAAT,CAAjB;AACA,SAAOK,eAAeD,YAAtB;AACA,CAHD;;QAMCL,O,GAAAA,O;QACAI,U,GAAAA,U;kBAGc;AACdJ,WAASA,OADK;AAEdI,cAAYA;AAFE,C","file":"types.js","sourcesContent":["/**\n * Gets the parsed type name of subjects.\n *\n * @param {array|object|string|number} subject The subject to get the parsed type from.\n * @returns {string} The parsed type name.\n */\nvar getType = function( subject ) {\n\tif ( Array.isArray( subject ) ) {\n\t\treturn \"array\";\n\t}\n\treturn typeof subject;\n};\n\n/**\n * Validates the type of subjects. Throws an error if the type is invalid.\n *\n * @param {object} subject The object containing all subjects.\n * @param {string} expectedType The expected type.\n * @returns {boolean} Returns true if types matches expected type. Otherwise returns false.\n */\nvar isSameType = function( subject, expectedType ) {\n\tvar passedType = getType( subject );\n\treturn passedType === expectedType;\n};\n\nexport {\n\tgetType,\n\tisSameType,\n};\n\nexport default {\n\tgetType: getType,\n\tisSameType: isSameType,\n};\n"]}