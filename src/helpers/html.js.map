{"version":3,"sources":["../../../src/helpers/html.js"],"names":["blockElements","inlineElements","blockElementsRegex","RegExp","join","inlineElementsRegex","blockElementStartRegex","blockElementEndRegex","inlineElementStartRegex","inlineElementEndRegex","otherElementStartRegex","otherElementEndRegex","contentRegex","greaterThanContentRegex","commentRegex","tokens","htmlBlockTokenizer","createTokenizer","token","push","addRule","isBlockElement","htmlElementName","test","isInlineElement","getBlocks","text","blocks","depth","blockStartTag","currentBlock","blockEndTag","replace","onText","end","i","nextToken","type","src","trim","memoizedGetBlocks"],"mappings":";;;;;;;AAwBA;;;;AACA;;;;AAzBA,IAAIA,gBAAgB,CAAE,SAAF,EAAa,SAAb,EAAwB,OAAxB,EAAiC,YAAjC,EAA+C,QAA/C,EAAyD,IAAzD,EAA+D,KAA/D,EAAsE,IAAtE,EAA4E,UAA5E,EAAwF,YAAxF,EACnB,QADmB,EACT,QADS,EACC,MADD,EACS,IADT,EACe,IADf,EACqB,IADrB,EAC2B,IAD3B,EACiC,IADjC,EACuC,IADvC,EAC6C,QAD7C,EACuD,QADvD,EACiE,IADjE,EACuE,IADvE,EAC6E,MAD7E,EACqF,KADrF,EAEnB,UAFmB,EAEP,IAFO,EAED,QAFC,EAES,GAFT,EAEc,KAFd,EAEqB,SAFrB,EAEgC,OAFhC,EAEyC,OAFzC,EAEkD,IAFlD,EAEwD,OAFxD,CAApB;AAGA,IAAIC,iBAAiB,CAAE,GAAF,EAAO,KAAP,EAAc,GAAd,EAAmB,OAAnB,EAA4B,IAA5B,EAAkC,MAAlC,EAA0C,SAA1C,EAAqD,MAArD,EAA6D,MAA7D,EAAqE,KAArE,EAA4E,IAA5E,EAAkF,KAAlF,EAAyF,QAAzF,EACpB,MADoB,EACZ,MADY,EACJ,KADI,EACG,GADH,EACQ,KADR,EACe,IADf,EACqB,KADrB,EAC4B,KAD5B,EACmC,QADnC,EAC6C,GAD7C,EACkD,QADlD,EAC4D,MAD5D,EACoE,KADpE,EAC2E,KAD3E,EACkF,QADlF,EAEpB,OAFoB,EAEX,OAFW,EAEF,QAFE,EAEQ,UAFR,CAArB;;AAIA,IAAIC,qBAAqB,IAAIC,MAAJ,CAAY,OAAOH,cAAcI,IAAd,CAAoB,GAApB,CAAP,GAAmC,IAA/C,EAAqD,GAArD,CAAzB;AACA,IAAIC,sBAAsB,IAAIF,MAAJ,CAAY,OAAOF,eAAeG,IAAf,CAAqB,GAArB,CAAP,GAAoC,IAAhD,EAAsD,GAAtD,CAA1B;;AAEA,IAAIE,yBAAyB,IAAIH,MAAJ,CAAY,QAAQH,cAAcI,IAAd,CAAoB,GAApB,CAAR,GAAoC,WAAhD,EAA6D,GAA7D,CAA7B;AACA,IAAIG,uBAAuB,IAAIJ,MAAJ,CAAY,SAASH,cAAcI,IAAd,CAAoB,GAApB,CAAT,GAAqC,WAAjD,EAA8D,GAA9D,CAA3B;;AAEA,IAAII,0BAA0B,IAAIL,MAAJ,CAAY,QAAQF,eAAeG,IAAf,CAAqB,GAArB,CAAR,GAAqC,UAAjD,EAA6D,GAA7D,CAA9B;AACA,IAAIK,wBAAwB,IAAIN,MAAJ,CAAY,SAASF,eAAeG,IAAf,CAAqB,GAArB,CAAT,GAAsC,UAAlD,EAA8D,GAA9D,CAA5B;;AAEA,IAAIM,yBAAyB,qBAA7B;AACA,IAAIC,uBAAuB,sBAA3B;;AAEA,IAAIC,eAAe,SAAnB;AACA,IAAIC,0BAA0B,WAA9B;;AAEA,IAAIC,eAAe,sBAAnB;;AAMA,IAAIC,SAAS,EAAb;AACA,IAAIC,kBAAJ;;AAEA;;;;;AAKA,SAASC,eAAT,GAA2B;AAC1BF,UAAS,EAAT;;AAEAC,sBAAqB,oBAAM,UAAUE,KAAV,EAAkB;AAC5CH,SAAOI,IAAP,CAAaD,KAAb;AACA,EAFoB,CAArB;;AAIAF,oBAAmBI,OAAnB,CAA4BR,YAA5B,EAA0C,SAA1C;AACAI,oBAAmBI,OAAnB,CAA4BP,uBAA5B,EAAqD,2BAArD;;AAEAG,oBAAmBI,OAAnB,CAA4Bd,sBAA5B,EAAoD,aAApD;AACAU,oBAAmBI,OAAnB,CAA4Bb,oBAA5B,EAAkD,WAAlD;AACAS,oBAAmBI,OAAnB,CAA4BZ,uBAA5B,EAAqD,cAArD;AACAQ,oBAAmBI,OAAnB,CAA4BX,qBAA5B,EAAmD,YAAnD;;AAEAO,oBAAmBI,OAAnB,CAA4BV,sBAA5B,EAAoD,qBAApD;AACAM,oBAAmBI,OAAnB,CAA4BT,oBAA5B,EAAkD,mBAAlD;AACA;;AAED;;;;;;AAMA,SAASU,cAAT,CAAyBC,eAAzB,EAA2C;AAC1C,QAAOpB,mBAAmBqB,IAAnB,CAAyBD,eAAzB,CAAP;AACA;;AAED;;;;;;AAMA,SAASE,eAAT,CAA0BF,eAA1B,EAA4C;AAC3C,QAAOjB,oBAAoBkB,IAApB,CAA0BD,eAA1B,CAAP;AACA;;AAED;;;;;;AAMA,SAASG,SAAT,CAAoBC,IAApB,EAA2B;AAC1B,KAAIC,SAAS,EAAb;AAAA,KAAiBC,QAAQ,CAAzB;AAAA,KACCC,gBAAgB,EADjB;AAAA,KAECC,eAAe,EAFhB;AAAA,KAGCC,cAAc,EAHf;;AAKA;AACAL,QAAOA,KAAKM,OAAL,CAAclB,YAAd,EAA4B,EAA5B,CAAP;;AAEAG;AACAD,oBAAmBiB,MAAnB,CAA2BP,IAA3B;AACAV,oBAAmBkB,GAAnB;;AAEA,wBAASnB,MAAT,EAAiB,UAAUG,KAAV,EAAiBiB,CAAjB,EAAqB;AACrC,MAAIC,YAAYrB,OAAQoB,IAAI,CAAZ,CAAhB;;AAEA,UAASjB,MAAMmB,IAAf;AACC,QAAK,SAAL;AACA,QAAK,2BAAL;AACA,QAAK,cAAL;AACA,QAAK,YAAL;AACA,QAAK,WAAL;AACA,QAAK,qBAAL;AACA,QAAK,mBAAL;AACA,QAAK,mBAAL;AACC,QAAK,CAAED,SAAF,IAAiBR,UAAU,CAAV,KAAiBQ,UAAUC,IAAV,KAAmB,aAAnB,IAAoCD,UAAUC,IAAV,KAAmB,WAAxE,CAAtB,EAAgH;AAC/GP,qBAAgBZ,MAAMoB,GAAtB;;AAEAX,YAAOR,IAAP,CAAaW,YAAb;AACAD,qBAAgB,EAAhB;AACAC,oBAAe,EAAf;AACAC,mBAAc,EAAd;AACA,KAPD,MAOO;AACND,qBAAgBZ,MAAMoB,GAAtB;AACA;AACD;;AAED,QAAK,aAAL;AACC,QAAKV,UAAU,CAAf,EAAmB;AAClB,SAAKE,aAAaS,IAAb,OAAwB,EAA7B,EAAkC;AACjCZ,aAAOR,IAAP,CAAaW,YAAb;AACA;AACDA,oBAAe,EAAf;AACAC,mBAAc,EAAd;AACA;;AAEDH;AACAC,oBAAgBX,MAAMoB,GAAtB;AACA;;AAED,QAAK,WAAL;AACCV;AACAG,kBAAcb,MAAMoB,GAApB;;AAEA;;;;AAIA,QAAK,OAAOT,aAAP,IAAwB,OAAOE,WAApC,EAAkD;AACjDJ,YAAOR,IAAP,CAAaU,gBAAgBC,YAAhB,GAA+BC,WAA5C;AACA,KAFD,MAEO,IAAK,OAAOD,aAAaS,IAAb,EAAZ,EAAkC;AACxCZ,YAAOR,IAAP,CAAaW,YAAb;AACA;AACDD,oBAAgB,EAAhB;AACAC,mBAAe,EAAf;AACAC,kBAAc,EAAd;AACA;AAlDF;;AAqDA;AACA,MAAKH,QAAQ,CAAb,EAAiB;AAChBA,WAAQ,CAAR;AACA;AACD,EA5DD;;AA8DA,QAAOD,MAAP;AACA;;AAED,IAAMa,oBAAoB,uBAASf,SAAT,CAA1B;;QAGCzB,a,GAAAA,a;QACAC,c,GAAAA,c;QACAoB,c,GAAAA,c;QACAG,e,GAAAA,e;QACqBC,S,GAArBe,iB;kBAGc;AACdxC,gBAAeA,aADD;AAEdC,iBAAgBA,cAFF;AAGdoB,iBAAgBA,cAHF;AAIdG,kBAAiBA,eAJH;AAKdC,YAAWe;AALG,C","file":"html.js","sourcesContent":["var blockElements = [ \"address\", \"article\", \"aside\", \"blockquote\", \"canvas\", \"dd\", \"div\", \"dl\", \"fieldset\", \"figcaption\",\n\t\"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"hr\", \"li\", \"main\", \"nav\",\n\t\"noscript\", \"ol\", \"output\", \"p\", \"pre\", \"section\", \"table\", \"tfoot\", \"ul\", \"video\" ];\nvar inlineElements = [ \"b\", \"big\", \"i\", \"small\", \"tt\", \"abbr\", \"acronym\", \"cite\", \"code\", \"dfn\", \"em\", \"kbd\", \"strong\",\n\t\"samp\", \"time\", \"var\", \"a\", \"bdo\", \"br\", \"img\", \"map\", \"object\", \"q\", \"script\", \"span\", \"sub\", \"sup\", \"button\",\n\t\"input\", \"label\", \"select\", \"textarea\" ];\n\nvar blockElementsRegex = new RegExp( \"^(\" + blockElements.join( \"|\" ) + \")$\", \"i\" );\nvar inlineElementsRegex = new RegExp( \"^(\" + inlineElements.join( \"|\" ) + \")$\", \"i\" );\n\nvar blockElementStartRegex = new RegExp( \"^<(\" + blockElements.join( \"|\" ) + \")[^>]*?>$\", \"i\" );\nvar blockElementEndRegex = new RegExp( \"^</(\" + blockElements.join( \"|\" ) + \")[^>]*?>$\", \"i\" );\n\nvar inlineElementStartRegex = new RegExp( \"^<(\" + inlineElements.join( \"|\" ) + \")[^>]*>$\", \"i\" );\nvar inlineElementEndRegex = new RegExp( \"^</(\" + inlineElements.join( \"|\" ) + \")[^>]*>$\", \"i\" );\n\nvar otherElementStartRegex = /^<([^>\\s/]+)[^>]*>$/;\nvar otherElementEndRegex = /^<\\/([^>\\s]+)[^>]*>$/;\n\nvar contentRegex = /^[^<]+$/;\nvar greaterThanContentRegex = /^<[^><]*$/;\n\nvar commentRegex = /<!--(.|[\\r\\n])*?-->/g;\n\nimport core from \"tokenizer2/core\";\nimport { forEach } from \"lodash-es\";\nimport { memoize } from \"lodash-es\";\n\nvar tokens = [];\nvar htmlBlockTokenizer;\n\n/**\n * Creates a tokenizer to tokenize HTML into blocks.\n *\n * @returns {void}\n */\nfunction createTokenizer() {\n\ttokens = [];\n\n\thtmlBlockTokenizer = core( function( token ) {\n\t\ttokens.push( token );\n\t} );\n\n\thtmlBlockTokenizer.addRule( contentRegex, \"content\" );\n\thtmlBlockTokenizer.addRule( greaterThanContentRegex, \"greater-than-sign-content\" );\n\n\thtmlBlockTokenizer.addRule( blockElementStartRegex, \"block-start\" );\n\thtmlBlockTokenizer.addRule( blockElementEndRegex, \"block-end\" );\n\thtmlBlockTokenizer.addRule( inlineElementStartRegex, \"inline-start\" );\n\thtmlBlockTokenizer.addRule( inlineElementEndRegex, \"inline-end\" );\n\n\thtmlBlockTokenizer.addRule( otherElementStartRegex, \"other-element-start\" );\n\thtmlBlockTokenizer.addRule( otherElementEndRegex, \"other-element-end\" );\n}\n\n/**\n * Returns whether or not the given element name is a block element.\n *\n * @param {string} htmlElementName The name of the HTML element.\n * @returns {boolean} Whether or not it is a block element.\n */\nfunction isBlockElement( htmlElementName ) {\n\treturn blockElementsRegex.test( htmlElementName );\n}\n\n/**\n * Returns whether or not the given element name is an inline element.\n *\n * @param {string} htmlElementName The name of the HTML element.\n * @returns {boolean} Whether or not it is an inline element.\n */\nfunction isInlineElement( htmlElementName ) {\n\treturn inlineElementsRegex.test( htmlElementName );\n}\n\n/**\n * Splits a text into blocks based on HTML block elements.\n *\n * @param {string} text The text to split.\n * @returns {Array} A list of blocks based on HTML block elements.\n */\nfunction getBlocks( text ) {\n\tvar blocks = [], depth = 0,\n\t\tblockStartTag = \"\",\n\t\tcurrentBlock = \"\",\n\t\tblockEndTag = \"\";\n\n\t// Remove all comments because it is very hard to tokenize them.\n\ttext = text.replace( commentRegex, \"\" );\n\n\tcreateTokenizer();\n\thtmlBlockTokenizer.onText( text );\n\thtmlBlockTokenizer.end();\n\n\tforEach( tokens, function( token, i ) {\n\t\tvar nextToken = tokens[ i + 1 ];\n\n\t\tswitch ( token.type ) {\n\t\t\tcase \"content\":\n\t\t\tcase \"greater-than-sign-content\":\n\t\t\tcase \"inline-start\":\n\t\t\tcase \"inline-end\":\n\t\t\tcase \"other-tag\":\n\t\t\tcase \"other-element-start\":\n\t\t\tcase \"other-element-end\":\n\t\t\tcase \"greater than sign\":\n\t\t\t\tif ( ! nextToken || ( depth === 0 && ( nextToken.type === \"block-start\" || nextToken.type === \"block-end\" ) ) ) {\n\t\t\t\t\tcurrentBlock += token.src;\n\n\t\t\t\t\tblocks.push( currentBlock );\n\t\t\t\t\tblockStartTag = \"\";\n\t\t\t\t\tcurrentBlock = \"\";\n\t\t\t\t\tblockEndTag = \"\";\n\t\t\t\t} else {\n\t\t\t\t\tcurrentBlock += token.src;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"block-start\":\n\t\t\t\tif ( depth !== 0 ) {\n\t\t\t\t\tif ( currentBlock.trim() !== \"\" ) {\n\t\t\t\t\t\tblocks.push( currentBlock );\n\t\t\t\t\t}\n\t\t\t\t\tcurrentBlock = \"\";\n\t\t\t\t\tblockEndTag = \"\";\n\t\t\t\t}\n\n\t\t\t\tdepth++;\n\t\t\t\tblockStartTag = token.src;\n\t\t\t\tbreak;\n\n\t\t\tcase \"block-end\":\n\t\t\t\tdepth--;\n\t\t\t\tblockEndTag = token.src;\n\n\t\t\t\t/*\n\t\t\t\t * We try to match the most deep blocks so discard any other blocks that have been started but not\n\t\t\t\t * finished.\n\t\t\t\t */\n\t\t\t\tif ( \"\" !== blockStartTag && \"\" !== blockEndTag ) {\n\t\t\t\t\tblocks.push( blockStartTag + currentBlock + blockEndTag );\n\t\t\t\t} else if ( \"\" !== currentBlock.trim() ) {\n\t\t\t\t\tblocks.push( currentBlock );\n\t\t\t\t}\n\t\t\t\tblockStartTag = \"\";\n\t\t\t\tcurrentBlock = \"\";\n\t\t\t\tblockEndTag = \"\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Handles HTML with too many closing tags.\n\t\tif ( depth < 0 ) {\n\t\t\tdepth = 0;\n\t\t}\n\t} );\n\n\treturn blocks;\n}\n\nconst memoizedGetBlocks = memoize( getBlocks );\n\nexport {\n\tblockElements,\n\tinlineElements,\n\tisBlockElement,\n\tisInlineElement,\n\tmemoizedGetBlocks as getBlocks,\n};\n\nexport default {\n\tblockElements: blockElements,\n\tinlineElements: inlineElements,\n\tisBlockElement: isBlockElement,\n\tisInlineElement: isInlineElement,\n\tgetBlocks: memoizedGetBlocks,\n};\n"]}