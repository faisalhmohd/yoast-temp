{"version":3,"sources":["../../../src/helpers/syllableCountIterator.js"],"names":["SyllableCountIterator","config","countSteps","createSyllableCountSteps","deviations","vowels","prototype","syllableCounts","syllableCountStep","push","bind","getAvailableSyllableCountSteps","countSyllables","word","syllableCount","step"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AAGA;;;;;;AAMA,IAAIA,wBAAwB,SAAxBA,qBAAwB,CAAUC,MAAV,EAAmB;AAC9C,OAAKC,UAAL,GAAkB,EAAlB;AACA,MAAK,CAAE,2BAAaD,MAAb,CAAP,EAA+B;AAC9B,SAAKE,wBAAL,CAA+BF,OAAOG,UAAP,CAAkBC,MAAjD;AACA;AACD,CALD;;AAOA;;;;;;AAMAL,sBAAsBM,SAAtB,CAAgCH,wBAAhC,GAA2D,UAAUI,cAAV,EAA2B;AACrF,yBAASA,cAAT,EAAyB,UAAUC,iBAAV,EAA8B;AACtD,SAAKN,UAAL,CAAgBO,IAAhB,CAAsB,gCAAuBD,iBAAvB,CAAtB;AACA,GAFwB,CAEvBE,IAFuB,CAEjB,IAFiB,CAAzB;AAGA,CAJD;;AAMA;;;;;AAKAV,sBAAsBM,SAAtB,CAAgCK,8BAAhC,GAAiE,YAAW;AAC3E,SAAO,KAAKT,UAAZ;AACA,CAFD;;AAIA;;;;;;AAMAF,sBAAsBM,SAAtB,CAAgCM,cAAhC,GAAiD,UAAUC,IAAV,EAAiB;AACjE,MAAIC,gBAAgB,CAApB;AACA,yBAAS,KAAKZ,UAAd,EAA0B,UAAUa,IAAV,EAAiB;AAC1CD,qBAAiBC,KAAKH,cAAL,CAAqBC,IAArB,CAAjB;AACA,GAFD;AAGA,SAAOC,aAAP;AACA,CAND;;kBAQed,qB","file":"syllableCountIterator.js","sourcesContent":["import SyllableCountStep from \"./syllableCountStep.js\";\n\nimport { isUndefined } from \"lodash-es\";\nimport { forEach } from \"lodash-es\";\n\n/**\n * Creates a syllable count iterator.\n *\n * @param {object} config The config object containing an array with syllable exclusions.\n * @constructor\n */\nvar SyllableCountIterator = function( config ) {\n\tthis.countSteps = [];\n\tif ( ! isUndefined( config ) ) {\n\t\tthis.createSyllableCountSteps( config.deviations.vowels );\n\t}\n};\n\n/**\n * Creates a syllable count step object for each exclusion.\n *\n * @param {object} syllableCounts The object containing all exclusion syllables including the multipliers.\n * @returns {void}\n */\nSyllableCountIterator.prototype.createSyllableCountSteps = function( syllableCounts ) {\n\tforEach( syllableCounts, function( syllableCountStep ) {\n\t\tthis.countSteps.push( new SyllableCountStep( syllableCountStep ) );\n\t}.bind( this ) );\n};\n\n/**\n * Returns all available count steps.\n *\n * @returns {Array} All available count steps.\n */\nSyllableCountIterator.prototype.getAvailableSyllableCountSteps = function() {\n\treturn this.countSteps;\n};\n\n/**\n * Counts the syllables for all the steps and returns the total syllable count.\n *\n * @param {String} word The word to count syllables in.\n * @returns {number} The number of syllables found based on exclusions.\n */\nSyllableCountIterator.prototype.countSyllables = function( word ) {\n\tvar syllableCount = 0;\n\tforEach( this.countSteps, function( step ) {\n\t\tsyllableCount += step.countSyllables( word );\n\t} );\n\treturn syllableCount;\n};\n\nexport default SyllableCountIterator;\n"]}