{"version":3,"sources":["../../../src/helpers/domManipulation.js"],"names":["addClass","element","className","classes","split","indexOf","push","join","removeClass","foundClass","splice","removeClasses","bind","hasClass"],"mappings":";;;;;;AAAA;;AAEA;;;;;;;AAOA,IAAIA,WAAW,SAAXA,QAAW,CAAUC,OAAV,EAAmBC,SAAnB,EAA+B;AAC7C,MAAIC,UAAUF,QAAQC,SAAR,CAAkBE,KAAlB,CAAyB,GAAzB,CAAd;;AAEA,MAAK,CAAC,CAAD,KAAOD,QAAQE,OAAR,CAAiBH,SAAjB,CAAZ,EAA2C;AAC1CC,YAAQG,IAAR,CAAcJ,SAAd;AACA;;AAEDD,UAAQC,SAAR,GAAoBC,QAAQI,IAAR,CAAc,GAAd,CAApB;AACA,CARD;;AAUA;;;;;;;AAOA,IAAIC,cAAc,SAAdA,WAAc,CAAUP,OAAV,EAAmBC,SAAnB,EAA+B;AAChD,MAAIC,UAAUF,QAAQC,SAAR,CAAkBE,KAAlB,CAAyB,GAAzB,CAAd;AACA,MAAIK,aAAaN,QAAQE,OAAR,CAAiBH,SAAjB,CAAjB;;AAEA,MAAK,CAAC,CAAD,KAAOO,UAAZ,EAAyB;AACxBN,YAAQO,MAAR,CAAgBD,UAAhB,EAA4B,CAA5B;AACA;;AAEDR,UAAQC,SAAR,GAAoBC,QAAQI,IAAR,CAAc,GAAd,CAApB;AACA,CATD;;AAWA;;;;;;;AAOA,IAAII,gBAAgB,SAAhBA,aAAgB,CAAUV,OAAV,EAAmBE,OAAnB,EAA6B;AAChD,yBAASA,OAAT,EAAkB,KAAKK,WAAL,CAAiBI,IAAjB,CAAuB,IAAvB,EAA6BX,OAA7B,CAAlB;AACA,CAFD;;AAIA;;;;;;;AAOA,IAAIY,WAAW,SAAXA,QAAW,CAAUZ,OAAV,EAAmBC,SAAnB,EAA+B;AAC7C,SAAOD,QAAQC,SAAR,CAAkBG,OAAlB,CAA2BH,SAA3B,IAAyC,CAAC,CAAjD;AACA,CAFD;;kBAIe;AACdW,YAAUA,QADI;AAEdb,YAAUA,QAFI;AAGdQ,eAAaA,WAHC;AAIdG,iBAAeA;AAJD,C","file":"domManipulation.js","sourcesContent":["import { forEach } from \"lodash-es\";\n\n/**\n * Adds a class to an element\n *\n * @param {HTMLElement} element The element to add the class to.\n * @param {string} className The class to add.\n * @returns {void}\n */\nvar addClass = function( element, className ) {\n\tvar classes = element.className.split( \" \" );\n\n\tif ( -1 === classes.indexOf( className ) ) {\n\t\tclasses.push( className );\n\t}\n\n\telement.className = classes.join( \" \" );\n};\n\n/**\n * Removes a class from an element\n *\n * @param {HTMLElement} element The element to remove the class from.\n * @param {string} className The class to remove.\n * @returns {void}\n */\nvar removeClass = function( element, className ) {\n\tvar classes = element.className.split( \" \" );\n\tvar foundClass = classes.indexOf( className );\n\n\tif ( -1 !== foundClass ) {\n\t\tclasses.splice( foundClass, 1 );\n\t}\n\n\telement.className = classes.join( \" \" );\n};\n\n/**\n * Removes multiple classes from an element\n *\n * @param {HTMLElement} element The element to remove the classes from.\n * @param {Array} classes A list of classes to remove\n * @returns {void}\n */\nvar removeClasses = function( element, classes ) {\n\tforEach( classes, this.removeClass.bind( null, element ) );\n};\n\n/**\n * Checks whether an element has a specific class.\n *\n * @param {HTMLElement} element The element to check for the class.\n * @param {string} className The class to look for.\n * @returns {boolean} Whether or not the class is present.\n */\nvar hasClass = function( element, className ) {\n\treturn element.className.indexOf( className ) > -1;\n};\n\nexport default {\n\thasClass: hasClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\tremoveClasses: removeClasses,\n};\n"]}