{"version":3,"sources":["../../../src/helpers/createMeasurementElement.js"],"names":["elementId","createMeasurementElement","hiddenElement","document","createElement","id","style","position","left","top","height","overflow","fontFamily","fontSize","fontWeight","body","appendChild","measureTextWidth","text","element","getElementById","innerHTML","offsetWidth"],"mappings":";;;;;AAAA,IAAMA,YAAY,2BAAlB;;AAEA;;;;;AAKA,IAAMC,2BAA2B,SAA3BA,wBAA2B,GAAW;AAC3C,KAAMC,gBAAgBC,SAASC,aAAT,CAAwB,KAAxB,CAAtB;;AAEAF,eAAcG,EAAd,GAAmBL,SAAnB;;AAEA;AACAE,eAAcI,KAAd,CAAoBC,QAApB,GAA+B,UAA/B;AACAL,eAAcI,KAAd,CAAoBE,IAApB,GAA2B,SAA3B;AACAN,eAAcI,KAAd,CAAoBG,GAApB,GAA0B,CAA1B;AACAP,eAAcI,KAAd,CAAoBI,MAApB,GAA6B,CAA7B;AACAR,eAAcI,KAAd,CAAoBK,QAApB,GAA+B,QAA/B;AACAT,eAAcI,KAAd,CAAoBM,UAApB,GAAiC,OAAjC;AACAV,eAAcI,KAAd,CAAoBO,QAApB,GAA+B,MAA/B;AACAX,eAAcI,KAAd,CAAoBQ,UAApB,GAAiC,KAAjC;;AAEAX,UAASY,IAAT,CAAcC,WAAd,CAA2Bd,aAA3B;AACA,QAAOA,aAAP;AACA,CAjBD;;AAmBA;;;;;;AAMO,IAAMe,8CAAmB,SAAnBA,gBAAmB,CAAUC,IAAV,EAAiB;AAChD,KAAIC,UAAUhB,SAASiB,cAAT,CAAyBpB,SAAzB,CAAd;AACA,KAAK,CAAEmB,OAAP,EAAiB;AAChBA,YAAUlB,0BAAV;AACA;AACDkB,SAAQE,SAAR,GAAoBH,IAApB;AACA,QAAOC,QAAQG,WAAf;AACA,CAPM","file":"createMeasurementElement.js","sourcesContent":["const elementId = \"yoast-measurement-element\";\n\n/**\n * Creates an hidden element with the purpose to calculate the sizes of elements and adds these elements to the body.\n *\n * @returns {HTMLElement} The created hidden element.\n */\nconst createMeasurementElement = function() {\n\tconst hiddenElement = document.createElement( \"div\" );\n\n\thiddenElement.id = elementId;\n\n\t// Styles to prevent unintended scrolling in Gutenberg.\n\thiddenElement.style.position = \"absolute\";\n\thiddenElement.style.left = \"-9999em\";\n\thiddenElement.style.top = 0;\n\thiddenElement.style.height = 0;\n\thiddenElement.style.overflow = \"hidden\";\n\thiddenElement.style.fontFamily = \"Arial\";\n\thiddenElement.style.fontSize = \"18px\";\n\thiddenElement.style.fontWeight = \"400\";\n\n\tdocument.body.appendChild( hiddenElement );\n\treturn hiddenElement;\n};\n\n/**\n * Measures the width of the text using a hidden element.\n *\n * @param {string} text The text to measure the width for.\n * @returns {number} The width in pixels.\n */\nexport const measureTextWidth = function( text ) {\n\tlet element = document.getElementById( elementId );\n\tif ( ! element ) {\n\t\telement = createMeasurementElement();\n\t}\n\telement.innerHTML = text;\n\treturn element.offsetWidth;\n};\n"]}